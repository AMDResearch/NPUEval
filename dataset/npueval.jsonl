{"kernel_name": "abs_int8", "prompt": "/*\nThis AIE kernel implements an abs function on an input vector.\n>>> abs_int8([44, -118, -1, 12, -81, 42, 68, 23])\n[44, 118, 1, 12, 81, 42, 68, 23]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 1024\nout_buffer size: 1024\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid abs_int8(int8_t *in_buffer, int8_t *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t nbytes = 1024;\n    for (uint32_t i = 0; i < nbytes; i++) {\n        int8_t value = in_buffer[i];\n        if (value < 0) {\n            out_buffer[i] = -value;\n        } else {\n            out_buffer[i] = value;\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void abs_int8_wrapper(int8_t *in_buffer, int8_t *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        abs_int8(in_buffer, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [44, -118, -1, 12, -81, 42, 68, 23, -11, 38, -106, 55, 64, 76, -95, 88, -61, 51, -50, 26, 123, -46, 34, 91, 67, -10, -3, 11, -25, -3, 101, 88, -119, 36, -12, -20, 83, 94, 33, 31, -107, -47, -39, 37, 114, 86, -26, -30, -92, 55, -123, -16, -41, -70, -85, -52, -58, -68, -53, 100, 88, 61, 4, -114, -40, 26, 50, 118, 12, 77, 76, -59, -70, -71, -87, -30, 65, -62, -56, -6, 102, -3, 46, 74, -89, -54, 106, 79, -41, 40, -27, 7, 46, 72, 95, -6, -40, -34, -21, 17, -47, 11, 13, -28, 37, 102, 115, 108, -103, -62, -119, 86, -51, -21, -81, -110, -56, 24, -33, -42, -119, -101, -50, -106, 20, 23, 110, 37, -13, -120, -83, -123, 80, -109, -59, -34, 115, 18, -90, 85, 69, -98, -120, 117, 126, -57, -75, 71, -49, -121, 110, -93, 47, -99, 57, 94, 64, -119, 62, 94, -46, 59, 6, 122, -29, -32, -66, -7, 88, 39, 21, 76, 49, -4, -120, 77, 115, 2, -93, -10, -99, -125, -66, 5, 19, 66, 80, 71, 19, -116, 75, 45, 14, -69, -57, -98, 39, -31, -5, 56, -96, 93, 81, 35, 65, -65, 127, 20, -119, 77, 50, -92, 57, -54, 17, 9, -1, 82, 85, 113, -96, 34, -76, 66, -97, 90, 23, 5, 74, 66, -100, -101, 116, -56, -89, -22, 23, 96, -67, -7, 35, 106, 57, -61, 126, -7, 51, -81, 75, -83, -76, 70, -14, 43, 38, 60, 55, -60, 70, -12, -100, 88, -17, -73, -94, 99, 4, 17, 0, 40, 29, -94, 0, -24, 79, -124, 36, 103, 122, -46, -75, -36, -99, 30, 5, -105, -47, -90, -90, -50, 50, 28, 104, -115, 106, -72, 116, -30, 111, 29, -111, 113, 112, -30, -49, -7, 25, 113, 4, 49, -112, 103, -23, 70, 11, 46, -86, 108, -81, -13, 58, 53, -120, -36, -97, 58, 113, 28, -8, -45, 97, -17, -127, -47, -128, 103, -63, 117, 23, 50, 103, -17, -22, -103, 41, 111, -22, -113, -71, -24, -59, 120, -93, -71, 49, 42, -26, -81, -76, 39, -9, 108, 46, 43, -117, 59, 64, -85, 46, 33, 91, -75, -46, 92, 47, -37, -37, -48, -127, -95, 0, 119, -84, 64, 14, 105, 63, -48, -29, 74, 26, 27, -75, -90, -100, -35, 12, -53, -74, -45, -7, -22, 120, 17, 42, -65, 86, -119, -44, -80, -56, -16, 75, 72, -33, 34, -60, -111, -122, 125, -122, 51, -3, 117, 68, 27, -97, -102, -81, -60, -99, 39, -1, 114, -8, -75, 116, -73, 19, 34, 3, 20, -53, -87, 76, 115, 75, 126, -28, -101, -78, 39, 52, -92, 116, 20, 104, 55, 87, -64, -50, -113, -108, -22, 15, -92, -32, -9, 20, 70, 5, -7, 99, 44, 18, -66, 58, -37, 30, 31, -105, -69, 50, -88, 79, 42, 7, -42, 13, 11, -63, -100, -11, 17, 60, 44, -43, -73, -123, 40, -80, -94, -76, -47, -79, 117, -33, -93, -59, 38, -63, 71, 41, -72, -45, -78, 35, -106, -105, 115, 64, 69, -28, -34, -33, -36, 27, 41, 69, 28, -84, 82, -34, -18, -7, -125, -128, 33, 91, -104, -15, 87, -14, 31, 50, 14, 3, 86, -92, 117, -12, 44, 34, 103, 25, -104, -80, -29, 81, 120, -35, -65, 121, 121, 3, -55, 81, 96, -30, 6, 121, -9, -86, 62, -10, 2, 77, -125, -115, 122, -16, -47, -61, -114, 103, -89, 87, 26, 21, -85, -1, -13, 73, -32, -64, 61, -1, 105, -99, -123, -128, -74, -120, -118, 10, 119, -109, -15, -14, -119, -26, -56, -85, -78, 70, 122, 58, -77, 69, -98, -1, 13, -124, -36, -105, 88, 79, -53, 59, 86, -101, -5, 2, 112, -28, -98, -7, -103, -52, 48, -30, -40, -25, -47, -66, 94, -26, 97, 35, -93, -115, -22, 94, -6, -111, 107, -5, 120, -21, -112, 67, 39, 1, -73, -46, 90, -59, 49, 46, -73, 48, 16, 99, 74, -116, 17, 20, -36, -9, 93, 81, 16, 112, -61, -78, 74, -53, 2, 27, 21, 115, 5, -114, -37, 46, 106, -87, -4, -116, -104, -70, 124, 80, 107, 65, -70, -15, 19, -92, 92, -58, -107, -118, -37, 102, 109, -42, 16, -104, -57, -85, 60, 13, -47, -24, -77, -27, -126, -117, -24, 91, 42, -126, 59, 35, 87, -77, 1, 61, -95, -48, -76, 45, 37, -96, -72, -31, 55, 54, -108, -27, 87, 0, 4, -106, -54, -90, -37, 69, -61, -109, 33, 101, -82, 46, 20, 87, -27, -86, 54, -91, 22, -13, 53, 5, 13, 56, 68, -91, -123, 60, 9, -71, -86, 104, -23, -75, 84, -51, 62, 43, -34, -98, 57, -77, -127, -104, -75, -3, -91, -3, -30, 5, 45, -126, 3, 82, 17, -125, -66, -97, -59, -34, -96, -88, 52, 98, 44, -75, 60, -21, 23, 89, -55, -115, 125, -47, 118, -16, 119, 107, -18, -88, -55, 46, -65, -56, -75, 16, 65, -109, -116, -1, 19, -33, 50, -26, -27, -56, -113, 16, 23, 26, 69, -30, 101, 66, -103, -1, 18, 120, -44, 16, 35, 52, 96, -101, -71, -61, 105, -68, 100, 108, -37, 103, 115, -67, -97, -104, 46, -114, 79, -10, -14, -32, 31, 126, -14, -124, -67, 46, 88, 67, 31, 3, 122, 109, -110, -111, 51, 11, -24, 63, -99, 124, 83, -92, -52, -42, 42, -37, 68, 77, -115, -43, 80, -7, -117, -19, -23, -19, -26, 1, -27, -53, 19, 105, 44, 56, 122, 15, 97, -112, 38, 114, -65, 24, -52, 78, 20, 29, -109, -81, -48, 21, -24, 57, 97, -18, 4, -91, 119, -103, 64, -55, 49, 80, 37, 37, 22, 60, -61, 42, 57, -7, -121, 96, 40, -10, 75, -42, 0, -11, -76, 0, 8, 61, 101, 65, 116, -45, -74, -124, -69, 33, 10, 92, 36, -24, -89, -106, -27, 32, 67, 1, -20, 100, -68, -22, 30, 123, 21, -68, 27, 123, 106, 16, -7, -7, 88, 105, -124, -58, 21, -38, -8, 85, -127, -76, -51, -97, 41, -48, 55], "dtype": "int8"}], "outputs": [{"out_buffer": [44, 118, 1, 12, 81, 42, 68, 23, 11, 38, 106, 55, 64, 76, 95, 88, 61, 51, 50, 26, 123, 46, 34, 91, 67, 10, 3, 11, 25, 3, 101, 88, 119, 36, 12, 20, 83, 94, 33, 31, 107, 47, 39, 37, 114, 86, 26, 30, 92, 55, 123, 16, 41, 70, 85, 52, 58, 68, 53, 100, 88, 61, 4, 114, 40, 26, 50, 118, 12, 77, 76, 59, 70, 71, 87, 30, 65, 62, 56, 6, 102, 3, 46, 74, 89, 54, 106, 79, 41, 40, 27, 7, 46, 72, 95, 6, 40, 34, 21, 17, 47, 11, 13, 28, 37, 102, 115, 108, 103, 62, 119, 86, 51, 21, 81, 110, 56, 24, 33, 42, 119, 101, 50, 106, 20, 23, 110, 37, 13, 120, 83, 123, 80, 109, 59, 34, 115, 18, 90, 85, 69, 98, 120, 117, 126, 57, 75, 71, 49, 121, 110, 93, 47, 99, 57, 94, 64, 119, 62, 94, 46, 59, 6, 122, 29, 32, 66, 7, 88, 39, 21, 76, 49, 4, 120, 77, 115, 2, 93, 10, 99, 125, 66, 5, 19, 66, 80, 71, 19, 116, 75, 45, 14, 69, 57, 98, 39, 31, 5, 56, 96, 93, 81, 35, 65, 65, 127, 20, 119, 77, 50, 92, 57, 54, 17, 9, 1, 82, 85, 113, 96, 34, 76, 66, 97, 90, 23, 5, 74, 66, 100, 101, 116, 56, 89, 22, 23, 96, 67, 7, 35, 106, 57, 61, 126, 7, 51, 81, 75, 83, 76, 70, 14, 43, 38, 60, 55, 60, 70, 12, 100, 88, 17, 73, 94, 99, 4, 17, 0, 40, 29, 94, 0, 24, 79, 124, 36, 103, 122, 46, 75, 36, 99, 30, 5, 105, 47, 90, 90, 50, 50, 28, 104, 115, 106, 72, 116, 30, 111, 29, 111, 113, 112, 30, 49, 7, 25, 113, 4, 49, 112, 103, 23, 70, 11, 46, 86, 108, 81, 13, 58, 53, 120, 36, 97, 58, 113, 28, 8, 45, 97, 17, 127, 47, -128, 103, 63, 117, 23, 50, 103, 17, 22, 103, 41, 111, 22, 113, 71, 24, 59, 120, 93, 71, 49, 42, 26, 81, 76, 39, 9, 108, 46, 43, 117, 59, 64, 85, 46, 33, 91, 75, 46, 92, 47, 37, 37, 48, 127, 95, 0, 119, 84, 64, 14, 105, 63, 48, 29, 74, 26, 27, 75, 90, 100, 35, 12, 53, 74, 45, 7, 22, 120, 17, 42, 65, 86, 119, 44, 80, 56, 16, 75, 72, 33, 34, 60, 111, 122, 125, 122, 51, 3, 117, 68, 27, 97, 102, 81, 60, 99, 39, 1, 114, 8, 75, 116, 73, 19, 34, 3, 20, 53, 87, 76, 115, 75, 126, 28, 101, 78, 39, 52, 92, 116, 20, 104, 55, 87, 64, 50, 113, 108, 22, 15, 92, 32, 9, 20, 70, 5, 7, 99, 44, 18, 66, 58, 37, 30, 31, 105, 69, 50, 88, 79, 42, 7, 42, 13, 11, 63, 100, 11, 17, 60, 44, 43, 73, 123, 40, 80, 94, 76, 47, 79, 117, 33, 93, 59, 38, 63, 71, 41, 72, 45, 78, 35, 106, 105, 115, 64, 69, 28, 34, 33, 36, 27, 41, 69, 28, 84, 82, 34, 18, 7, 125, -128, 33, 91, 104, 15, 87, 14, 31, 50, 14, 3, 86, 92, 117, 12, 44, 34, 103, 25, 104, 80, 29, 81, 120, 35, 65, 121, 121, 3, 55, 81, 96, 30, 6, 121, 9, 86, 62, 10, 2, 77, 125, 115, 122, 16, 47, 61, 114, 103, 89, 87, 26, 21, 85, 1, 13, 73, 32, 64, 61, 1, 105, 99, 123, -128, 74, 120, 118, 10, 119, 109, 15, 14, 119, 26, 56, 85, 78, 70, 122, 58, 77, 69, 98, 1, 13, 124, 36, 105, 88, 79, 53, 59, 86, 101, 5, 2, 112, 28, 98, 7, 103, 52, 48, 30, 40, 25, 47, 66, 94, 26, 97, 35, 93, 115, 22, 94, 6, 111, 107, 5, 120, 21, 112, 67, 39, 1, 73, 46, 90, 59, 49, 46, 73, 48, 16, 99, 74, 116, 17, 20, 36, 9, 93, 81, 16, 112, 61, 78, 74, 53, 2, 27, 21, 115, 5, 114, 37, 46, 106, 87, 4, 116, 104, 70, 124, 80, 107, 65, 70, 15, 19, 92, 92, 58, 107, 118, 37, 102, 109, 42, 16, 104, 57, 85, 60, 13, 47, 24, 77, 27, 126, 117, 24, 91, 42, 126, 59, 35, 87, 77, 1, 61, 95, 48, 76, 45, 37, 96, 72, 31, 55, 54, 108, 27, 87, 0, 4, 106, 54, 90, 37, 69, 61, 109, 33, 101, 82, 46, 20, 87, 27, 86, 54, 91, 22, 13, 53, 5, 13, 56, 68, 91, 123, 60, 9, 71, 86, 104, 23, 75, 84, 51, 62, 43, 34, 98, 57, 77, 127, 104, 75, 3, 91, 3, 30, 5, 45, 126, 3, 82, 17, 125, 66, 97, 59, 34, 96, 88, 52, 98, 44, 75, 60, 21, 23, 89, 55, 115, 125, 47, 118, 16, 119, 107, 18, 88, 55, 46, 65, 56, 75, 16, 65, 109, 116, 1, 19, 33, 50, 26, 27, 56, 113, 16, 23, 26, 69, 30, 101, 66, 103, 1, 18, 120, 44, 16, 35, 52, 96, 101, 71, 61, 105, 68, 100, 108, 37, 103, 115, 67, 97, 104, 46, 114, 79, 10, 14, 32, 31, 126, 14, 124, 67, 46, 88, 67, 31, 3, 122, 109, 110, 111, 51, 11, 24, 63, 99, 124, 83, 92, 52, 42, 42, 37, 68, 77, 115, 43, 80, 7, 117, 19, 23, 19, 26, 1, 27, 53, 19, 105, 44, 56, 122, 15, 97, 112, 38, 114, 65, 24, 52, 78, 20, 29, 109, 81, 48, 21, 24, 57, 97, 18, 4, 91, 119, 103, 64, 55, 49, 80, 37, 37, 22, 60, 61, 42, 57, 7, 121, 96, 40, 10, 75, 42, 0, 11, 76, 0, 8, 61, 101, 65, 116, 45, 74, 124, 69, 33, 10, 92, 36, 24, 89, 106, 27, 32, 67, 1, 20, 100, 68, 22, 30, 123, 21, 68, 27, 123, 106, 16, 7, 7, 88, 105, 124, 58, 21, 38, 8, 85, 127, 76, 51, 97, 41, 48, 55], "dtype": "int8"}]}}
{"kernel_name": "add_offset_int8", "prompt": "/*\nThis AIE kernel adds a scalar int8 offset to every element of the input int8_t vector (length 256), and writes the result to the output buffer.\n>>> add_offset_int8([72, -53, 17, 92, -33, 95, 3, -91], -11)\n[61, -64, 6, 81, -44, 84, -8, -102]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 256\nout_buffer size: 256\noffset: -11\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid add_offset_int8(int8_t *in_buffer, int8_t *out_buffer, int8_t offset) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t NUM_ELEMENTS = 256;\n    for (int i = 0; i < NUM_ELEMENTS; ++i) {\n        int16_t tmp = static_cast<int16_t>(in_buffer[i]) + static_cast<int16_t>(offset);\n        out_buffer[i] = static_cast<int8_t>(tmp);\n    }\n}", "program_code": "extern \"C\" {\n    void add_offset_int8_wrapper(int8_t *in_buffer, int8_t *out_buffer, int8_t offset) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        add_offset_int8(in_buffer, out_buffer, offset);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [72, -53, 17, 92, -33, 95, 3, -91, -79, -64, -13, -30, -12, 40, -42, 93, -61, -13, 74, -12, -19, 65, -75, -23, -28, -91, 48, 15, 97, -21, 75, 92, -18, -1, 77, -71, 47, 47, 42, 67, -68, 93, -91, 85, 27, -68, -69, 51, 63, 14, 83, -72, -66, 28, 28, 64, -47, 33, -62, -83, -21, 32, 5, -58, 86, -69, 20, -99, -35, 69, -43, -65, 2, 19, -89, 74, -18, -9, 28, 42, -1, -47, 40, 21, 70, -16, -32, -94, 96, -53, 27, 31, 0, 80, -22, 43, 48, 86, -77, 41, 17, -15, -52, -51, -31, 69, 63, 92, -5, 97, -6, -100, 13, 78, -64, 62, -52, -7, 31, -2, -58, 12, 49, 27, -100, 38, 14, -57, 86, 27, -77, 87, 30, 21, -2, -38, 63, 23, 95, -18, 74, 48, -50, 55, -86, -59, -42, 93, -64, -90, -14, -57, 4, -89, -98, -49, -20, -68, 82, 28, -62, -81, 74, -58, 15, 84, 88, -23, -70, -76, 25, -98, -97, -6, 7, -87, 12, -60, -28, -81, -5, -28, 54, 94, 80, -33, -39, -86, -4, -96, 95, 39, -14, 21, 9, -25, 84, -84, 52, 57, 49, 10, -75, 88, 21, 18, 17, 89, -17, 61, 4, 60, 21, -30, -69, -87, -29, 84, 52, -21, -59, -82, -60, 82, -89, 66, 11, -7, 29, 18, -56, 25, -76, -33, -97, -65, 89, 97, -57, -68, -89, 4, 38, 82, 65, 25, 56, 11, -98, -73, 51, -47, -49, 74, 48, 81], "dtype": "int8"}], "outputs": [{"out_buffer": [61, -64, 6, 81, -44, 84, -8, -102, -90, -75, -24, -41, -23, 29, -53, 82, -72, -24, 63, -23, -30, 54, -86, -34, -39, -102, 37, 4, 86, -32, 64, 81, -29, -12, 66, -82, 36, 36, 31, 56, -79, 82, -102, 74, 16, -79, -80, 40, 52, 3, 72, -83, -77, 17, 17, 53, -58, 22, -73, -94, -32, 21, -6, -69, 75, -80, 9, -110, -46, 58, -54, -76, -9, 8, -100, 63, -29, -20, 17, 31, -12, -58, 29, 10, 59, -27, -43, -105, 85, -64, 16, 20, -11, 69, -33, 32, 37, 75, -88, 30, 6, -26, -63, -62, -42, 58, 52, 81, -16, 86, -17, -111, 2, 67, -75, 51, -63, -18, 20, -13, -69, 1, 38, 16, -111, 27, 3, -68, 75, 16, -88, 76, 19, 10, -13, -49, 52, 12, 84, -29, 63, 37, -61, 44, -97, -70, -53, 82, -75, -101, -25, -68, -7, -100, -109, -60, -31, -79, 71, 17, -73, -92, 63, -69, 4, 73, 77, -34, -81, -87, 14, -109, -108, -17, -4, -98, 1, -71, -39, -92, -16, -39, 43, 83, 69, -44, -50, -97, -15, -107, 84, 28, -25, 10, -2, -36, 73, -95, 41, 46, 38, -1, -86, 77, 10, 7, 6, 78, -28, 50, -7, 49, 10, -41, -80, -98, -40, 73, 41, -32, -70, -93, -71, 71, -100, 55, 0, -18, 18, 7, -67, 14, -87, -44, -108, -76, 78, 86, -68, -79, -100, -7, 27, 71, 54, 14, 45, 0, -109, -84, 40, -58, -60, 63, 37, 70], "dtype": "int8"}], "rtps": [{"offset": -11, "dtype": "int8"}]}}
{"kernel_name": "add_offset_uint8", "prompt": "/*\nThis AIE kernel adds an offset to each element of an input vector containing uint8 data.\n>>> add_offset_uint8([172, 10, 127, 140, 47, 170, 196, 151], 2)\n[174, 12, 129, 142, 49, 172, 198, 153]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 1024\nout_buffer size: 1024\noffset: 2\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid add_offset_uint8(uint8_t *in_buffer, uint8_t *out_buffer, uint8_t offset) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t nbytes = 1024;\n    for(int j=0; j<nbytes; j++) {\n        out_buffer[j] = in_buffer[j] + offset;\n    }\n}", "program_code": "extern \"C\" {\n    void add_offset_uint8_wrapper(uint8_t *in_buffer, uint8_t *out_buffer, uint8_t offset) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        add_offset_uint8(in_buffer, out_buffer, offset);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [172, 10, 127, 140, 47, 170, 196, 151, 117, 166, 22, 183, 192, 204, 33, 216, 67, 179, 78, 154, 251, 82, 162, 219, 195, 118, 125, 139, 103, 125, 229, 216, 9, 164, 116, 108, 211, 222, 161, 159, 21, 81, 89, 165, 242, 214, 102, 98, 36, 183, 5, 112, 87, 58, 43, 76, 70, 60, 75, 228, 216, 189, 132, 14, 88, 154, 178, 246, 140, 205, 204, 69, 58, 57, 41, 98, 193, 66, 72, 122, 230, 125, 174, 202, 39, 74, 234, 207, 87, 168, 101, 135, 174, 200, 223, 122, 88, 94, 107, 145, 81, 139, 141, 100, 165, 230, 243, 236, 25, 66, 9, 214, 77, 107, 47, 18, 72, 152, 95, 86, 9, 27, 78, 22, 148, 151, 238, 165, 115, 8, 45, 5, 208, 19, 69, 94, 243, 146, 38, 213, 197, 30, 8, 245, 254, 71, 53, 199, 79, 7, 238, 35, 175, 29, 185, 222, 192, 9, 190, 222, 82, 187, 134, 250, 99, 96, 62, 121, 216, 167, 149, 204, 177, 124, 8, 205, 243, 130, 35, 118, 29, 3, 62, 133, 147, 194, 208, 199, 147, 12, 203, 173, 142, 59, 71, 30, 167, 97, 123, 184, 32, 221, 209, 163, 193, 63, 148, 9, 205, 178, 36, 185, 74, 145, 137, 127, 210, 213, 241, 32, 162, 52, 194, 31, 218, 151, 133, 202, 194, 28, 27, 244, 72, 39, 106, 151, 224, 61, 121, 163, 234, 185, 67, 254, 121, 179, 47, 203, 45, 52, 198, 114, 171, 166, 188, 183, 68, 198, 116, 28, 216, 111, 55, 34, 227, 132, 145, 128, 168, 157, 34, 128, 104, 207, 4, 164, 231, 250, 82, 53, 92, 29, 158, 133, 23, 81, 38, 38, 78, 178, 156, 232, 13, 234, 56, 244, 98, 239, 157, 17, 241, 240, 98, 79, 121, 153, 241, 132, 177, 16, 231, 105, 198, 139, 174, 42, 236, 47, 115, 186, 181, 8, 92, 31, 186, 241, 156, 120, 83, 225, 111, 1, 81, 0, 231, 65, 245, 151, 178, 231, 111, 106, 25, 169, 239, 106, 15, 57, 104, 69, 248, 35, 57, 177, 170, 102, 47, 52, 167, 119, 236, 174, 171, 11, 187, 192, 43, 174, 161, 219, 53, 82, 220, 175, 91, 91, 80, 1, 33, 128, 247, 44, 192, 142, 233, 191, 80, 99, 202, 154, 155, 53, 38, 28, 93, 140, 75, 54, 83, 121, 106, 248, 145, 170, 63, 214, 9, 84, 48, 72, 112, 203, 200, 95, 162, 68, 17, 6, 253, 6, 179, 125, 245, 196, 155, 31, 26, 47, 68, 29, 167, 127, 242, 120, 53, 244, 55, 147, 162, 131, 148, 75, 41, 204, 243, 203, 254, 100, 27, 50, 167, 180, 36, 244, 148, 232, 183, 215, 64, 78, 15, 20, 106, 143, 36, 96, 119, 148, 198, 133, 121, 227, 172, 146, 62, 186, 91, 158, 159, 23, 59, 178, 40, 207, 170, 135, 86, 141, 139, 65, 28, 117, 145, 188, 172, 85, 55, 5, 168, 48, 34, 52, 81, 49, 245, 95, 35, 69, 166, 65, 199, 169, 56, 83, 50, 163, 22, 23, 243, 192, 197, 100, 94, 95, 92, 155, 169, 197, 156, 44, 210, 94, 110, 121, 3, 0, 161, 219, 24, 113, 215, 114, 159, 178, 142, 131, 214, 36, 245, 116, 172, 162, 231, 153, 24, 48, 99, 209, 248, 93, 63, 249, 249, 131, 73, 209, 224, 98, 134, 249, 119, 42, 190, 118, 130, 205, 3, 13, 250, 112, 81, 67, 14, 231, 39, 215, 154, 149, 43, 127, 115, 201, 96, 64, 189, 127, 233, 29, 5, 0, 54, 8, 10, 138, 247, 19, 113, 114, 9, 102, 72, 43, 50, 198, 250, 186, 51, 197, 30, 127, 141, 4, 92, 23, 216, 207, 75, 187, 214, 27, 123, 130, 240, 100, 30, 121, 25, 76, 176, 98, 88, 103, 81, 62, 222, 102, 225, 163, 35, 13, 106, 222, 122, 17, 235, 123, 248, 107, 16, 195, 167, 129, 55, 82, 218, 69, 177, 174, 55, 176, 144, 227, 202, 12, 145, 148, 92, 119, 221, 209, 144, 240, 67, 50, 202, 75, 130, 155, 149, 243, 133, 14, 91, 174, 234, 41, 124, 12, 24, 58, 252, 208, 235, 193, 58, 113, 147, 36, 220, 70, 21, 10, 91, 230, 237, 86, 144, 24, 71, 43, 188, 141, 81, 104, 51, 101, 2, 11, 104, 219, 170, 2, 187, 163, 215, 51, 129, 189, 33, 80, 52, 173, 165, 32, 56, 97, 183, 182, 20, 101, 215, 128, 132, 22, 74, 38, 91, 197, 67, 19, 161, 229, 46, 174, 148, 215, 101, 42, 182, 37, 150, 115, 181, 133, 141, 184, 196, 37, 5, 188, 137, 57, 42, 232, 105, 53, 212, 77, 190, 171, 94, 30, 185, 51, 1, 24, 53, 125, 37, 125, 98, 133, 173, 2, 131, 210, 145, 3, 62, 31, 69, 94, 32, 40, 180, 226, 172, 53, 188, 107, 151, 217, 73, 13, 253, 81, 246, 112, 247, 235, 110, 40, 73, 174, 63, 72, 53, 144, 193, 19, 12, 127, 147, 95, 178, 102, 101, 72, 15, 144, 151, 154, 197, 98, 229, 194, 25, 127, 146, 248, 84, 144, 163, 180, 224, 27, 57, 67, 233, 60, 228, 236, 91, 231, 243, 61, 31, 24, 174, 14, 207, 118, 114, 96, 159, 254, 114, 4, 61, 174, 216, 195, 159, 131, 250, 237, 18, 17, 179, 139, 104, 191, 29, 252, 211, 36, 76, 86, 170, 91, 196, 205, 13, 85, 208, 121, 11, 109, 105, 109, 102, 129, 101, 75, 147, 233, 172, 184, 250, 143, 225, 16, 166, 242, 63, 152, 76, 206, 148, 157, 19, 47, 80, 149, 104, 185, 225, 110, 132, 37, 247, 25, 192, 73, 177, 208, 165, 165, 150, 188, 67, 170, 185, 121, 7, 224, 168, 118, 203, 86, 128, 117, 52, 128, 136, 189, 229, 193, 244, 83, 54, 4, 59, 161, 138, 220, 164, 104, 39, 22, 101, 160, 195, 129, 108, 228, 60, 106, 158, 251, 149, 60, 155, 251, 234, 144, 121, 121, 216, 233, 4, 70, 149, 90, 120, 213, 1, 52, 77, 31, 169, 80, 183, 13], "dtype": "uint8"}], "outputs": [{"out_buffer": [174, 12, 129, 142, 49, 172, 198, 153, 119, 168, 24, 185, 194, 206, 35, 218, 69, 181, 80, 156, 253, 84, 164, 221, 197, 120, 127, 141, 105, 127, 231, 218, 11, 166, 118, 110, 213, 224, 163, 161, 23, 83, 91, 167, 244, 216, 104, 100, 38, 185, 7, 114, 89, 60, 45, 78, 72, 62, 77, 230, 218, 191, 134, 16, 90, 156, 180, 248, 142, 207, 206, 71, 60, 59, 43, 100, 195, 68, 74, 124, 232, 127, 176, 204, 41, 76, 236, 209, 89, 170, 103, 137, 176, 202, 225, 124, 90, 96, 109, 147, 83, 141, 143, 102, 167, 232, 245, 238, 27, 68, 11, 216, 79, 109, 49, 20, 74, 154, 97, 88, 11, 29, 80, 24, 150, 153, 240, 167, 117, 10, 47, 7, 210, 21, 71, 96, 245, 148, 40, 215, 199, 32, 10, 247, 0, 73, 55, 201, 81, 9, 240, 37, 177, 31, 187, 224, 194, 11, 192, 224, 84, 189, 136, 252, 101, 98, 64, 123, 218, 169, 151, 206, 179, 126, 10, 207, 245, 132, 37, 120, 31, 5, 64, 135, 149, 196, 210, 201, 149, 14, 205, 175, 144, 61, 73, 32, 169, 99, 125, 186, 34, 223, 211, 165, 195, 65, 150, 11, 207, 180, 38, 187, 76, 147, 139, 129, 212, 215, 243, 34, 164, 54, 196, 33, 220, 153, 135, 204, 196, 30, 29, 246, 74, 41, 108, 153, 226, 63, 123, 165, 236, 187, 69, 0, 123, 181, 49, 205, 47, 54, 200, 116, 173, 168, 190, 185, 70, 200, 118, 30, 218, 113, 57, 36, 229, 134, 147, 130, 170, 159, 36, 130, 106, 209, 6, 166, 233, 252, 84, 55, 94, 31, 160, 135, 25, 83, 40, 40, 80, 180, 158, 234, 15, 236, 58, 246, 100, 241, 159, 19, 243, 242, 100, 81, 123, 155, 243, 134, 179, 18, 233, 107, 200, 141, 176, 44, 238, 49, 117, 188, 183, 10, 94, 33, 188, 243, 158, 122, 85, 227, 113, 3, 83, 2, 233, 67, 247, 153, 180, 233, 113, 108, 27, 171, 241, 108, 17, 59, 106, 71, 250, 37, 59, 179, 172, 104, 49, 54, 169, 121, 238, 176, 173, 13, 189, 194, 45, 176, 163, 221, 55, 84, 222, 177, 93, 93, 82, 3, 35, 130, 249, 46, 194, 144, 235, 193, 82, 101, 204, 156, 157, 55, 40, 30, 95, 142, 77, 56, 85, 123, 108, 250, 147, 172, 65, 216, 11, 86, 50, 74, 114, 205, 202, 97, 164, 70, 19, 8, 255, 8, 181, 127, 247, 198, 157, 33, 28, 49, 70, 31, 169, 129, 244, 122, 55, 246, 57, 149, 164, 133, 150, 77, 43, 206, 245, 205, 0, 102, 29, 52, 169, 182, 38, 246, 150, 234, 185, 217, 66, 80, 17, 22, 108, 145, 38, 98, 121, 150, 200, 135, 123, 229, 174, 148, 64, 188, 93, 160, 161, 25, 61, 180, 42, 209, 172, 137, 88, 143, 141, 67, 30, 119, 147, 190, 174, 87, 57, 7, 170, 50, 36, 54, 83, 51, 247, 97, 37, 71, 168, 67, 201, 171, 58, 85, 52, 165, 24, 25, 245, 194, 199, 102, 96, 97, 94, 157, 171, 199, 158, 46, 212, 96, 112, 123, 5, 2, 163, 221, 26, 115, 217, 116, 161, 180, 144, 133, 216, 38, 247, 118, 174, 164, 233, 155, 26, 50, 101, 211, 250, 95, 65, 251, 251, 133, 75, 211, 226, 100, 136, 251, 121, 44, 192, 120, 132, 207, 5, 15, 252, 114, 83, 69, 16, 233, 41, 217, 156, 151, 45, 129, 117, 203, 98, 66, 191, 129, 235, 31, 7, 2, 56, 10, 12, 140, 249, 21, 115, 116, 11, 104, 74, 45, 52, 200, 252, 188, 53, 199, 32, 129, 143, 6, 94, 25, 218, 209, 77, 189, 216, 29, 125, 132, 242, 102, 32, 123, 27, 78, 178, 100, 90, 105, 83, 64, 224, 104, 227, 165, 37, 15, 108, 224, 124, 19, 237, 125, 250, 109, 18, 197, 169, 131, 57, 84, 220, 71, 179, 176, 57, 178, 146, 229, 204, 14, 147, 150, 94, 121, 223, 211, 146, 242, 69, 52, 204, 77, 132, 157, 151, 245, 135, 16, 93, 176, 236, 43, 126, 14, 26, 60, 254, 210, 237, 195, 60, 115, 149, 38, 222, 72, 23, 12, 93, 232, 239, 88, 146, 26, 73, 45, 190, 143, 83, 106, 53, 103, 4, 13, 106, 221, 172, 4, 189, 165, 217, 53, 131, 191, 35, 82, 54, 175, 167, 34, 58, 99, 185, 184, 22, 103, 217, 130, 134, 24, 76, 40, 93, 199, 69, 21, 163, 231, 48, 176, 150, 217, 103, 44, 184, 39, 152, 117, 183, 135, 143, 186, 198, 39, 7, 190, 139, 59, 44, 234, 107, 55, 214, 79, 192, 173, 96, 32, 187, 53, 3, 26, 55, 127, 39, 127, 100, 135, 175, 4, 133, 212, 147, 5, 64, 33, 71, 96, 34, 42, 182, 228, 174, 55, 190, 109, 153, 219, 75, 15, 255, 83, 248, 114, 249, 237, 112, 42, 75, 176, 65, 74, 55, 146, 195, 21, 14, 129, 149, 97, 180, 104, 103, 74, 17, 146, 153, 156, 199, 100, 231, 196, 27, 129, 148, 250, 86, 146, 165, 182, 226, 29, 59, 69, 235, 62, 230, 238, 93, 233, 245, 63, 33, 26, 176, 16, 209, 120, 116, 98, 161, 0, 116, 6, 63, 176, 218, 197, 161, 133, 252, 239, 20, 19, 181, 141, 106, 193, 31, 254, 213, 38, 78, 88, 172, 93, 198, 207, 15, 87, 210, 123, 13, 111, 107, 111, 104, 131, 103, 77, 149, 235, 174, 186, 252, 145, 227, 18, 168, 244, 65, 154, 78, 208, 150, 159, 21, 49, 82, 151, 106, 187, 227, 112, 134, 39, 249, 27, 194, 75, 179, 210, 167, 167, 152, 190, 69, 172, 187, 123, 9, 226, 170, 120, 205, 88, 130, 119, 54, 130, 138, 191, 231, 195, 246, 85, 56, 6, 61, 163, 140, 222, 166, 106, 41, 24, 103, 162, 197, 131, 110, 230, 62, 108, 160, 253, 151, 62, 157, 253, 236, 146, 123, 123, 218, 235, 6, 72, 151, 92, 122, 215, 3, 54, 79, 33, 171, 82, 185, 15], "dtype": "uint8"}], "rtps": [{"offset": 2, "dtype": "uint8"}]}}
{"kernel_name": "argmax_bfloat16", "prompt": "/*\nThis AIE kernel calculates the argmax of a given bfloat16 vector, returning a single uint32 value for the maximum argument.\n>>> argmax_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875])\n3\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 64\nresult size: 1\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid argmax_bfloat16(bfloat16 *input_vector, uint32_t *result) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 64;\n    uint32_t max_index = 0;\n    bfloat16 max_value = input_vector[0];\n\n    for (uint32_t i = 1; i < vector_size; i++) {\n        if (input_vector[i] > max_value) {\n            max_value = input_vector[i];\n            max_index = i;\n        }\n    }\n\n    *result = max_index;\n}", "program_code": "extern \"C\" {\n    void argmax_bfloat16_wrapper(bfloat16 *input_vector, uint32_t *result) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        argmax_bfloat16(input_vector, result);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625], "dtype": "bfloat16"}], "outputs": [{"result": 24, "dtype": "uint32"}]}}
{"kernel_name": "argmax_int32", "prompt": "/*\nThis AIE kernel calculates the argmax (the index of the largest element) of a given int32 vector of length 256 and stores the result in a single uint32 element output buffer.\n>>> argmax_int32([-30036, 10799, 9845, 19648, 13123, -11525, -2365, -665])\n[3]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\nresult size: 1\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid argmax_int32(int32_t *input_vector, uint32_t *result) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    uint32_t max_index = 0;\n    int32_t max_value = input_vector[0];\n\n    for (uint32_t i = 1; i < vector_size; i++) {\n        if (input_vector[i] > max_value) {\n            max_value = input_vector[i];\n            max_index = i;\n        }\n    }\n\n    *result = max_index;\n}", "program_code": "extern \"C\" {\n    void argmax_int32_wrapper(int32_t *input_vector, uint32_t *result) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        argmax_int32(input_vector, result);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [-30036, 10799, 9845, 19648, 13123, -11525, -2365, -665, 9225, 24275, -12011, 22258, 14116, -17833, -17338, 15832, 6744, 19852, -18118, -15679, -538, -13785, 10327, 18606, -8616, 2897, 26277, -15847, -5299, 6216, -25847, 6036, -30605, -27696, 4851, -24891, -14338, -30897, -25169, -30272, 15186, -8093, 10200, -847, 755, -31971, 17043, -29549, -17522, -7769, 23840, -16447, 19721, -13639, 21119, 8736, 23071, 17098, -14092, 24727, 27299, -1538, -21045, 11122, -15177, 22556, 25378, 10368, -6016, 26532, -9163, -26747, -12762, -29208, -7436, 28945, -1713, 12676, 18025, 27690, 13754, 14879, -11400, -12031, 30017, -4121, 28585, -6087, -18141, -20634, 27767, 15115, 8622, 23634, -12197, 30592, 27022, 19043, -22987, -13428, -5511, -16470, -20396, 18635, -28348, 13062, 7108, -15313, 29311, -18444, 5251, 29644, -25756, -23372, 14312, -28850, -23409, 18068, 11491, -9286, -17641, 10959, 2957, 4469, -18603, -24016, 30001, 9797, -18263, -26973, 17856, -9121, 7365, -4514, 8448, 22385, 3762, 29988, 26530, -7376, -16547, -13949, 1634, 15914, -31795, -11920, -22553, -21611, -7991, 27007, -18944, 30602, -30350, -19925, -19526, 3455, 22551, 22203, 28802, -26247, -10142, 24126, -23645, -1314, 30843, 10179, 23122, -18514, 19171, -9068, 4305, 18994, 5531, -9458, -983, 31802, -17727, 23588, -9462, 4182, 15403, -19608, -6133, 15106, 307, -19376, -18400, -27466, 1152, -9434, 8467, 5294, 13866, 13683, 17592, 2492, -5656, 15949, 14622, -19176, -7555, 770, -16893, -24482, 11490, 5995, 32013, 30576, -14040, -19128, -29677, 12895, -28856, 17818, -26174, -11016, 24756, 26947, -9236, -24771, 20238, 8032, -17148, 8131, -27923, -6005, 21500, 10838, -29235, -29831, -6547, 4939, 31416, 9744, -13160, -27747, -5995, 1134, 16409, 9680, -15428, -30855, 19318, -19339, 26045, -18861, 2721, -22680, 17312, -17180, 5627, 27387, 22649, 5446, -32299, 10527], "dtype": "int32"}], "outputs": [{"result": [206], "dtype": "uint32"}]}}
{"kernel_name": "argmin_bfloat16", "prompt": "/*\nThis AIE kernel calculates the argmin of a given bfloat16 vector, returning a single uint32 value for the minimum argument.\n>>> argmin_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875])\n5\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\nresult size: 1\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid argmin_bfloat16(bfloat16 *input_vector, uint32_t *result) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    uint32_t min_index = 0;\n    bfloat16 min_value = input_vector[0];\n    for (uint32_t i = 1; i < vector_size; i++) {\n        if (input_vector[i] < min_value) {\n            min_value = input_vector[i];\n            min_index = i;\n        }\n    }\n    *result = min_index;\n}", "program_code": "extern \"C\" {\n    void argmin_bfloat16_wrapper(bfloat16 *input_vector, uint32_t *result) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        argmin_bfloat16(input_vector, result);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625, 0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625, 0.671875, 0.408203125, -0.76953125, 0.5390625, -0.67578125, 0.03173828125, -0.63671875, 0.67578125, 0.578125, -0.2080078125, 0.396484375, -1.09375, -1.4921875, 0.439453125, 0.1669921875, 0.63671875, 2.390625, 0.9453125, -0.9140625, 1.1171875, -1.3125, -0.4609375, -0.068359375, 1.7109375, -0.74609375, -0.828125, -0.0986328125, -0.6640625, 1.125, -1.078125, -1.1484375, -0.4375, -0.498046875, 1.9296875, 0.94921875, 0.08740234375, -1.2265625, 0.84375, -1.0, -1.546875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.65234375, -1.03125, 0.6796875, -0.8046875, -0.69140625, -0.455078125, 0.0174560546875, -0.353515625, -1.375, -0.64453125, -2.21875, 0.625, -1.6015625, -1.1015625, 0.05224609375, -0.73828125, 1.546875, -1.2890625, 0.267578125, -0.039306640625, -1.171875, 0.5234375, -0.171875, 0.7734375, 0.82421875, 2.15625, 1.3359375, -0.369140625, -0.2392578125, 1.1015625, 0.65625, 0.640625, -1.6171875, -0.0242919921875, -0.73828125, 0.279296875, -0.09814453125, 0.91015625, 0.31640625, 0.78515625, -0.466796875, -0.9453125, -0.41015625, -0.0169677734375, 0.37890625, 2.265625, -0.042236328125, -0.95703125, -0.345703125, -0.462890625, 0.482421875, -1.5390625, 0.0634765625, 0.15625, 0.232421875, -0.59765625, -0.23828125, -1.421875, -0.494140625, -0.54296875, 0.416015625, -1.15625, 0.78125, 1.4921875, -2.0625, 0.42578125, 0.67578125, -0.63671875, -0.396484375, -0.1328125, -0.296875, -0.30859375, -1.6796875, 1.1484375, 1.078125, -0.8125, -1.46875, 0.51953125, -0.57421875, 0.1416015625, -0.318359375, 0.69140625, 0.6953125], "dtype": "bfloat16"}], "outputs": [{"result": 20, "dtype": "uint32"}]}}
{"kernel_name": "avgpool1d_bfloat16", "prompt": "/*\nA kernel that performs a 1D average pooling operation on an input vector with window_size and stride as runtime parameters.\n>>> avgpool1d_bfloat16([3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375], 2, 2)\n[2.171875, 3.21875, 0.890625, 0.796875]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 1024\nout_buffer size: 512\nwindow_size: 2\nstride: 2\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid avgpool1d_bfloat16(bfloat16 *in_buffer, bfloat16 *out_buffer, uint32_t window_size, uint32_t stride) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr uint32_t num_elements = 1024;\n    uint32_t num_windows = (num_elements - window_size) / stride + 1;\n\n    for (uint32_t i = 0; i < num_windows; i++) {\n        float sum = 0.0f;\n        for (uint32_t j = 0; j < window_size; j++) {\n            float current_val = (float)*(in_buffer + i * stride + j);\n            sum += current_val;\n        }\n        float avg = sum / window_size;\n        out_buffer[i] = (bfloat16)avg;\n    }\n}", "program_code": "extern \"C\" {\n    void avgpool1d_bfloat16_wrapper(bfloat16 *in_buffer, bfloat16 *out_buffer, uint32_t window_size, uint32_t stride) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        avgpool1d_bfloat16(in_buffer, out_buffer, window_size, stride);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375, -0.2060546875, 0.8203125, 0.2890625, 2.90625, 1.5234375, 0.2431640625, 0.88671875, 0.66796875, 2.984375, -0.41015625, 0.625, -1.7109375, -5.09375, 1.3046875, 1.7265625, -1.484375, 4.53125, -2.90625, 0.09130859375, -0.375, 3.0625, 2.9375, 0.310546875, 0.7578125, -1.7734375, -3.96875, -0.6953125, 0.3125, 2.453125, 2.40625, -0.7734375, -0.60546875, -2.09375, -2.84375, -3.40625, 3.90625, -1.015625, -0.875, -2.5, 1.5546875, -3.234375, -0.42578125, -1.7890625, 0.7734375, -1.0234375, -2.359375, -0.056396484375, 0.85546875, 0.1328125, 0.60546875, -1.265625, -0.7265625, -1.34375, -0.71875, -1.625, -3.453125, 0.35546875, -0.8046875, -3.265625, 0.92578125, -1.8125, 0.10400390625, 1.4609375, 0.2578125, 2.28125, -2.46875, 0.8046875, -1.3671875, -1.7421875, -1.15625, -0.625, 0.1123046875, -2.328125, 1.8046875, 0.9296875, -3.078125, 2.96875, 3.796875, 2.359375, -0.359375, -2.140625, 2.109375, -0.8046875, 2.4375, 0.416015625, 1.953125, 0.7109375, 1.4140625, 0.02099609375, 3.578125, 0.25390625, 0.8046875, 3.765625, -2.703125, -2.546875, 1.9375, -2.34375, 3.890625, -0.828125, -1.4921875, 3.84375, 2.96875, 3.734375, 1.8125, -1.71875, 3.8125, -0.53515625, 1.6015625, 1.890625, -0.310546875, 1.2265625, 1.84375, 0.75390625, -2.203125, 0.59765625, 2.65625, -1.390625, -0.298828125, -0.87109375, 3.703125, 1.34375, 0.81640625, -1.5390625, 1.078125, -1.3515625, 0.0634765625, -1.2734375, 1.3515625, 1.15625, -0.416015625, 0.79296875, -2.1875, -2.984375, 0.87890625, 0.333984375, 1.2734375, 4.78125, 1.890625, -1.828125, 2.234375, -2.625, -0.921875, -0.13671875, 3.421875, -1.4921875, -1.65625, -0.197265625, -1.328125, 2.25, -2.15625, -2.296875, -0.875, -0.99609375, 3.859375, 1.8984375, 0.1748046875, -2.453125, 1.6875, -2.0, -3.09375, 2.375, 0.6328125, 1.84375, 0.63671875, 1.7109375, -1.3046875, -2.0625, 1.359375, -1.609375, -1.3828125, -0.91015625, 0.034912109375, -0.70703125, -2.75, -1.2890625, -4.4375, 1.25, -3.203125, -2.203125, 0.1044921875, -1.4765625, 3.09375, -2.578125, 0.53515625, -0.07861328125, -2.34375, 1.046875, -0.34375, 1.546875, 1.6484375, 4.3125, 2.671875, -0.73828125, -0.478515625, 2.203125, 1.3125, 1.28125, -3.234375, -0.048583984375, -1.4765625, 0.55859375, -0.1962890625, 1.8203125, 0.6328125, 1.5703125, -0.93359375, -1.890625, -0.8203125, -0.033935546875, 0.7578125, 4.53125, -0.08447265625, -1.9140625, -0.69140625, -0.92578125, 0.96484375, -3.078125, 0.126953125, 0.3125, 0.46484375, -1.1953125, -0.4765625, -2.84375, -0.98828125, -1.0859375, 0.83203125, -2.3125, 1.5625, 2.984375, -4.125, 0.8515625, 1.3515625, -1.2734375, -0.79296875, -0.265625, -0.59375, -0.6171875, -3.359375, 2.296875, 2.15625, -1.625, -2.9375, 1.0390625, -1.1484375, 0.283203125, -0.63671875, 1.3828125, 1.390625, -1.453125, -2.765625, -3.171875, 1.21875, -2.375, -1.015625, -1.1953125, -0.10498046875, -3.875, 0.376953125, 1.046875, 0.1767578125, -0.62109375, 0.1943359375, 0.796875, -5.53125, 3.90625, 0.78125, -1.3046875, -0.78125, 0.98828125, -0.232421875, -4.0625, 4.125, -0.220703125, 2.046875, -1.3828125, 3.078125, 0.57421875, 1.21875, -2.09375, 2.421875, 1.3828125, 2.609375, -1.2578125, -0.9609375, 4.59375, -2.125, -0.271484375, 2.28125, 0.1953125, 1.1640625, -0.80078125, 0.73828125, -2.609375, 3.3125, -0.236328125, -1.359375, 1.3359375, -0.921875, -2.671875, -2.6875, 1.390625, -0.318359375, -0.267578125, 2.15625, -2.25, -1.4609375, -0.76953125, 0.1884765625, -0.08447265625, -0.57421875, -0.123046875, -0.21484375, -1.4375, -1.625, 0.55078125, -1.78125, -2.3125, -0.625, -0.314453125, 4.5, -1.40625, 1.8828125, 1.4921875, -2.375, 1.546875, -2.375, -5.3125, 1.2109375, -3.515625, 0.90234375, -1.3671875, 3.3125, 2.140625, -0.90625, -1.375, -2.421875, -0.8828125, -0.5625, -0.73046875, 0.3125, 1.15625, 0.69921875, -1.53125, -2.875, 2.734375, -1.375, -1.3046875, -1.0390625, -3.6875, -0.95703125, -0.9609375, 1.2421875, 1.3984375, 0.007537841796875, 1.8671875, 0.6796875, -0.03125, 0.322265625, -0.380859375, -0.7890625, -0.53515625, -2.25, 0.5625, -1.984375, 1.6796875, -0.498046875, 0.09912109375, 0.98828125, 1.2890625, -3.140625, -0.4140625, 1.7578125, -3.390625, 0.7734375, -4.5, -2.046875, 0.0771484375, -3.3125, -1.96875, -2.9375, 3.296875, 0.328125, 1.1328125, -0.4453125, -0.70703125, -3.234375, -0.58203125, -1.5234375, 1.71875, 2.28125, 2.9375, 1.703125, -1.1953125, -2.234375, 1.53125, 0.7109375, -3.53125, 0.7109375, 1.6328125, 0.11767578125, -0.369140625, -1.6171875, -2.890625, 1.6015625, -0.6171875, -0.466796875, 3.46875, 1.3671875, 0.7421875, 0.283203125, 3.046875, 3.4375, 1.859375, 1.1640625, -4.1875, 0.2470703125, -0.259765625, 0.1875, 1.8828125, -5.46875, -1.140625, 0.5390625, -0.93359375, -2.828125, 1.734375, 0.5546875, -1.9453125, 0.62890625, 1.640625, 0.01055908203125, 1.6015625, 0.15625, -0.7890625, -2.3125, -0.171875, 0.388671875, 1.75, -0.23046875, 0.9140625, -1.9296875, -1.5625, -0.220703125, -2.109375, 1.640625, 0.92578125, 0.55859375, 0.6796875, 4.03125, -0.9375, -4.40625, 0.3984375, -0.10107421875, -1.03125, -1.9609375, -0.87890625, 0.36328125, -1.0078125, 4.8125, -1.921875, -1.5859375, -4.5625, 0.50390625, -4.03125, -1.078125, -0.55078125, -1.421875, 3.484375, 1.9921875, 2.640625, -1.765625, 2.25, 0.9921875, 1.5390625, 2.0625, -1.8203125, -0.84765625, 1.7265625, -5.3125, 3.03125, 1.109375, -0.09130859375, 0.44140625, -2.0625, -0.69921875, 2.203125, 2.59375, 5.40625, -0.1474609375, -1.3203125, -1.03125, -2.03125, -0.1552734375, 0.765625, -0.068359375, 2.1875, -0.46875, -0.6953125, -1.1640625, -3.265625, -3.140625, -2.359375, 2.609375, 1.7890625, 2.75, -2.671875, -3.9375, -1.3203125, 0.3515625, 0.99609375, 2.09375, 0.5703125, 3.484375, -0.4453125, -1.828125, -3.359375, -1.78125, 0.484375, -1.78125, 1.875, 2.828125, -4.75, 1.7265625, -4.46875, 0.8046875, 2.453125, 0.1298828125, -2.5625, -1.171875, -0.5234375, -0.365234375, -0.40625, -0.2197265625, 0.427734375, -2.421875, -0.484375, 3.03125, -0.76953125, -0.88671875, 2.15625, -5.125, 2.359375, -1.265625, 0.328125, 0.1923828125, 1.8828125, -0.53515625, -1.359375, 2.59375, -4.71875, 0.040771484375, -2.703125, -1.5234375, 4.03125, -0.08935546875, 0.390625, -3.5625, -1.4609375, 0.392578125, 0.7109375, 1.234375, 0.0172119140625, 1.0546875, 0.90625, -3.65625, 0.07421875, 1.5390625, 1.1796875, -0.7265625, -1.609375, -2.234375, -0.26171875, 2.265625, -3.90625, -1.3203125, -2.28125, 1.5703125, -1.109375, -0.94140625, -0.43359375, 0.890625, -0.78515625, -6.09375, 1.0859375, 0.87890625, -0.439453125, -2.171875, 0.703125, 0.7578125, -0.94140625, -0.43359375, -1.859375, -0.357421875, -3.09375, 0.8359375, -1.890625, 0.4765625, -2.8125, -1.1796875, -0.220703125, -3.328125, 0.23046875, -0.7578125, -3.484375, -2.609375, 1.2109375, 1.7890625, -0.263671875, 0.80859375, 0.447265625, 0.66015625, 2.578125, -3.015625, 1.3515625, -0.765625, -0.44921875, -0.60546875, -0.75, -2.453125, 0.3671875, 3.34375, -0.1123046875, -0.002777099609375, -1.375, -0.2353515625, 0.93359375, -0.7421875, -0.90625, 0.8046875, -1.8359375, 0.50390625, 1.640625, 2.71875, -0.1806640625, 2.734375, 2.0625, -1.9921875, -2.4375, -0.609375, 2.0625, -0.14453125, -1.203125, 3.109375, 0.57421875, -4.65625, 0.6328125, 1.0390625, 0.451171875, 0.8984375, -0.134765625, -2.640625, -0.7421875, -1.890625, -1.8671875, -2.53125, 0.90625, 0.1953125, -0.89453125, -1.296875, -0.046875, 2.15625, -4.0, 0.75390625, -1.09375, -3.765625, -3.890625, -1.828125, 0.439453125, 0.78515625, -1.875, 2.03125, 2.84375, 0.79296875, -1.1796875, 2.25, 1.5078125, 1.734375, -1.3125, -5.65625, 4.21875, -3.21875, -0.07177734375, 4.75, 0.66015625, 1.8984375, -3.0, -3.5625, -1.0625, 2.1875, -0.69140625, -1.5859375, 0.396484375, 2.15625, -2.890625, -2.421875, -1.578125, 2.1875, 0.46875, 4.25, 1.875, -0.0703125, 2.53125, 0.423828125, -1.40625, 1.359375, -1.390625, -0.58203125, 2.65625, -0.2021484375, -1.609375, -0.9296875, 2.046875, -1.1015625, -0.7734375, -1.0234375, 0.3671875, -0.76953125, -3.203125, -1.7734375, -1.8671875, 2.484375, 1.625, 1.171875, -1.0078125, -1.6328125, -1.015625, -2.109375, 5.0, -4.5, 1.125, -2.5625, -0.208984375, -1.9765625, -2.359375, -2.28125, 3.515625, -0.265625, -1.53125, 1.109375, 0.020751953125, 1.4375, -3.65625, 0.60546875, 1.546875, -3.328125, 0.89453125, 3.390625, -0.0296630859375, 1.640625, 1.34375, -1.4140625, 0.07958984375, -3.140625, -0.90234375, 0.53125, 1.4453125, 0.04931640625, 1.4375, -2.203125, -0.203125, 0.03857421875, 3.703125, -0.427734375, -0.99609375, 0.042724609375, -1.8359375, 0.384765625, -0.73046875, -3.578125, -0.1171875, -0.63671875, -3.265625, -0.1337890625, 2.984375, 1.0390625, 1.2265625, -2.6875, 0.953125, 0.296875, 1.0546875, 0.84375, -2.71875, -0.0830078125, -1.515625, -0.10009765625, -1.796875, 2.625, -1.71875, -1.796875, 0.1494140625, -2.15625, -0.84765625, -1.65625, 2.828125, 1.5703125, -0.11474609375, -0.78125, 1.8828125, 0.80859375, 0.99609375, -0.052490234375, -3.375, -0.224609375, -1.0625, 1.2890625, 2.03125, -1.3125, 0.9375, 3.46875, -1.3359375, 3.359375, -1.703125, 0.0458984375, -0.0223388671875, 0.02294921875, -1.671875, -1.1796875, -1.3359375, 0.65234375, 0.66015625, 4.4375, 2.734375, -1.0234375, 0.6484375, 1.9921875, 0.061279296875, -0.1396484375, 0.10302734375, 1.734375, -1.6953125, -0.65234375, 0.94140625, 0.62109375, 0.478515625, -0.73828125, 1.9453125, 4.28125, 0.8125, -0.38671875, 1.5078125, -1.078125, -1.5, 0.0654296875, -5.15625, -2.3125, -0.6953125, -2.703125, -2.0625, -0.875, -3.28125, -0.8125, -1.0703125, 0.05078125, 2.3125, 0.345703125, 0.042236328125, 0.19921875, 0.455078125, -2.03125, -0.2294921875, 0.6171875, -2.734375, 1.734375, 2.15625, -1.265625, -0.482421875, -1.7578125, 1.3984375, -2.125, -0.4453125, -1.71875, 0.10205078125, -3.59375, 2.65625, -1.9296875, 0.11962890625, -0.42578125, -1.5234375, -1.7734375, 1.875, -1.0546875, 0.54296875, -1.6015625, -1.296875, 0.9453125, 1.859375, -0.3515625, -2.84375, 4.0, -1.7109375, -3.078125, 5.1875, -0.80859375, -2.921875, -1.3671875, 0.734375, 0.380859375, -1.703125, 3.640625, -1.046875, -2.375, 1.921875, 2.65625, -1.6328125, -2.796875, 2.0625, -4.09375, -2.453125, 1.9375, -0.11083984375, -0.52734375, 0.70703125, -0.3046875, -2.59375, 2.546875, 2.65625, 0.41015625, 0.09033203125, 4.6875, -0.5546875, -0.51953125, 0.73046875, 2.9375, 3.1875, -0.515625, 0.6171875, -2.75, -0.625, -1.6796875, -2.015625, 3.359375, -1.5859375, -1.0625, 0.73046875, 2.59375, 0.9609375, 5.53125, -0.1494140625, 0.515625, 0.55078125, 2.875, 1.015625, -0.232421875, -1.8984375, 0.48828125, 2.796875, -0.8203125, 1.0546875, 0.4921875, 1.7265625, -1.609375, 4.6875, -2.5625, -0.73046875, 1.875, 0.59375, 1.65625, -0.9921875, -0.1494140625, 0.0244140625, 3.140625, 1.3828125, 1.59375, -1.3125, 1.9375, 0.451171875, 2.78125, 4.03125, -0.61328125, -0.8125, -1.7265625, -0.287109375, -0.765625, 0.71875, -0.2890625, -0.72265625, 2.125, -1.875, 0.8671875, -0.8125, 1.4453125, 2.765625, -0.60546875, 0.8828125, 0.357421875, -1.6015625, 0.482421875, 0.578125, 0.82421875, -0.396484375, 0.1884765625, -2.296875, -0.71484375, 1.109375, 1.78125, -0.84375, 0.208984375, 0.45703125, 0.40234375, 1.078125, -3.640625, -0.0986328125, 0.478515625, -2.0, 3.34375, 0.322265625, 3.125, -1.578125, -1.8125, 0.44921875, -3.359375, 0.4296875, 0.1943359375, 2.03125, 1.3984375, -0.8359375, -2.1875], "dtype": "bfloat16"}], "outputs": [{"out_buffer": [2.171875, 3.21875, 0.890625, 0.796875, 0.306640625, 1.59375, 0.8828125, 0.77734375, 1.2890625, -0.54296875, -1.890625, 0.12109375, 0.8125, -0.1416015625, 3.0, 0.53515625, -2.875, -0.19140625, 2.4375, -0.6875, -2.46875, 0.25, -0.9453125, -0.47265625, -1.828125, -0.5078125, -1.6875, 0.400390625, 0.369140625, -0.99609375, -1.03125, -2.53125, -0.224609375, -1.171875, -0.85546875, 0.859375, -0.09375, -0.28125, -1.453125, -0.255859375, -0.26171875, -1.078125, 3.375, 1.0, -0.015625, 0.81640625, 1.1875, 1.0625, 1.796875, 0.53125, 0.53125, -0.3046875, 0.7734375, -1.15625, 3.40625, 2.78125, 1.046875, 0.53125, 0.7890625, 1.53125, -0.7265625, 1.625, -0.84375, 1.4140625, 1.078125, -0.23046875, -0.64453125, 0.0390625, 0.37109375, -0.6953125, -1.0546875, 0.8046875, 3.34375, 0.203125, -1.7734375, 1.640625, -1.578125, -0.76171875, 0.046875, -1.5859375, 1.4296875, 1.0390625, -0.3828125, -2.546875, 1.5, 1.2421875, 0.203125, -0.3515625, -1.5, -0.4375, -1.7265625, -2.859375, -0.9765625, -1.046875, 0.80859375, -1.0234375, -1.2109375, 0.3515625, 1.59375, 3.5, -0.609375, 1.7578125, -0.9765625, -0.76171875, 0.181640625, 1.2265625, 0.318359375, -1.359375, 0.361328125, 2.21875, -1.3046875, 0.01953125, -1.4765625, 0.388671875, -0.8359375, -1.9140625, -0.126953125, -0.375, -0.5703125, 1.1015625, -1.03125, -0.4296875, -1.984375, 2.21875, -2.28125, -0.0546875, -0.1767578125, 1.390625, -2.109375, -0.9765625, -1.6953125, -0.6484375, -1.75, 0.61328125, -0.212890625, -2.375, 2.34375, -1.046875, 0.37890625, 0.03125, 0.9140625, 0.84765625, 0.8984375, 0.1640625, 2.0, -1.109375, 1.234375, 1.0078125, 0.6796875, -0.03125, 0.3515625, -0.796875, 0.20703125, -2.6875, 0.53515625, 0.9453125, -1.859375, -0.291015625, -0.330078125, -0.1689453125, -1.53125, -0.6171875, -1.46875, 2.09375, 0.23828125, -0.44140625, -0.4140625, -2.046875, -1.3046875, 0.97265625, 0.6171875, -1.8984375, -0.72265625, -0.208984375, 0.9296875, -2.203125, 0.6796875, -1.171875, -2.328125, 0.140625, 0.703125, 1.2734375, 0.1455078125, -0.5859375, -1.390625, -0.7109375, 0.58984375, 0.54296875, -0.92578125, 0.671875, -1.3125, -3.28125, -1.6171875, -2.453125, 1.8125, 0.34375, -1.96875, -1.0546875, 2.0, 2.3125, -1.71875, 1.125, -1.40625, 0.875, -0.9921875, -0.64453125, -0.54296875, 2.421875, 0.51171875, 3.25, 1.515625, -1.96875, -0.0361328125, -1.796875, -0.30078125, -1.8828125, 1.140625, -0.65625, 0.82421875, 0.87890625, -1.546875, 0.1083984375, 0.7578125, -0.5078125, -0.890625, -0.234375, 0.7421875, 2.359375, -2.671875, 0.1484375, -1.5, -0.2578125, 1.90625, -1.75, -2.03125, -2.5625, -0.984375, 2.734375, 0.4375, 1.625, 1.796875, -1.3359375, -1.796875, 2.0625, 0.1748046875, -1.3828125, 2.40625, 2.625, -1.171875, -1.09375, 0.34765625, 0.859375, -0.9296875, -3.203125, 0.125, 2.265625, -3.3125, -0.484375, 1.546875, 2.03125, -1.140625, -2.5625, -0.6484375, 2.34375, -1.515625, -1.828125, 1.2890625, -1.8671875, -0.4453125, -0.3125, -0.99609375, 1.2734375, -0.828125, -1.484375, 0.546875, 0.259765625, 0.671875, 0.6171875, -2.34375, -2.109375, 1.96875, -1.5859375, -0.53515625, 0.97265625, 0.53515625, -1.375, 0.8046875, 0.2265625, -1.921875, 1.0, -2.609375, -0.35546875, -1.0234375, 0.228515625, -3.4375, 0.984375, -1.3046875, 0.73046875, -0.6875, -1.109375, -1.125, -0.70703125, -2.0, -1.7734375, -0.263671875, -3.046875, 1.5, 0.2734375, 0.5546875, -0.21875, 0.29296875, -0.52734375, -1.6015625, 1.859375, -0.0576171875, -0.8046875, 0.095703125, -0.05078125, -0.6640625, 2.1875, 1.2734375, 0.03515625, -1.5234375, 0.9609375, 0.953125, -2.046875, 0.8359375, 0.67578125, -1.390625, -1.3125, -2.203125, 0.55078125, -1.09375, 1.0546875, -1.625, -2.4375, -2.859375, 0.61328125, 0.078125, 1.8203125, 0.53515625, 1.625, -3.484375, 0.5, 2.34375, 1.28125, -3.28125, 0.5625, -1.140625, 1.2734375, -2.65625, 0.3046875, 2.359375, 0.90234375, 1.4765625, -0.0234375, -0.984375, 1.2265625, -1.265625, 0.47265625, -0.8984375, -0.201171875, -2.484375, 0.30859375, 1.3984375, -1.3203125, -1.5625, 0.25, -0.71875, -1.09375, -2.3125, 1.625, -0.2109375, 0.73046875, -1.5234375, -0.890625, 2.140625, 0.8046875, -0.03515625, -1.53125, -0.185546875, 0.74609375, -0.3828125, -0.08203125, 1.640625, -0.4765625, -0.7265625, -2.15625, -0.376953125, -1.703125, 2.015625, -0.73046875, 0.625, 0.94921875, -1.3984375, -0.80859375, 0.4140625, -1.7578125, -1.0, -1.25, 2.203125, -0.447265625, 1.34375, 0.47265625, -1.796875, 0.11328125, 0.359375, 2.203125, 1.015625, -0.828125, 0.00030517578125, -1.421875, -0.341796875, 2.546875, 0.85546875, 1.3203125, -0.0390625, 0.91796875, -1.171875, 0.78125, -0.1298828125, 3.109375, 0.212890625, 0.21484375, -0.71875, -3.734375, -1.703125, -1.46875, -2.046875, -0.5078125, 1.328125, 0.12060546875, -0.7890625, 0.193359375, -0.5, 0.4453125, -1.1171875, -0.36328125, -1.078125, -1.7421875, 0.36328125, -0.1533203125, -1.6484375, 0.41015625, -0.53125, -0.17578125, 0.75390625, 0.578125, -2.390625, 2.1875, -2.140625, 0.55859375, 0.96875, -1.7109375, 2.28125, -2.21875, -1.015625, -0.2578125, -0.318359375, 0.201171875, -0.0234375, 1.53125, 2.390625, -0.5390625, 1.8359375, 1.3359375, -1.0625, -1.15625, 0.671875, -1.328125, 1.6640625, 3.25, 0.18359375, 1.7109375, 0.390625, -0.703125, 0.98828125, 0.7734375, 0.05859375, 1.0625, 0.5703125, 1.125, -0.5703125, 1.5859375, 1.484375, 0.3125, 1.6171875, 1.7109375, -1.265625, -0.52734375, 0.21484375, 0.703125, -0.50390625, 0.31640625, 1.078125, 0.62109375, -0.55859375, 0.703125, -0.10400390625, -1.5078125, 1.4453125, -0.31640625, 0.4296875, -1.28125, 0.189453125, 0.671875, 1.7265625, -1.6953125, -1.453125, 0.3125, 1.71875, -1.515625], "dtype": "bfloat16"}], "rtps": [{"window_size": 2, "dtype": "uint32"}, {"stride": 2, "dtype": "uint32"}]}}
{"kernel_name": "avgpool1d_relu_bfloat16", "prompt": "/*\nA kernel that performs 1D average pooling with a 4-element window and stride of 4 on a 256-element bfloat16 vector, followed by elementwise ReLU activation, writing the results to a 64-element bfloat16 output buffer.\n>>> avgpool1d_relu_bfloat16([5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125])\n[4.03125, 1.265625]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 256\nout_buffer size: 64\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid avgpool1d_relu_bfloat16(bfloat16 *in_buffer, bfloat16 *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    constexpr int32_t window_size = 4;\n    constexpr int32_t stride = 4;\n\n    for (uint32_t i = 0; i < vector_size / stride; i++) {\n        float sum = 0.0f;\n        for (uint32_t j = 0; j < window_size; j++) {\n            float val = (float)in_buffer[i * stride + j];\n            sum += val;\n        }\n        float avg = sum / window_size;\n        if (avg < 0.0f)\n            avg = 0.0f;\n\n        out_buffer[i] = (bfloat16)avg;\n    }\n}", "program_code": "extern \"C\" {\n    void avgpool1d_relu_bfloat16_wrapper(bfloat16 *in_buffer, bfloat16 *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        avgpool1d_relu_bfloat16(in_buffer, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125, -0.310546875, 1.234375, 0.431640625, 4.375, 2.28125, 0.365234375, 1.328125, 1.0, 4.46875, -0.6171875, 0.9375, -2.5625, -7.65625, 1.9609375, 2.59375, -2.21875, 6.8125, -4.375, 0.1376953125, -0.5625, 4.59375, 4.40625, 0.46484375, 1.1328125, -2.65625, -5.9375, -1.046875, 0.46875, 3.6875, 3.609375, -1.1640625, -0.90625, -3.140625, -4.25, -5.125, 5.84375, -1.53125, -1.3125, -3.765625, 2.328125, -4.84375, -0.63671875, -2.6875, 1.1640625, -1.53125, -3.546875, -0.08447265625, 1.28125, 0.19921875, 0.90625, -1.90625, -1.0859375, -2.015625, -1.078125, -2.4375, -5.1875, 0.53125, -1.203125, -4.875, 1.390625, -2.71875, 0.15625, 2.1875, 0.38671875, 3.421875, -3.703125, 1.203125, -2.046875, -2.609375, -1.734375, -0.93359375, 0.1689453125, -3.5, 2.703125, 1.3984375, -4.59375, 4.46875, 5.6875, 3.53125, -0.5390625, -3.21875, 3.15625, -1.2109375, 3.671875, 0.625, 2.9375, 1.0703125, 2.125, 0.031494140625, 5.34375, 0.380859375, 1.203125, 5.65625, -4.03125, -3.8125, 2.90625, -3.515625, 5.84375, -1.2421875, -2.25, 5.78125, 4.4375, 5.59375, 2.71875, -2.578125, 5.71875, -0.8046875, 2.40625, 2.84375, -0.46484375, 1.84375, 2.765625, 1.1328125, -3.296875, 0.89453125, 3.984375, -2.078125, -0.44921875, -1.3046875, 5.5625, 2.015625, 1.21875, -2.3125, 1.6171875, -2.015625, 0.095703125, -1.90625, 2.03125, 1.7265625, -0.625, 1.1875, -3.28125, -4.46875, 1.3203125, 0.5, 1.90625, 7.15625, 2.828125, -2.734375, 3.34375, -3.953125, -1.3828125, -0.205078125, 5.125, -2.234375, -2.484375, -0.294921875, -1.9921875, 3.375, -3.234375, -3.4375, -1.3125, -1.4921875, 5.78125, 2.84375, 0.26171875, -3.671875, 2.53125, -3.0, -4.625, 3.5625, 0.94921875, 2.765625, 0.95703125, 2.578125, -1.953125, -3.109375, 2.046875, -2.40625, -2.0625, -1.3671875, 0.052490234375, -1.0625, -4.125, -1.9296875, -6.65625, 1.875, -4.8125, -3.3125, 0.15625, -2.21875, 4.625, -3.875, 0.80078125, -0.11767578125, -3.5, 1.5703125, -0.515625, 2.3125, 2.46875, 6.5, 4.0, -1.109375, -0.71875, 3.296875, 1.96875, 1.921875, -4.84375, -0.07275390625, -2.21875, 0.83984375, -0.294921875, 2.734375, 0.953125, 2.359375, -1.3984375, -2.828125, -1.2265625, -0.051025390625, 1.140625, 6.78125, -0.126953125, -2.875, -1.0390625, -1.390625, 1.4453125, -4.625, 0.189453125, 0.46875, 0.6953125, -1.7890625, -0.71484375, -4.28125, -1.4765625, -1.625, 1.25, -3.46875, 2.34375, 4.46875, -6.21875, 1.28125, 2.03125, -1.9140625, -1.1953125, -0.3984375, -0.89453125, -0.92578125, -5.03125, 3.453125, 3.234375, -2.4375, -4.40625, 1.5625, -1.7265625, 0.42578125, -0.95703125, 2.078125, 2.078125], "dtype": "bfloat16"}], "outputs": [{"out_buffer": [4.03125, 1.265625, 1.4296875, 1.2421875, 0.5546875, 0.0, 0.50390625, 2.65625, 0.0, 1.3046875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0029296875, 0.0, 0.0, 0.0, 3.28125, 0.6015625, 1.6875, 1.7421875, 0.1796875, 0.0, 4.625, 1.1875, 1.75, 0.6796875, 0.43359375, 0.6328125, 0.0, 0.0, 0.0, 2.65625, 0.0, 0.0, 0.0, 1.8515625, 0.0, 2.0625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.8125, 0.859375, 0.0, 1.0546875, 0.0, 1.9375, 0.0, 0.0, 0.0, 0.0, 0.390625, 0.0, 0.1826171875, 0.0, 0.90625], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "avgpool2d_bfloat16", "prompt": "/*\nA kernel that performs a two dimension average pooling on an input matrix (32x32), buffer_in, with a 2x2 kernel and stride of two. The output is written to buffer_out.\n>>> avgpool2d_bfloat16([[3.53125, 0.80078125, 1.9609375, 4.46875], [-1.7734375, -3.96875, -0.6953125, 0.3125], [0.35546875, -0.8046875, -3.265625, 0.92578125], [0.02099609375, 3.578125, 0.25390625, 0.8046875]])\n[[-0.3515625, 1.515625], [0.7890625, -0.322265625]]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 1024\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid avgpool2d_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t ROWS = 32;\n    constexpr int32_t COLS = 32;\n    constexpr int32_t WINDOW_SIZE = 2;\n    constexpr int32_t STRIDE = 2;\n    constexpr int32_t WINDOW_AREA = WINDOW_SIZE * WINDOW_SIZE;\n\n    for (int i = 0; i < ROWS; i += STRIDE) {\n        for (int j = 0; j < COLS; j += STRIDE) {\n            float sum = 0.0f;\n            for (int wi = 0; wi < WINDOW_SIZE; wi++) {\n                for (int wj = 0; wj < WINDOW_SIZE; wj++) {\n                    float current_val = (float)input[(i + wi) * COLS + (j + wj)];\n                    sum += current_val;\n                }\n            }\n            float avg = sum / WINDOW_AREA;\n            output[(i/STRIDE) * (COLS/STRIDE) + (j/STRIDE)] = (bfloat16)avg;\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void avgpool2d_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        avgpool2d_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [[3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375, -0.2060546875, 0.8203125, 0.2890625, 2.90625, 1.5234375, 0.2431640625, 0.88671875, 0.66796875, 2.984375, -0.41015625, 0.625, -1.7109375, -5.09375, 1.3046875, 1.7265625, -1.484375, 4.53125, -2.90625, 0.09130859375, -0.375, 3.0625, 2.9375, 0.310546875, 0.7578125], [-1.7734375, -3.96875, -0.6953125, 0.3125, 2.453125, 2.40625, -0.7734375, -0.60546875, -2.09375, -2.84375, -3.40625, 3.90625, -1.015625, -0.875, -2.5, 1.5546875, -3.234375, -0.42578125, -1.7890625, 0.7734375, -1.0234375, -2.359375, -0.056396484375, 0.85546875, 0.1328125, 0.60546875, -1.265625, -0.7265625, -1.34375, -0.71875, -1.625, -3.453125], [0.35546875, -0.8046875, -3.265625, 0.92578125, -1.8125, 0.10400390625, 1.4609375, 0.2578125, 2.28125, -2.46875, 0.8046875, -1.3671875, -1.7421875, -1.15625, -0.625, 0.1123046875, -2.328125, 1.8046875, 0.9296875, -3.078125, 2.96875, 3.796875, 2.359375, -0.359375, -2.140625, 2.109375, -0.8046875, 2.4375, 0.416015625, 1.953125, 0.7109375, 1.4140625], [0.02099609375, 3.578125, 0.25390625, 0.8046875, 3.765625, -2.703125, -2.546875, 1.9375, -2.34375, 3.890625, -0.828125, -1.4921875, 3.84375, 2.96875, 3.734375, 1.8125, -1.71875, 3.8125, -0.53515625, 1.6015625, 1.890625, -0.310546875, 1.2265625, 1.84375, 0.75390625, -2.203125, 0.59765625, 2.65625, -1.390625, -0.298828125, -0.87109375, 3.703125], [1.34375, 0.81640625, -1.5390625, 1.078125, -1.3515625, 0.0634765625, -1.2734375, 1.3515625, 1.15625, -0.416015625, 0.79296875, -2.1875, -2.984375, 0.87890625, 0.333984375, 1.2734375, 4.78125, 1.890625, -1.828125, 2.234375, -2.625, -0.921875, -0.13671875, 3.421875, -1.4921875, -1.65625, -0.197265625, -1.328125, 2.25, -2.15625, -2.296875, -0.875], [-0.99609375, 3.859375, 1.8984375, 0.1748046875, -2.453125, 1.6875, -2.0, -3.09375, 2.375, 0.6328125, 1.84375, 0.63671875, 1.7109375, -1.3046875, -2.0625, 1.359375, -1.609375, -1.3828125, -0.91015625, 0.034912109375, -0.70703125, -2.75, -1.2890625, -4.4375, 1.25, -3.203125, -2.203125, 0.1044921875, -1.4765625, 3.09375, -2.578125, 0.53515625], [-0.07861328125, -2.34375, 1.046875, -0.34375, 1.546875, 1.6484375, 4.3125, 2.671875, -0.73828125, -0.478515625, 2.203125, 1.3125, 1.28125, -3.234375, -0.048583984375, -1.4765625, 0.55859375, -0.1962890625, 1.8203125, 0.6328125, 1.5703125, -0.93359375, -1.890625, -0.8203125, -0.033935546875, 0.7578125, 4.53125, -0.08447265625, -1.9140625, -0.69140625, -0.92578125, 0.96484375], [-3.078125, 0.126953125, 0.3125, 0.46484375, -1.1953125, -0.4765625, -2.84375, -0.98828125, -1.0859375, 0.83203125, -2.3125, 1.5625, 2.984375, -4.125, 0.8515625, 1.3515625, -1.2734375, -0.79296875, -0.265625, -0.59375, -0.6171875, -3.359375, 2.296875, 2.15625, -1.625, -2.9375, 1.0390625, -1.1484375, 0.283203125, -0.63671875, 1.3828125, 1.390625], [-1.453125, -2.765625, -3.171875, 1.21875, -2.375, -1.015625, -1.1953125, -0.10498046875, -3.875, 0.376953125, 1.046875, 0.1767578125, -0.62109375, 0.1943359375, 0.796875, -5.53125, 3.90625, 0.78125, -1.3046875, -0.78125, 0.98828125, -0.232421875, -4.0625, 4.125, -0.220703125, 2.046875, -1.3828125, 3.078125, 0.57421875, 1.21875, -2.09375, 2.421875], [1.3828125, 2.609375, -1.2578125, -0.9609375, 4.59375, -2.125, -0.271484375, 2.28125, 0.1953125, 1.1640625, -0.80078125, 0.73828125, -2.609375, 3.3125, -0.236328125, -1.359375, 1.3359375, -0.921875, -2.671875, -2.6875, 1.390625, -0.318359375, -0.267578125, 2.15625, -2.25, -1.4609375, -0.76953125, 0.1884765625, -0.08447265625, -0.57421875, -0.123046875, -0.21484375], [-1.4375, -1.625, 0.55078125, -1.78125, -2.3125, -0.625, -0.314453125, 4.5, -1.40625, 1.8828125, 1.4921875, -2.375, 1.546875, -2.375, -5.3125, 1.2109375, -3.515625, 0.90234375, -1.3671875, 3.3125, 2.140625, -0.90625, -1.375, -2.421875, -0.8828125, -0.5625, -0.73046875, 0.3125, 1.15625, 0.69921875, -1.53125, -2.875], [2.734375, -1.375, -1.3046875, -1.0390625, -3.6875, -0.95703125, -0.9609375, 1.2421875, 1.3984375, 0.007537841796875, 1.8671875, 0.6796875, -0.03125, 0.322265625, -0.380859375, -0.7890625, -0.53515625, -2.25, 0.5625, -1.984375, 1.6796875, -0.498046875, 0.09912109375, 0.98828125, 1.2890625, -3.140625, -0.4140625, 1.7578125, -3.390625, 0.7734375, -4.5, -2.046875], [0.0771484375, -3.3125, -1.96875, -2.9375, 3.296875, 0.328125, 1.1328125, -0.4453125, -0.70703125, -3.234375, -0.58203125, -1.5234375, 1.71875, 2.28125, 2.9375, 1.703125, -1.1953125, -2.234375, 1.53125, 0.7109375, -3.53125, 0.7109375, 1.6328125, 0.11767578125, -0.369140625, -1.6171875, -2.890625, 1.6015625, -0.6171875, -0.466796875, 3.46875, 1.3671875], [0.7421875, 0.283203125, 3.046875, 3.4375, 1.859375, 1.1640625, -4.1875, 0.2470703125, -0.259765625, 0.1875, 1.8828125, -5.46875, -1.140625, 0.5390625, -0.93359375, -2.828125, 1.734375, 0.5546875, -1.9453125, 0.62890625, 1.640625, 0.01055908203125, 1.6015625, 0.15625, -0.7890625, -2.3125, -0.171875, 0.388671875, 1.75, -0.23046875, 0.9140625, -1.9296875], [-1.5625, -0.220703125, -2.109375, 1.640625, 0.92578125, 0.55859375, 0.6796875, 4.03125, -0.9375, -4.40625, 0.3984375, -0.10107421875, -1.03125, -1.9609375, -0.87890625, 0.36328125, -1.0078125, 4.8125, -1.921875, -1.5859375, -4.5625, 0.50390625, -4.03125, -1.078125, -0.55078125, -1.421875, 3.484375, 1.9921875, 2.640625, -1.765625, 2.25, 0.9921875], [1.5390625, 2.0625, -1.8203125, -0.84765625, 1.7265625, -5.3125, 3.03125, 1.109375, -0.09130859375, 0.44140625, -2.0625, -0.69921875, 2.203125, 2.59375, 5.40625, -0.1474609375, -1.3203125, -1.03125, -2.03125, -0.1552734375, 0.765625, -0.068359375, 2.1875, -0.46875, -0.6953125, -1.1640625, -3.265625, -3.140625, -2.359375, 2.609375, 1.7890625, 2.75], [-2.671875, -3.9375, -1.3203125, 0.3515625, 0.99609375, 2.09375, 0.5703125, 3.484375, -0.4453125, -1.828125, -3.359375, -1.78125, 0.484375, -1.78125, 1.875, 2.828125, -4.75, 1.7265625, -4.46875, 0.8046875, 2.453125, 0.1298828125, -2.5625, -1.171875, -0.5234375, -0.365234375, -0.40625, -0.2197265625, 0.427734375, -2.421875, -0.484375, 3.03125], [-0.76953125, -0.88671875, 2.15625, -5.125, 2.359375, -1.265625, 0.328125, 0.1923828125, 1.8828125, -0.53515625, -1.359375, 2.59375, -4.71875, 0.040771484375, -2.703125, -1.5234375, 4.03125, -0.08935546875, 0.390625, -3.5625, -1.4609375, 0.392578125, 0.7109375, 1.234375, 0.0172119140625, 1.0546875, 0.90625, -3.65625, 0.07421875, 1.5390625, 1.1796875, -0.7265625], [-1.609375, -2.234375, -0.26171875, 2.265625, -3.90625, -1.3203125, -2.28125, 1.5703125, -1.109375, -0.94140625, -0.43359375, 0.890625, -0.78515625, -6.09375, 1.0859375, 0.87890625, -0.439453125, -2.171875, 0.703125, 0.7578125, -0.94140625, -0.43359375, -1.859375, -0.357421875, -3.09375, 0.8359375, -1.890625, 0.4765625, -2.8125, -1.1796875, -0.220703125, -3.328125], [0.23046875, -0.7578125, -3.484375, -2.609375, 1.2109375, 1.7890625, -0.263671875, 0.80859375, 0.447265625, 0.66015625, 2.578125, -3.015625, 1.3515625, -0.765625, -0.44921875, -0.60546875, -0.75, -2.453125, 0.3671875, 3.34375, -0.1123046875, -0.002777099609375, -1.375, -0.2353515625, 0.93359375, -0.7421875, -0.90625, 0.8046875, -1.8359375, 0.50390625, 1.640625, 2.71875], [-0.1806640625, 2.734375, 2.0625, -1.9921875, -2.4375, -0.609375, 2.0625, -0.14453125, -1.203125, 3.109375, 0.57421875, -4.65625, 0.6328125, 1.0390625, 0.451171875, 0.8984375, -0.134765625, -2.640625, -0.7421875, -1.890625, -1.8671875, -2.53125, 0.90625, 0.1953125, -0.89453125, -1.296875, -0.046875, 2.15625, -4.0, 0.75390625, -1.09375, -3.765625], [-3.890625, -1.828125, 0.439453125, 0.78515625, -1.875, 2.03125, 2.84375, 0.79296875, -1.1796875, 2.25, 1.5078125, 1.734375, -1.3125, -5.65625, 4.21875, -3.21875, -0.07177734375, 4.75, 0.66015625, 1.8984375, -3.0, -3.5625, -1.0625, 2.1875, -0.69140625, -1.5859375, 0.396484375, 2.15625, -2.890625, -2.421875, -1.578125, 2.1875], [0.46875, 4.25, 1.875, -0.0703125, 2.53125, 0.423828125, -1.40625, 1.359375, -1.390625, -0.58203125, 2.65625, -0.2021484375, -1.609375, -0.9296875, 2.046875, -1.1015625, -0.7734375, -1.0234375, 0.3671875, -0.76953125, -3.203125, -1.7734375, -1.8671875, 2.484375, 1.625, 1.171875, -1.0078125, -1.6328125, -1.015625, -2.109375, 5.0, -4.5], [1.125, -2.5625, -0.208984375, -1.9765625, -2.359375, -2.28125, 3.515625, -0.265625, -1.53125, 1.109375, 0.020751953125, 1.4375, -3.65625, 0.60546875, 1.546875, -3.328125, 0.89453125, 3.390625, -0.0296630859375, 1.640625, 1.34375, -1.4140625, 0.07958984375, -3.140625, -0.90234375, 0.53125, 1.4453125, 0.04931640625, 1.4375, -2.203125, -0.203125, 0.03857421875], [3.703125, -0.427734375, -0.99609375, 0.042724609375, -1.8359375, 0.384765625, -0.73046875, -3.578125, -0.1171875, -0.63671875, -3.265625, -0.1337890625, 2.984375, 1.0390625, 1.2265625, -2.6875, 0.953125, 0.296875, 1.0546875, 0.84375, -2.71875, -0.0830078125, -1.515625, -0.10009765625, -1.796875, 2.625, -1.71875, -1.796875, 0.1494140625, -2.15625, -0.84765625, -1.65625], [2.828125, 1.5703125, -0.11474609375, -0.78125, 1.8828125, 0.80859375, 0.99609375, -0.052490234375, -3.375, -0.224609375, -1.0625, 1.2890625, 2.03125, -1.3125, 0.9375, 3.46875, -1.3359375, 3.359375, -1.703125, 0.0458984375, -0.0223388671875, 0.02294921875, -1.671875, -1.1796875, -1.3359375, 0.65234375, 0.66015625, 4.4375, 2.734375, -1.0234375, 0.6484375, 1.9921875], [0.061279296875, -0.1396484375, 0.10302734375, 1.734375, -1.6953125, -0.65234375, 0.94140625, 0.62109375, 0.478515625, -0.73828125, 1.9453125, 4.28125, 0.8125, -0.38671875, 1.5078125, -1.078125, -1.5, 0.0654296875, -5.15625, -2.3125, -0.6953125, -2.703125, -2.0625, -0.875, -3.28125, -0.8125, -1.0703125, 0.05078125, 2.3125, 0.345703125, 0.042236328125, 0.19921875], [0.455078125, -2.03125, -0.2294921875, 0.6171875, -2.734375, 1.734375, 2.15625, -1.265625, -0.482421875, -1.7578125, 1.3984375, -2.125, -0.4453125, -1.71875, 0.10205078125, -3.59375, 2.65625, -1.9296875, 0.11962890625, -0.42578125, -1.5234375, -1.7734375, 1.875, -1.0546875, 0.54296875, -1.6015625, -1.296875, 0.9453125, 1.859375, -0.3515625, -2.84375, 4.0], [-1.7109375, -3.078125, 5.1875, -0.80859375, -2.921875, -1.3671875, 0.734375, 0.380859375, -1.703125, 3.640625, -1.046875, -2.375, 1.921875, 2.65625, -1.6328125, -2.796875, 2.0625, -4.09375, -2.453125, 1.9375, -0.11083984375, -0.52734375, 0.70703125, -0.3046875, -2.59375, 2.546875, 2.65625, 0.41015625, 0.09033203125, 4.6875, -0.5546875, -0.51953125], [0.73046875, 2.9375, 3.1875, -0.515625, 0.6171875, -2.75, -0.625, -1.6796875, -2.015625, 3.359375, -1.5859375, -1.0625, 0.73046875, 2.59375, 0.9609375, 5.53125, -0.1494140625, 0.515625, 0.55078125, 2.875, 1.015625, -0.232421875, -1.8984375, 0.48828125, 2.796875, -0.8203125, 1.0546875, 0.4921875, 1.7265625, -1.609375, 4.6875, -2.5625], [-0.73046875, 1.875, 0.59375, 1.65625, -0.9921875, -0.1494140625, 0.0244140625, 3.140625, 1.3828125, 1.59375, -1.3125, 1.9375, 0.451171875, 2.78125, 4.03125, -0.61328125, -0.8125, -1.7265625, -0.287109375, -0.765625, 0.71875, -0.2890625, -0.72265625, 2.125, -1.875, 0.8671875, -0.8125, 1.4453125, 2.765625, -0.60546875, 0.8828125, 0.357421875], [-1.6015625, 0.482421875, 0.578125, 0.82421875, -0.396484375, 0.1884765625, -2.296875, -0.71484375, 1.109375, 1.78125, -0.84375, 0.208984375, 0.45703125, 0.40234375, 1.078125, -3.640625, -0.0986328125, 0.478515625, -2.0, 3.34375, 0.322265625, 3.125, -1.578125, -1.8125, 0.44921875, -3.359375, 0.4296875, 0.1943359375, 2.03125, 1.3984375, -0.8359375, -2.1875]], "dtype": "bfloat16"}], "outputs": [{"output": [[-0.3515625, 1.515625, 1.6640625, 0.0537109375, -1.078125, 0.921875, -0.03125, 0.15234375, -0.26953125, -0.5234375, -1.796875, 0.259765625, 0.58984375, -0.5703125, 0.984375, -1.0], [0.7890625, -0.322265625, -0.16015625, 0.27734375, 0.33984375, -0.71875, 0.9765625, 1.2578125, 0.390625, -0.271484375, 2.078125, 1.265625, -0.37109375, 1.21875, 0.171875, 1.234375], [1.25, 0.40234375, -0.515625, -1.25, 0.9375, 0.2734375, -0.42578125, 0.2265625, 0.921875, -0.1171875, -1.75, -0.609375, -1.28125, -0.90234375, 0.427734375, -1.3046875], [-1.34375, 0.37109375, 0.37890625, 0.79296875, -0.37109375, 0.69140625, -0.7734375, 0.169921875, -0.42578125, 0.3984375, -0.8359375, 0.43359375, -0.9609375, 1.078125, -0.7421875, 0.703125], [-0.05859375, -1.046875, -0.23046875, 0.177734375, -0.5390625, 0.291015625, 0.0703125, -1.59375, 1.28125, -1.859375, 0.458984375, 0.48828125, -0.470703125, 0.279296875, 0.28515625, -0.00244140625], [-0.42578125, -0.890625, -1.8984375, 1.1171875, 0.470703125, 0.416015625, -0.134765625, -1.3125, -1.34375, 0.12890625, 0.6015625, -0.6796875, -0.82421875, 0.2314453125, -0.189453125, -2.734375], [-0.5546875, 0.39453125, 1.6640625, -0.8125, -1.0, -1.421875, 0.8515625, 0.21484375, -0.287109375, 0.2333984375, -0.291015625, 0.875, -1.2734375, -0.267578125, 0.1083984375, 0.953125], [0.455078125, -0.78125, -0.5234375, 2.21875, -1.25, -0.6171875, 0.44921875, 1.1796875, 0.3671875, -1.421875, -0.83984375, -0.8515625, -0.953125, -0.234375, 0.28125, 1.9453125], [-2.078125, -0.984375, 1.046875, 1.140625, -0.2333984375, -0.9765625, -1.4921875, 0.115234375, 0.2275390625, -1.703125, 0.376953125, -0.44921875, 0.044921875, -0.84375, -0.095703125, 0.75], [-1.09375, -1.0234375, -0.5546875, -0.0419921875, -0.2353515625, 0.00390625, -1.578125, 0.2275390625, -1.453125, 1.296875, -0.37109375, -0.95703125, -0.515625, -0.376953125, -1.3359375, 0.203125], [-0.79296875, 0.32421875, -0.7265625, 1.3828125, 0.7421875, -0.21484375, -1.328125, 0.5859375, 0.47265625, -0.017578125, -2.75, 0.5546875, -1.1171875, 1.1640625, -2.140625, -1.0625], [0.8203125, -0.095703125, -0.421875, 0.80078125, -0.59765625, 0.9765625, -1.3984375, -0.20703125, 0.62109375, 0.302734375, -1.2578125, -0.609375, 0.60546875, -0.287109375, -0.97265625, 0.083984375], [1.921875, -0.462890625, 0.30859375, -0.83984375, -1.0859375, -0.796875, 1.1875, 0.734375, 0.8203125, 0.060302734375, -0.69921875, -1.1171875, 0.0361328125, 0.39453125, -0.072265625, 0.03515625], [-0.4140625, 0.5546875, -0.83203125, 0.61328125, -0.625, 1.375, -0.43359375, -0.765625, -0.177734375, -1.9453125, -1.6796875, -0.53125, -1.2890625, -0.341796875, 1.0390625, 0.34765625], [-0.28125, 1.765625, -1.6015625, -0.296875, 0.8203125, -1.515625, 1.96875, 0.515625, -0.41796875, 0.7265625, 0.03662109375, -0.25390625, 0.482421875, 1.15625, 1.21875, 0.26171875], [0.00537109375, 0.9140625, -0.337890625, 0.0400390625, 1.4609375, -0.00244140625, 1.0234375, 0.21484375, -0.53515625, 0.0703125, 0.96875, -0.49609375, -0.98046875, 0.314453125, 1.3984375, -0.4453125]], "dtype": "bfloat16"}]}}
{"kernel_name": "avgpool2d_relu_bfloat16", "prompt": "/*\nA kernel that performs 2D average pooling with ReLU activation on an input matrix (32x32), using a 2x2 window and stride 2. The output is a 16x16 matrix written to the output buffer. All operations use bfloat16.\n>>> avgpool2d_relu_bfloat16([[7.0625, 1.6015625, 3.921875, 8.9375], [-3.546875, -7.9375, -1.390625, 0.625], [0.7109375, -1.609375, -6.53125, 1.8515625], [0.0419921875, 7.15625, 0.5078125, 1.609375]])\n[[0.0, 3.03125], [1.578125, 0.0]]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 1024\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid avgpool2d_relu_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int ROWS = 32;\n    constexpr int COLS = 32;\n    constexpr int WINDOW_SIZE = 2;\n    constexpr int STRIDE = 2;\n\n    for (int i = 0; i < ROWS; i += STRIDE) {\n        for (int j = 0; j < COLS; j += STRIDE) {\n            float sum = 0.0f;\n            for (int wi = 0; wi < WINDOW_SIZE; wi++) {\n                for (int wj = 0; wj < WINDOW_SIZE; wj++) {\n                    sum += (float)input[(i + wi) * COLS + (j + wj)];\n                }\n            }\n            float avg = sum / (WINDOW_SIZE * WINDOW_SIZE);\n            float relu = avg > 0.0f ? avg : 0.0f;\n            output[(i/STRIDE) * (COLS/STRIDE) + (j/STRIDE)] = (bfloat16)relu;\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void avgpool2d_relu_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        avgpool2d_relu_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [[7.0625, 1.6015625, 3.921875, 8.9375, 7.46875, -3.90625, 3.796875, -0.60546875, -0.412109375, 1.640625, 0.578125, 5.8125, 3.046875, 0.486328125, 1.7734375, 1.3359375, 5.96875, -0.8203125, 1.25, -3.421875, -10.1875, 2.609375, 3.453125, -2.96875, 9.0625, -5.8125, 0.1826171875, -0.75, 6.125, 5.875, 0.62109375, 1.515625], [-3.546875, -7.9375, -1.390625, 0.625, 4.90625, 4.8125, -1.546875, -1.2109375, -4.1875, -5.6875, -6.8125, 7.8125, -2.03125, -1.75, -5.0, 3.109375, -6.46875, -0.8515625, -3.578125, 1.546875, -2.046875, -4.71875, -0.11279296875, 1.7109375, 0.265625, 1.2109375, -2.53125, -1.453125, -2.6875, -1.4375, -3.25, -6.90625], [0.7109375, -1.609375, -6.53125, 1.8515625, -3.625, 0.2080078125, 2.921875, 0.515625, 4.5625, -4.9375, 1.609375, -2.734375, -3.484375, -2.3125, -1.25, 0.224609375, -4.65625, 3.609375, 1.859375, -6.15625, 5.9375, 7.59375, 4.71875, -0.71875, -4.28125, 4.21875, -1.609375, 4.875, 0.83203125, 3.90625, 1.421875, 2.828125], [0.0419921875, 7.15625, 0.5078125, 1.609375, 7.53125, -5.40625, -5.09375, 3.875, -4.6875, 7.78125, -1.65625, -2.984375, 7.6875, 5.9375, 7.46875, 3.625, -3.4375, 7.625, -1.0703125, 3.203125, 3.78125, -0.62109375, 2.453125, 3.6875, 1.5078125, -4.40625, 1.1953125, 5.3125, -2.78125, -0.59765625, -1.7421875, 7.40625], [2.6875, 1.6328125, -3.078125, 2.15625, -2.703125, 0.126953125, -2.546875, 2.703125, 2.3125, -0.83203125, 1.5859375, -4.375, -5.96875, 1.7578125, 0.66796875, 2.546875, 9.5625, 3.78125, -3.65625, 4.46875, -5.25, -1.84375, -0.2734375, 6.84375, -2.984375, -3.3125, -0.39453125, -2.65625, 4.5, -4.3125, -4.59375, -1.75], [-1.9921875, 7.71875, 3.796875, 0.349609375, -4.90625, 3.375, -4.0, -6.1875, 4.75, 1.265625, 3.6875, 1.2734375, 3.421875, -2.609375, -4.125, 2.71875, -3.21875, -2.765625, -1.8203125, 0.06982421875, -1.4140625, -5.5, -2.578125, -8.875, 2.5, -6.40625, -4.40625, 0.208984375, -2.953125, 6.1875, -5.15625, 1.0703125], [-0.1572265625, -4.6875, 2.09375, -0.6875, 3.09375, 3.296875, 8.625, 5.34375, -1.4765625, -0.95703125, 4.40625, 2.625, 2.5625, -6.46875, -0.09716796875, -2.953125, 1.1171875, -0.392578125, 3.640625, 1.265625, 3.140625, -1.8671875, -3.78125, -1.640625, -0.06787109375, 1.515625, 9.0625, -0.1689453125, -3.828125, -1.3828125, -1.8515625, 1.9296875], [-6.15625, 0.25390625, 0.625, 0.9296875, -2.390625, -0.953125, -5.6875, -1.9765625, -2.171875, 1.6640625, -4.625, 3.125, 5.96875, -8.25, 1.703125, 2.703125, -2.546875, -1.5859375, -0.53125, -1.1875, -1.234375, -6.71875, 4.59375, 4.3125, -3.25, -5.875, 2.078125, -2.296875, 0.56640625, -1.2734375, 2.765625, 2.78125], [-2.90625, -5.53125, -6.34375, 2.4375, -4.75, -2.03125, -2.390625, -0.2099609375, -7.75, 0.75390625, 2.09375, 0.353515625, -1.2421875, 0.388671875, 1.59375, -11.0625, 7.8125, 1.5625, -2.609375, -1.5625, 1.9765625, -0.46484375, -8.125, 8.25, -0.44140625, 4.09375, -2.765625, 6.15625, 1.1484375, 2.4375, -4.1875, 4.84375], [2.765625, 5.21875, -2.515625, -1.921875, 9.1875, -4.25, -0.54296875, 4.5625, 0.390625, 2.328125, -1.6015625, 1.4765625, -5.21875, 6.625, -0.47265625, -2.71875, 2.671875, -1.84375, -5.34375, -5.375, 2.78125, -0.63671875, -0.53515625, 4.3125, -4.5, -2.921875, -1.5390625, 0.376953125, -0.1689453125, -1.1484375, -0.24609375, -0.4296875], [-2.875, -3.25, 1.1015625, -3.5625, -4.625, -1.25, -0.62890625, 9.0, -2.8125, 3.765625, 2.984375, -4.75, 3.09375, -4.75, -10.625, 2.421875, -7.03125, 1.8046875, -2.734375, 6.625, 4.28125, -1.8125, -2.75, -4.84375, -1.765625, -1.125, -1.4609375, 0.625, 2.3125, 1.3984375, -3.0625, -5.75], [5.46875, -2.75, -2.609375, -2.078125, -7.375, -1.9140625, -1.921875, 2.484375, 2.796875, 0.01507568359375, 3.734375, 1.359375, -0.0625, 0.64453125, -0.76171875, -1.578125, -1.0703125, -4.5, 1.125, -3.96875, 3.359375, -0.99609375, 0.1982421875, 1.9765625, 2.578125, -6.28125, -0.828125, 3.515625, -6.78125, 1.546875, -9.0, -4.09375], [0.154296875, -6.625, -3.9375, -5.875, 6.59375, 0.65625, 2.265625, -0.890625, -1.4140625, -6.46875, -1.1640625, -3.046875, 3.4375, 4.5625, 5.875, 3.40625, -2.390625, -4.46875, 3.0625, 1.421875, -7.0625, 1.421875, 3.265625, 0.2353515625, -0.73828125, -3.234375, -5.78125, 3.203125, -1.234375, -0.93359375, 6.9375, 2.734375], [1.484375, 0.56640625, 6.09375, 6.875, 3.71875, 2.328125, -8.375, 0.494140625, -0.51953125, 0.375, 3.765625, -10.9375, -2.28125, 1.078125, -1.8671875, -5.65625, 3.46875, 1.109375, -3.890625, 1.2578125, 3.28125, 0.0211181640625, 3.203125, 0.3125, -1.578125, -4.625, -0.34375, 0.77734375, 3.5, -0.4609375, 1.828125, -3.859375], [-3.125, -0.44140625, -4.21875, 3.28125, 1.8515625, 1.1171875, 1.359375, 8.0625, -1.875, -8.8125, 0.796875, -0.2021484375, -2.0625, -3.921875, -1.7578125, 0.7265625, -2.015625, 9.625, -3.84375, -3.171875, -9.125, 1.0078125, -8.0625, -2.15625, -1.1015625, -2.84375, 6.96875, 3.984375, 5.28125, -3.53125, 4.5, 1.984375], [3.078125, 4.125, -3.640625, -1.6953125, 3.453125, -10.625, 6.0625, 2.21875, -0.1826171875, 0.8828125, -4.125, -1.3984375, 4.40625, 5.1875, 10.8125, -0.294921875, -2.640625, -2.0625, -4.0625, -0.310546875, 1.53125, -0.13671875, 4.375, -0.9375, -1.390625, -2.328125, -6.53125, -6.28125, -4.71875, 5.21875, 3.578125, 5.5], [-5.34375, -7.875, -2.640625, 0.703125, 1.9921875, 4.1875, 1.140625, 6.96875, -0.890625, -3.65625, -6.71875, -3.5625, 0.96875, -3.5625, 3.75, 5.65625, -9.5, 3.453125, -8.9375, 1.609375, 4.90625, 0.259765625, -5.125, -2.34375, -1.046875, -0.73046875, -0.8125, -0.439453125, 0.85546875, -4.84375, -0.96875, 6.0625], [-1.5390625, -1.7734375, 4.3125, -10.25, 4.71875, -2.53125, 0.65625, 0.384765625, 3.765625, -1.0703125, -2.71875, 5.1875, -9.4375, 0.08154296875, -5.40625, -3.046875, 8.0625, -0.1787109375, 0.78125, -7.125, -2.921875, 0.78515625, 1.421875, 2.46875, 0.034423828125, 2.109375, 1.8125, -7.3125, 0.1484375, 3.078125, 2.359375, -1.453125], [-3.21875, -4.46875, -0.5234375, 4.53125, -7.8125, -2.640625, -4.5625, 3.140625, -2.21875, -1.8828125, -0.8671875, 1.78125, -1.5703125, -12.1875, 2.171875, 1.7578125, -0.87890625, -4.34375, 1.40625, 1.515625, -1.8828125, -0.8671875, -3.71875, -0.71484375, -6.1875, 1.671875, -3.78125, 0.953125, -5.625, -2.359375, -0.44140625, -6.65625], [0.4609375, -1.515625, -6.96875, -5.21875, 2.421875, 3.578125, -0.52734375, 1.6171875, 0.89453125, 1.3203125, 5.15625, -6.03125, 2.703125, -1.53125, -0.8984375, -1.2109375, -1.5, -4.90625, 0.734375, 6.6875, -0.224609375, -0.00555419921875, -2.75, -0.470703125, 1.8671875, -1.484375, -1.8125, 1.609375, -3.671875, 1.0078125, 3.28125, 5.4375], [-0.361328125, 5.46875, 4.125, -3.984375, -4.875, -1.21875, 4.125, -0.2890625, -2.40625, 6.21875, 1.1484375, -9.3125, 1.265625, 2.078125, 0.90234375, 1.796875, -0.26953125, -5.28125, -1.484375, -3.78125, -3.734375, -5.0625, 1.8125, 0.390625, -1.7890625, -2.59375, -0.09375, 4.3125, -8.0, 1.5078125, -2.1875, -7.53125], [-7.78125, -3.65625, 0.87890625, 1.5703125, -3.75, 4.0625, 5.6875, 1.5859375, -2.359375, 4.5, 3.015625, 3.46875, -2.625, -11.3125, 8.4375, -6.4375, -0.1435546875, 9.5, 1.3203125, 3.796875, -6.0, -7.125, -2.125, 4.375, -1.3828125, -3.171875, 0.79296875, 4.3125, -5.78125, -4.84375, -3.15625, 4.375], [0.9375, 8.5, 3.75, -0.140625, 5.0625, 0.84765625, -2.8125, 2.71875, -2.78125, -1.1640625, 5.3125, -0.404296875, -3.21875, -1.859375, 4.09375, -2.203125, -1.546875, -2.046875, 0.734375, -1.5390625, -6.40625, -3.546875, -3.734375, 4.96875, 3.25, 2.34375, -2.015625, -3.265625, -2.03125, -4.21875, 10.0, -9.0], [2.25, -5.125, -0.41796875, -3.953125, -4.71875, -4.5625, 7.03125, -0.53125, -3.0625, 2.21875, 0.04150390625, 2.875, -7.3125, 1.2109375, 3.09375, -6.65625, 1.7890625, 6.78125, -0.059326171875, 3.28125, 2.6875, -2.828125, 0.1591796875, -6.28125, -1.8046875, 1.0625, 2.890625, 0.0986328125, 2.875, -4.40625, -0.40625, 0.0771484375], [7.40625, -0.85546875, -1.9921875, 0.08544921875, -3.671875, 0.76953125, -1.4609375, -7.15625, -0.234375, -1.2734375, -6.53125, -0.267578125, 5.96875, 2.078125, 2.453125, -5.375, 1.90625, 0.59375, 2.109375, 1.6875, -5.4375, -0.166015625, -3.03125, -0.2001953125, -3.59375, 5.25, -3.4375, -3.59375, 0.298828125, -4.3125, -1.6953125, -3.3125], [5.65625, 3.140625, -0.2294921875, -1.5625, 3.765625, 1.6171875, 1.9921875, -0.10498046875, -6.75, -0.44921875, -2.125, 2.578125, 4.0625, -2.625, 1.875, 6.9375, -2.671875, 6.71875, -3.40625, 0.091796875, -0.044677734375, 0.0458984375, -3.34375, -2.359375, -2.671875, 1.3046875, 1.3203125, 8.875, 5.46875, -2.046875, 1.296875, 3.984375], [0.12255859375, -0.279296875, 0.2060546875, 3.46875, -3.390625, -1.3046875, 1.8828125, 1.2421875, 0.95703125, -1.4765625, 3.890625, 8.5625, 1.625, -0.7734375, 3.015625, -2.15625, -3.0, 0.130859375, -10.3125, -4.625, -1.390625, -5.40625, -4.125, -1.75, -6.5625, -1.625, -2.140625, 0.1015625, 4.625, 0.69140625, 0.08447265625, 0.3984375], [0.91015625, -4.0625, -0.458984375, 1.234375, -5.46875, 3.46875, 4.3125, -2.53125, -0.96484375, -3.515625, 2.796875, -4.25, -0.890625, -3.4375, 0.2041015625, -7.1875, 5.3125, -3.859375, 0.2392578125, -0.8515625, -3.046875, -3.546875, 3.75, -2.109375, 1.0859375, -3.203125, -2.59375, 1.890625, 3.71875, -0.703125, -5.6875, 8.0], [-3.421875, -6.15625, 10.375, -1.6171875, -5.84375, -2.734375, 1.46875, 0.76171875, -3.40625, 7.28125, -2.09375, -4.75, 3.84375, 5.3125, -3.265625, -5.59375, 4.125, -8.1875, -4.90625, 3.875, -0.2216796875, -1.0546875, 1.4140625, -0.609375, -5.1875, 5.09375, 5.3125, 0.8203125, 0.1806640625, 9.375, -1.109375, -1.0390625], [1.4609375, 5.875, 6.375, -1.03125, 1.234375, -5.5, -1.25, -3.359375, -4.03125, 6.71875, -3.171875, -2.125, 1.4609375, 5.1875, 1.921875, 11.0625, -0.298828125, 1.03125, 1.1015625, 5.75, 2.03125, -0.46484375, -3.796875, 0.9765625, 5.59375, -1.640625, 2.109375, 0.984375, 3.453125, -3.21875, 9.375, -5.125], [-1.4609375, 3.75, 1.1875, 3.3125, -1.984375, -0.298828125, 0.048828125, 6.28125, 2.765625, 3.1875, -2.625, 3.875, 0.90234375, 5.5625, 8.0625, -1.2265625, -1.625, -3.453125, -0.57421875, -1.53125, 1.4375, -0.578125, -1.4453125, 4.25, -3.75, 1.734375, -1.625, 2.890625, 5.53125, -1.2109375, 1.765625, 0.71484375], [-3.203125, 0.96484375, 1.15625, 1.6484375, -0.79296875, 0.376953125, -4.59375, -1.4296875, 2.21875, 3.5625, -1.6875, 0.41796875, 0.9140625, 0.8046875, 2.15625, -7.28125, -0.197265625, 0.95703125, -4.0, 6.6875, 0.64453125, 6.25, -3.15625, -3.625, 0.8984375, -6.71875, 0.859375, 0.388671875, 4.0625, 2.796875, -1.671875, -4.375]], "dtype": "bfloat16"}], "outputs": [{"output": [[0.0, 3.03125, 3.3125, 0.1083984375, 0.0, 1.84375, 0.0, 0.3046875, 0.0, 0.0, 0.0, 0.51953125, 1.1796875, 0.0, 1.96875, 0.0], [1.578125, 0.0, 0.0, 0.5546875, 0.6796875, 0.0, 1.953125, 2.515625, 0.78515625, 0.0, 4.1875, 2.53125, 0.0, 2.4375, 0.33984375, 2.484375], [2.515625, 0.8046875, 0.0, 0.0, 1.875, 0.54296875, 0.0, 0.453125, 1.84375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.85546875, 0.0], [0.0, 0.7421875, 0.76171875, 1.578125, 0.0, 1.3828125, 0.0, 0.33984375, 0.0, 0.796875, 0.0, 0.87109375, 0.0, 2.171875, 0.0, 1.40625], [0.0, 0.0, 0.0, 0.35546875, 0.0, 0.58203125, 0.138671875, 0.0, 2.546875, 0.0, 0.9140625, 0.9765625, 0.0, 0.55859375, 0.56640625, 0.0], [0.0, 0.0, 0.0, 2.234375, 0.94140625, 0.83203125, 0.0, 0.0, 0.0, 0.26171875, 1.2109375, 0.0, 0.0, 0.462890625, 0.0, 0.0], [0.0, 0.7890625, 3.328125, 0.0, 0.0, 0.0, 1.703125, 0.439453125, 0.0, 0.462890625, 0.0, 1.7578125, 0.0, 0.0, 0.2177734375, 1.90625], [0.91015625, 0.0, 0.0, 4.4375, 0.0, 0.0, 0.90234375, 2.375, 0.7265625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5625, 3.890625], [0.0, 0.0, 2.09375, 2.28125, 0.0, 0.0, 0.0, 0.23828125, 0.458984375, 0.0, 0.7578125, 0.0, 0.091796875, 0.0, 0.0, 1.5], [0.0, 0.0, 0.0, 0.0, 0.0, 0.009765625, 0.0, 0.455078125, 0.0, 2.59375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.40625], [0.0, 0.6484375, 0.0, 2.78125, 1.484375, 0.0, 0.0, 1.171875, 0.953125, 0.0, 0.0, 1.109375, 0.0, 2.328125, 0.0, 0.0], [1.640625, 0.0, 0.0, 1.6015625, 0.0, 1.953125, 0.0, 0.0, 1.2421875, 0.60546875, 0.0, 0.0, 1.2109375, 0.0, 0.0, 0.16796875], [3.84375, 0.0, 0.62109375, 0.0, 0.0, 0.0, 2.375, 1.46875, 1.640625, 0.12060546875, 0.0, 0.0, 0.072265625, 0.7890625, 0.0, 0.068359375], [0.0, 1.109375, 0.0, 1.2265625, 0.0, 2.75, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.078125, 0.69921875], [0.0, 3.53125, 0.0, 0.0, 1.640625, 0.0, 3.953125, 1.03125, 0.0, 1.453125, 0.072265625, 0.0, 0.96484375, 2.3125, 2.453125, 0.5234375], [0.0126953125, 1.828125, 0.0, 0.07666015625, 2.9375, 0.0, 2.046875, 0.427734375, 0.0, 0.1455078125, 1.9375, 0.0, 0.0, 0.62890625, 2.796875, 0.0]], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "bitcount_uint16", "prompt": "/*\nThis AIE kernel counts the number of 1-bits (Hamming weight) in each entry of a uint16_t vector, writing out a uint16_t vector of the same length where each entry holds the bit count for the corresponding input value.\n>>> bitcount_uint16([2732, 35967, 43567, 38852, 42613, 46870, 52416, 55329])\n[6, 10, 9, 8, 9, 9, 6, 6]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid bitcount_uint16(uint16_t *input_vector, uint16_t *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    for (uint32_t i = 0; i < vector_size; i++) {\n        uint16_t val = input_vector[i];\n        uint16_t count = 0;\n        while (val) {\n            count += val & 1;\n            val >>= 1;\n        }\n        output_vector[i] = count;\n    }\n}", "program_code": "extern \"C\" {\n    void bitcount_uint16_wrapper(uint16_t *input_vector, uint16_t *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        bitcount_uint16(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [2732, 35967, 43567, 38852, 42613, 46870, 52416, 55329, 45891, 39502, 21243, 56226, 30403, 35709, 32103, 55525, 41993, 27764, 57043, 40865, 20757, 42329, 55026, 25190, 46884, 28677, 14935, 19499, 15430, 58443, 48600, 3716, 39512, 63154, 52620, 17868, 14650, 25129, 17089, 31304, 32230, 51886, 18983, 53226, 43095, 34661, 51374, 31455, 24152, 37227, 35665, 25741, 59045, 60659, 16921, 54793, 27469, 4655, 38984, 22111, 6921, 5710, 38804, 42478, 2163, 1325, 5072, 24133, 37619, 54566, 7877, 62728, 18430, 50997, 1871, 9198, 7599, 57017, 2496, 57022, 47954, 64134, 24675, 31038, 42968, 52373, 31921, 52488, 33523, 30243, 797, 34110, 49811, 51152, 3219, 44491, 15246, 7751, 24999, 47227, 56608, 41937, 16321, 38143, 52489, 9394, 19129, 35217, 53887, 61909, 41504, 49716, 55839, 34199, 49866, 6940, 18676, 27175, 57495, 31037, 60067, 17337, 31230, 12211, 11723, 50740, 43890, 48294, 17591, 29894, 55324, 14191, 58146, 37252, 43136, 8861, 26752, 1231, 59300, 21242, 23605, 40477, 6021, 9809, 20006, 40114, 3560, 14570, 25332, 40431, 61713, 25328, 31055, 61849, 45444, 59152, 50793, 44683, 60458, 29487, 46522, 23560, 47647, 40177, 21368, 28641, 20737, 59136, 62785, 45719, 28647, 6506, 61353, 3946, 26681, 63557, 14627, 43697, 12134, 42804, 60535, 43950, 47883, 11200, 41390, 13787, 56402, 23471, 20571, 8449, 63360, 49196, 59790, 20671, 51811, 39834, 9781, 23836, 19340, 21302, 27257, 37368, 16298, 2518, 12372, 28744, 51403, 41567, 4420, 64774, 45830, 62845, 39876, 6687, 17455, 42781, 62079, 13688, 14324, 41619, 38019, 10571, 62412, 65227, 7012, 42802, 9396, 38132, 47080, 16599, 3918, 27156, 9359, 30560, 50836, 31109, 44259, 16018, 23482, 40862, 15127, 10418, 43727, 22151, 35725, 7233, 37237, 44220, 14165, 43013, 8752, 20788, 62769, 9055, 42565, 51009], "dtype": "uint16"}], "outputs": [{"output_vector": [6, 10, 9, 8, 9, 9, 6, 6, 8, 8, 10, 9, 9, 10, 11, 9, 5, 8, 11, 9, 6, 8, 10, 7, 8, 5, 9, 7, 7, 8, 10, 5, 7, 10, 8, 7, 8, 6, 5, 7, 11, 9, 7, 11, 8, 8, 8, 12, 8, 8, 7, 7, 9, 11, 5, 7, 9, 7, 5, 10, 6, 7, 8, 10, 6, 6, 6, 8, 9, 8, 8, 7, 11, 9, 8, 9, 10, 11, 4, 12, 9, 9, 6, 10, 9, 8, 9, 6, 8, 8, 6, 8, 7, 8, 6, 10, 9, 8, 8, 10, 7, 8, 9, 11, 7, 6, 8, 6, 11, 10, 4, 6, 10, 8, 7, 7, 7, 8, 8, 10, 9, 8, 12, 10, 9, 7, 9, 9, 8, 8, 7, 11, 7, 5, 4, 7, 4, 7, 9, 9, 8, 9, 7, 6, 7, 8, 7, 8, 8, 12, 7, 7, 10, 9, 6, 7, 8, 9, 8, 10, 10, 5, 10, 9, 8, 10, 4, 6, 8, 9, 12, 7, 11, 8, 7, 8, 7, 8, 9, 8, 11, 10, 9, 6, 8, 10, 8, 11, 7, 3, 8, 5, 9, 9, 8, 9, 7, 8, 7, 8, 9, 8, 10, 7, 5, 5, 8, 9, 4, 9, 7, 12, 8, 8, 7, 9, 12, 8, 10, 7, 6, 7, 10, 12, 7, 8, 6, 8, 10, 7, 8, 6, 7, 8, 7, 8, 9, 8, 10, 11, 9, 6, 10, 8, 8, 5, 8, 9, 9, 5, 4, 6, 9, 9, 7, 7], "dtype": "uint16"}]}}
{"kernel_name": "bitcount_uint8", "prompt": "/*\nThis AIE kernel counts the number of set bits (population count) for every entry in a uint8 vector of length 256, and returns a uint8 output vector of the same length containing the bit counts per element.\n>>> bitcount_uint8([172, 10, 127, 140, 47, 170, 196, 151])\n[4, 2, 7, 3, 5, 4, 3, 5]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid bitcount_uint8(uint8_t *input_vector, uint8_t *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    for (int i = 0; i < vector_size; i++) {\n        uint8_t x = input_vector[i];\n        uint8_t count = 0;\n        for (int b = 0; b < 8; b++) {\n            count += (x >> b) & 1;\n        }\n        output_vector[i] = count;\n    }\n}", "program_code": "extern \"C\" {\n    void bitcount_uint8_wrapper(uint8_t *input_vector, uint8_t *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        bitcount_uint8(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [172, 10, 127, 140, 47, 170, 196, 151, 117, 166, 22, 183, 192, 204, 33, 216, 67, 179, 78, 154, 251, 82, 162, 219, 195, 118, 125, 139, 103, 125, 229, 216, 9, 164, 116, 108, 211, 222, 161, 159, 21, 81, 89, 165, 242, 214, 102, 98, 36, 183, 5, 112, 87, 58, 43, 76, 70, 60, 75, 228, 216, 189, 132, 14, 88, 154, 178, 246, 140, 205, 204, 69, 58, 57, 41, 98, 193, 66, 72, 122, 230, 125, 174, 202, 39, 74, 234, 207, 87, 168, 101, 135, 174, 200, 223, 122, 88, 94, 107, 145, 81, 139, 141, 100, 165, 230, 243, 236, 25, 66, 9, 214, 77, 107, 47, 18, 72, 152, 95, 86, 9, 27, 78, 22, 148, 151, 238, 165, 115, 8, 45, 5, 208, 19, 69, 94, 243, 146, 38, 213, 197, 30, 8, 245, 254, 71, 53, 199, 79, 7, 238, 35, 175, 29, 185, 222, 192, 9, 190, 222, 82, 187, 134, 250, 99, 96, 62, 121, 216, 167, 149, 204, 177, 124, 8, 205, 243, 130, 35, 118, 29, 3, 62, 133, 147, 194, 208, 199, 147, 12, 203, 173, 142, 59, 71, 30, 167, 97, 123, 184, 32, 221, 209, 163, 193, 63, 255, 148, 9, 205, 178, 36, 185, 74, 145, 137, 127, 210, 213, 241, 32, 162, 52, 194, 31, 218, 151, 133, 202, 194, 28, 27, 244, 72, 39, 106, 151, 224, 61, 121, 163, 234, 185, 67, 254, 121, 179, 47, 203, 45, 52, 198, 114, 171, 166, 188], "dtype": "uint8"}], "outputs": [{"output_vector": [4, 2, 7, 3, 5, 4, 3, 5, 5, 4, 3, 6, 2, 4, 2, 4, 3, 5, 4, 4, 7, 3, 3, 6, 4, 5, 6, 4, 5, 6, 5, 4, 2, 3, 4, 4, 5, 6, 3, 6, 3, 3, 4, 4, 5, 5, 4, 3, 2, 6, 2, 3, 5, 4, 4, 3, 3, 4, 4, 4, 4, 6, 2, 3, 3, 4, 4, 6, 3, 5, 4, 3, 4, 4, 3, 3, 3, 2, 2, 5, 5, 6, 5, 4, 4, 3, 5, 6, 5, 3, 4, 4, 5, 3, 7, 5, 3, 5, 5, 3, 3, 4, 4, 3, 4, 5, 6, 5, 3, 2, 2, 5, 4, 5, 5, 2, 2, 3, 6, 4, 2, 4, 4, 3, 3, 5, 6, 4, 5, 1, 4, 2, 3, 3, 3, 5, 6, 3, 3, 5, 4, 4, 1, 6, 7, 4, 4, 5, 5, 3, 6, 3, 6, 4, 5, 6, 2, 2, 6, 6, 3, 6, 3, 6, 4, 2, 5, 5, 4, 5, 4, 4, 4, 5, 1, 5, 6, 2, 3, 5, 4, 2, 5, 3, 4, 3, 3, 5, 4, 2, 5, 5, 4, 5, 4, 4, 5, 3, 6, 4, 1, 6, 4, 4, 3, 6, 8, 3, 2, 5, 4, 2, 5, 3, 3, 3, 7, 4, 5, 5, 1, 3, 3, 3, 5, 5, 5, 3, 4, 3, 3, 4, 5, 2, 4, 4, 5, 3, 5, 5, 4, 5, 5, 3, 7, 5, 5, 5, 5, 4, 3, 4, 4, 5, 4, 5], "dtype": "uint8"}]}}
{"kernel_name": "bitwiseand_uint8", "prompt": "/*\nThis is the implementation of an AIE kernel that performs a bitwise AND operation on 2 input vectors and stores the result in 1 output vector.\n>>> bitwiseand_uint8([172, 10, 127, 140, 47, 170, 196, 151], [71, 199, 185, 73, 184, 134, 66, 74])\n[4, 2, 57, 8, 40, 130, 64, 2]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer1 size: 1024\nin_buffer2 size: 1024\nout_buffer size: 1024\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid bitwiseand_uint8(uint8_t *in_buffer1, uint8_t *in_buffer2, uint8_t *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr uint32_t nbytes = 1024;\n    for (uint32_t i = 0; i < nbytes; ++i) {\n        out_buffer[i] = in_buffer1[i] & in_buffer2[i];\n    }\n}", "program_code": "extern \"C\" {\n    void bitwiseand_uint8_wrapper(uint8_t *in_buffer1, uint8_t *in_buffer2, uint8_t *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        bitwiseand_uint8(in_buffer1, in_buffer2, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer1": [172, 10, 127, 140, 47, 170, 196, 151, 117, 166, 22, 183, 192, 204, 33, 216, 67, 179, 78, 154, 251, 82, 162, 219, 195, 118, 125, 139, 103, 125, 229, 216, 9, 164, 116, 108, 211, 222, 161, 159, 21, 81, 89, 165, 242, 214, 102, 98, 36, 183, 5, 112, 87, 58, 43, 76, 70, 60, 75, 228, 216, 189, 132, 14, 88, 154, 178, 246, 140, 205, 204, 69, 58, 57, 41, 98, 193, 66, 72, 122, 230, 125, 174, 202, 39, 74, 234, 207, 87, 168, 101, 135, 174, 200, 223, 122, 88, 94, 107, 145, 81, 139, 141, 100, 165, 230, 243, 236, 25, 66, 9, 214, 77, 107, 47, 18, 72, 152, 95, 86, 9, 27, 78, 22, 148, 151, 238, 165, 115, 8, 45, 5, 208, 19, 69, 94, 243, 146, 38, 213, 197, 30, 8, 245, 254, 71, 53, 199, 79, 7, 238, 35, 175, 29, 185, 222, 192, 9, 190, 222, 82, 187, 134, 250, 99, 96, 62, 121, 216, 167, 149, 204, 177, 124, 8, 205, 243, 130, 35, 118, 29, 3, 62, 133, 147, 194, 208, 199, 147, 12, 203, 173, 142, 59, 71, 30, 167, 97, 123, 184, 32, 221, 209, 163, 193, 63, 148, 9, 205, 178, 36, 185, 74, 145, 137, 127, 210, 213, 241, 32, 162, 52, 194, 31, 218, 151, 133, 202, 194, 28, 27, 244, 72, 39, 106, 151, 224, 61, 121, 163, 234, 185, 67, 254, 121, 179, 47, 203, 45, 52, 198, 114, 171, 166, 188, 183, 68, 198, 116, 28, 216, 111, 55, 34, 227, 132, 145, 128, 168, 157, 34, 128, 104, 207, 4, 164, 231, 250, 82, 53, 92, 29, 158, 133, 23, 81, 38, 38, 78, 178, 156, 232, 13, 234, 56, 244, 98, 239, 157, 17, 241, 240, 98, 79, 121, 153, 241, 132, 177, 16, 231, 105, 198, 139, 174, 42, 236, 47, 115, 186, 181, 8, 92, 31, 186, 241, 156, 120, 83, 225, 111, 1, 81, 0, 231, 65, 245, 151, 178, 231, 111, 106, 25, 169, 239, 106, 15, 57, 104, 69, 248, 35, 57, 177, 170, 102, 47, 52, 167, 119, 236, 174, 171, 11, 187, 192, 43, 174, 161, 219, 53, 82, 220, 175, 91, 91, 80, 1, 33, 128, 247, 44, 192, 142, 233, 191, 80, 99, 202, 154, 155, 53, 38, 28, 93, 140, 75, 54, 83, 121, 106, 248, 145, 170, 63, 214, 9, 84, 48, 72, 112, 203, 200, 95, 162, 68, 17, 6, 253, 6, 179, 125, 245, 196, 155, 31, 26, 47, 68, 29, 167, 127, 242, 120, 53, 244, 55, 147, 162, 131, 148, 75, 41, 204, 243, 203, 254, 100, 27, 50, 167, 180, 36, 244, 148, 232, 183, 215, 64, 78, 15, 20, 106, 143, 36, 96, 119, 148, 198, 133, 121, 227, 172, 146, 62, 186, 91, 158, 159, 23, 59, 178, 40, 207, 170, 135, 86, 141, 139, 65, 28, 117, 145, 188, 172, 85, 55, 5, 168, 48, 34, 52, 81, 49, 245, 95, 35, 69, 166, 65, 199, 169, 56, 83, 50, 163, 22, 23, 243, 192, 197, 100, 94, 95, 92, 155, 169, 197, 156, 44, 210, 94, 110, 121, 3, 0, 161, 219, 24, 113, 215, 114, 159, 178, 142, 131, 214, 36, 245, 116, 172, 162, 231, 153, 24, 48, 99, 209, 248, 93, 63, 249, 249, 131, 73, 209, 224, 98, 134, 249, 119, 42, 190, 118, 130, 205, 3, 13, 250, 112, 81, 67, 14, 231, 39, 215, 154, 149, 43, 127, 115, 201, 96, 64, 189, 127, 233, 29, 5, 0, 54, 8, 10, 138, 247, 19, 113, 114, 9, 102, 72, 43, 50, 198, 250, 186, 51, 197, 30, 127, 141, 4, 92, 23, 216, 207, 75, 187, 214, 27, 123, 130, 240, 100, 30, 121, 25, 76, 176, 98, 88, 103, 81, 62, 222, 102, 225, 163, 35, 13, 106, 222, 122, 17, 235, 123, 248, 107, 16, 195, 167, 129, 55, 82, 218, 69, 177, 174, 55, 176, 144, 227, 202, 12, 145, 148, 92, 119, 221, 209, 144, 240, 67, 50, 202, 75, 130, 155, 149, 243, 133, 14, 91, 174, 234, 41, 124, 12, 24, 58, 252, 208, 235, 193, 58, 113, 147, 36, 220, 70, 21, 10, 91, 230, 237, 86, 144, 24, 71, 43, 188, 141, 81, 104, 51, 101, 2, 11, 104, 219, 170, 2, 187, 163, 215, 51, 129, 189, 33, 80, 52, 173, 165, 32, 56, 97, 183, 182, 20, 101, 215, 128, 132, 22, 74, 38, 91, 197, 67, 19, 161, 229, 46, 174, 148, 215, 101, 42, 182, 37, 150, 115, 181, 133, 141, 184, 196, 37, 5, 188, 137, 57, 42, 232, 105, 53, 212, 77, 190, 171, 94, 30, 185, 51, 1, 24, 53, 125, 37, 125, 98, 133, 173, 2, 131, 210, 145, 3, 62, 31, 69, 94, 32, 40, 180, 226, 172, 53, 188, 107, 151, 217, 73, 13, 253, 81, 246, 112, 247, 235, 110, 40, 73, 174, 63, 72, 53, 144, 193, 19, 12, 127, 147, 95, 178, 102, 101, 72, 15, 144, 151, 154, 197, 98, 229, 194, 25, 127, 146, 248, 84, 144, 163, 180, 224, 27, 57, 67, 233, 60, 228, 236, 91, 231, 243, 61, 31, 24, 174, 14, 207, 118, 114, 96, 159, 254, 114, 4, 61, 174, 216, 195, 159, 131, 250, 237, 18, 17, 179, 139, 104, 191, 29, 252, 211, 36, 76, 86, 170, 91, 196, 205, 13, 85, 208, 121, 11, 109, 105, 109, 102, 129, 101, 75, 147, 233, 172, 184, 250, 143, 225, 16, 166, 242, 63, 152, 76, 206, 148, 157, 19, 47, 80, 149, 104, 185, 225, 110, 132, 37, 247, 25, 192, 73, 177, 208, 165, 165, 150, 188, 67, 170, 185, 121, 7, 224, 168, 118, 203, 86, 128, 117, 52, 128, 136, 189, 229, 193, 244, 83, 54, 4, 59, 161, 138, 220, 164, 104, 39, 22, 101, 160, 195, 129, 108, 228, 60, 106, 158, 251, 149, 60, 155, 251, 234, 144, 121, 121, 216, 233, 4, 70, 149, 90, 120, 213, 1, 52, 77, 31, 169, 80, 183, 13], "dtype": "uint8"}, {"in_buffer2": [71, 199, 185, 73, 184, 134, 66, 74, 152, 148, 42, 98, 79, 66, 54, 158, 41, 152, 201, 191, 18, 201, 195, 109, 40, 62, 226, 224, 182, 109, 174, 34, 207, 64, 85, 26, 11, 59, 92, 76, 166, 208, 165, 23, 111, 56, 233, 145, 93, 205, 162, 90, 249, 111, 67, 151, 129, 212, 67, 141, 223, 250, 6, 147, 118, 167, 155, 8, 44, 43, 56, 167, 216, 224, 13, 248, 125, 61, 240, 166, 24, 224, 44, 82, 67, 112, 113, 110, 210, 171, 164, 56, 239, 19, 132, 229, 3, 223, 41, 36, 234, 136, 24, 94, 204, 6, 230, 24, 230, 215, 148, 111, 35, 49, 234, 251, 214, 22, 85, 228, 254, 179, 165, 66, 189, 186, 98, 206, 197, 78, 122, 137, 215, 10, 50, 180, 43, 74, 171, 114, 32, 120, 168, 25, 11, 92, 125, 25, 104, 54, 99, 235, 212, 24, 49, 90, 138, 132, 216, 182, 182, 182, 32, 120, 235, 111, 180, 165, 245, 84, 215, 125, 62, 66, 38, 156, 254, 150, 231, 111, 130, 61, 222, 232, 125, 157, 9, 2, 35, 153, 41, 27, 246, 32, 130, 211, 79, 149, 157, 217, 132, 182, 42, 151, 170, 178, 31, 53, 227, 111, 199, 51, 17, 23, 217, 174, 68, 108, 221, 148, 116, 172, 206, 181, 75, 81, 105, 29, 150, 176, 145, 67, 62, 213, 35, 35, 42, 61, 104, 39, 67, 129, 8, 137, 237, 180, 17, 73, 8, 138, 251, 41, 177, 138, 178, 151, 251, 143, 95, 131, 95, 27, 116, 46, 15, 138, 107, 218, 162, 216, 184, 178, 87, 243, 12, 108, 59, 203, 221, 3, 39, 145, 93, 31, 199, 187, 249, 9, 187, 65, 4, 138, 237, 21, 219, 27, 238, 17, 59, 173, 177, 2, 199, 64, 209, 195, 167, 133, 39, 92, 61, 20, 178, 241, 85, 169, 224, 186, 97, 243, 191, 44, 236, 239, 43, 34, 43, 227, 86, 162, 167, 98, 133, 88, 20, 83, 125, 33, 24, 233, 13, 133, 186, 199, 86, 232, 248, 50, 51, 18, 243, 45, 36, 216, 189, 4, 0, 199, 197, 43, 203, 197, 47, 203, 34, 185, 164, 118, 197, 32, 83, 57, 126, 3, 228, 223, 181, 247, 104, 88, 254, 212, 177, 241, 80, 188, 150, 237, 190, 117, 182, 155, 136, 128, 84, 180, 189, 104, 190, 152, 129, 152, 38, 8, 209, 232, 156, 200, 112, 101, 41, 42, 35, 185, 1, 128, 120, 53, 25, 159, 91, 13, 229, 12, 168, 64, 197, 147, 116, 23, 248, 178, 36, 139, 230, 60, 176, 176, 13, 254, 25, 166, 40, 239, 67, 81, 107, 68, 103, 223, 44, 157, 252, 225, 216, 173, 35, 59, 31, 137, 114, 140, 65, 221, 30, 87, 4, 151, 29, 84, 55, 192, 241, 70, 233, 186, 33, 205, 232, 246, 146, 160, 219, 79, 17, 213, 226, 141, 221, 208, 241, 101, 84, 57, 95, 54, 253, 81, 184, 53, 2, 10, 242, 56, 69, 88, 170, 47, 101, 245, 55, 140, 99, 194, 241, 44, 146, 207, 145, 117, 51, 83, 189, 253, 106, 189, 115, 66, 181, 142, 125, 111, 110, 97, 248, 91, 216, 55, 58, 85, 45, 56, 174, 167, 129, 29, 65, 39, 238, 213, 21, 203, 218, 14, 150, 110, 113, 14, 158, 237, 53, 111, 145, 238, 226, 124, 198, 218, 209, 79, 199, 131, 137, 225, 18, 145, 67, 178, 92, 163, 245, 249, 43, 88, 180, 96, 83, 212, 30, 158, 177, 129, 250, 45, 41, 51, 225, 138, 93, 88, 81, 6, 174, 244, 199, 218, 149, 69, 55, 17, 201, 240, 107, 190, 89, 175, 236, 173, 242, 73, 133, 122, 224, 121, 37, 116, 219, 55, 85, 173, 73, 65, 93, 137, 28, 78, 103, 155, 235, 63, 140, 229, 209, 96, 246, 182, 105, 218, 134, 253, 186, 247, 48, 120, 128, 143, 134, 55, 214, 95, 189, 116, 63, 126, 191, 169, 16, 4, 11, 232, 106, 24, 105, 67, 164, 224, 32, 35, 94, 98, 73, 5, 24, 30, 174, 58, 116, 26, 37, 194, 191, 148, 175, 225, 195, 164, 236, 81, 51, 101, 136, 231, 136, 176, 42, 98, 184, 35, 82, 165, 91, 243, 155, 150, 93, 108, 30, 83, 123, 151, 191, 212, 238, 202, 11, 133, 87, 244, 4, 161, 160, 160, 3, 0, 147, 8, 102, 223, 72, 18, 214, 79, 199, 217, 6, 70, 87, 100, 234, 108, 13, 204, 76, 204, 58, 125, 165, 226, 81, 214, 133, 47, 120, 148, 12, 174, 116, 39, 234, 243, 183, 235, 196, 116, 64, 59, 175, 203, 170, 192, 123, 220, 130, 43, 55, 164, 211, 234, 201, 25, 225, 134, 242, 32, 179, 188, 58, 170, 93, 25, 187, 14, 47, 91, 225, 214, 81, 2, 65, 28, 37, 78, 80, 20, 157, 155, 54, 210, 127, 27, 245, 68, 205, 168, 132, 22, 182, 196, 120, 227, 212, 145, 6, 122, 91, 42, 182, 83, 194, 28, 53, 135, 130, 88, 39, 200, 47, 184, 108, 61, 66, 254, 186, 141, 154, 201, 95, 5, 150, 113, 165, 0, 225, 172, 118, 136, 108, 2, 55, 207, 172, 18, 71, 207, 185, 187, 47, 181, 127, 55, 150, 139, 148, 189, 206, 4, 164, 37, 221, 167, 153, 64, 191, 92, 145, 22, 30, 173, 203, 194, 172, 26, 245, 114, 132, 74, 130, 226, 70, 52, 55, 207, 33, 238, 211, 198, 44, 177, 29, 132, 183, 219, 108, 88, 180, 51, 43, 100, 101, 227, 2, 145, 118, 105, 115, 191, 144, 18, 83, 38, 215, 117, 109, 235, 46, 34, 21, 114, 52, 51, 190, 20, 37, 158, 190, 58, 42, 181, 65, 241, 124, 58, 15, 245, 31, 171, 111, 9, 91, 55, 71, 218, 184, 252, 37, 192, 240, 252, 195, 203, 7, 18, 91, 236, 195, 173, 3, 59, 191, 87, 107, 168, 191, 193, 97, 180, 23, 70, 45, 90, 231, 234, 213, 170, 55, 53, 44, 91, 21, 48, 35, 207, 191, 94, 124, 92, 141, 59, 72, 80, 187, 80, 57, 160], "dtype": "uint8"}], "outputs": [{"out_buffer": [4, 2, 57, 8, 40, 130, 64, 2, 16, 132, 2, 34, 64, 64, 32, 152, 1, 144, 72, 154, 18, 64, 130, 73, 0, 54, 96, 128, 38, 109, 164, 0, 9, 0, 84, 8, 3, 26, 0, 12, 4, 80, 1, 5, 98, 16, 96, 0, 4, 133, 0, 80, 81, 42, 3, 4, 0, 20, 67, 132, 216, 184, 4, 2, 80, 130, 146, 0, 12, 9, 8, 5, 24, 32, 9, 96, 65, 0, 64, 34, 0, 96, 44, 66, 3, 64, 96, 78, 82, 168, 36, 0, 174, 0, 132, 96, 0, 94, 41, 0, 64, 136, 8, 68, 132, 6, 226, 8, 0, 66, 0, 70, 1, 33, 42, 18, 64, 16, 85, 68, 8, 19, 4, 2, 148, 146, 98, 132, 65, 8, 40, 1, 208, 2, 0, 20, 35, 2, 34, 80, 0, 24, 8, 17, 10, 68, 53, 1, 72, 6, 98, 35, 132, 24, 49, 90, 128, 0, 152, 150, 18, 178, 0, 120, 99, 96, 52, 33, 208, 4, 149, 76, 48, 64, 0, 140, 242, 130, 35, 102, 0, 1, 30, 128, 17, 128, 0, 2, 3, 8, 9, 9, 134, 32, 2, 18, 7, 1, 25, 152, 0, 148, 0, 131, 128, 50, 20, 1, 193, 34, 4, 49, 0, 17, 137, 46, 64, 68, 209, 0, 32, 36, 194, 21, 74, 17, 1, 8, 130, 16, 17, 64, 8, 5, 34, 3, 32, 61, 104, 35, 66, 129, 0, 136, 105, 176, 1, 73, 8, 0, 194, 32, 161, 130, 176, 151, 64, 134, 84, 0, 88, 11, 52, 34, 3, 128, 1, 128, 160, 152, 32, 128, 64, 195, 4, 36, 35, 202, 80, 1, 4, 17, 28, 5, 7, 17, 32, 0, 10, 0, 4, 136, 13, 0, 24, 16, 98, 1, 25, 1, 177, 0, 66, 64, 81, 129, 161, 132, 33, 16, 37, 0, 130, 129, 4, 40, 224, 42, 97, 178, 181, 8, 76, 15, 42, 32, 8, 96, 82, 160, 39, 0, 1, 0, 4, 65, 117, 1, 16, 225, 13, 0, 24, 129, 70, 104, 8, 48, 32, 0, 240, 33, 32, 144, 168, 4, 0, 4, 133, 35, 200, 132, 43, 11, 34, 128, 32, 38, 129, 0, 17, 16, 92, 3, 64, 91, 16, 1, 32, 0, 246, 4, 128, 128, 64, 188, 16, 97, 138, 16, 146, 17, 0, 0, 84, 132, 9, 32, 18, 24, 0, 152, 0, 8, 17, 192, 8, 64, 48, 64, 32, 10, 0, 25, 0, 0, 16, 4, 25, 6, 19, 13, 229, 4, 136, 0, 0, 3, 68, 21, 160, 50, 32, 8, 36, 52, 48, 144, 0, 130, 16, 2, 40, 204, 67, 65, 106, 68, 3, 18, 36, 148, 36, 224, 144, 168, 35, 19, 0, 8, 2, 4, 64, 141, 4, 64, 4, 148, 4, 4, 49, 192, 160, 2, 40, 186, 1, 140, 136, 22, 18, 160, 8, 79, 0, 133, 66, 141, 137, 64, 16, 101, 16, 56, 12, 20, 53, 1, 168, 48, 2, 0, 80, 48, 69, 88, 34, 5, 36, 65, 7, 136, 32, 66, 48, 32, 18, 7, 145, 64, 1, 64, 28, 93, 72, 153, 33, 64, 148, 12, 80, 78, 110, 97, 0, 0, 128, 19, 24, 81, 5, 48, 142, 162, 128, 1, 64, 36, 228, 84, 4, 130, 194, 8, 16, 32, 97, 0, 152, 77, 53, 105, 145, 130, 64, 80, 192, 66, 128, 73, 71, 2, 136, 96, 2, 129, 3, 0, 88, 32, 81, 65, 10, 64, 36, 64, 18, 148, 10, 30, 49, 129, 96, 0, 41, 51, 225, 8, 5, 0, 16, 0, 10, 128, 199, 18, 17, 64, 1, 0, 72, 32, 34, 134, 88, 170, 32, 133, 18, 73, 133, 0, 64, 17, 0, 68, 75, 51, 84, 9, 73, 0, 80, 0, 28, 72, 1, 8, 160, 34, 8, 101, 81, 32, 214, 38, 97, 130, 2, 13, 42, 214, 48, 16, 128, 11, 128, 35, 16, 67, 165, 0, 55, 82, 154, 1, 16, 4, 3, 160, 0, 0, 72, 0, 128, 128, 0, 35, 92, 64, 0, 0, 0, 18, 138, 10, 0, 26, 5, 194, 133, 4, 11, 160, 194, 32, 108, 0, 16, 32, 136, 192, 136, 128, 42, 96, 144, 32, 80, 4, 17, 2, 27, 134, 77, 68, 16, 16, 67, 3, 188, 132, 64, 72, 3, 5, 2, 0, 0, 129, 160, 0, 3, 0, 147, 0, 0, 157, 0, 16, 20, 13, 133, 0, 0, 64, 23, 36, 0, 100, 5, 128, 4, 4, 10, 36, 1, 192, 65, 18, 129, 37, 40, 132, 4, 134, 100, 34, 162, 33, 150, 99, 132, 4, 0, 56, 132, 1, 0, 128, 9, 24, 2, 40, 33, 36, 208, 72, 136, 9, 64, 6, 176, 32, 1, 24, 48, 40, 5, 25, 34, 4, 45, 2, 129, 210, 17, 2, 0, 28, 5, 78, 0, 0, 148, 130, 36, 16, 60, 11, 149, 64, 73, 8, 132, 16, 182, 64, 112, 227, 68, 0, 0, 42, 27, 8, 52, 16, 192, 16, 4, 7, 130, 88, 34, 64, 37, 8, 12, 16, 2, 154, 128, 0, 128, 192, 25, 5, 146, 112, 4, 0, 161, 164, 96, 8, 40, 2, 33, 12, 164, 0, 67, 199, 177, 57, 15, 16, 46, 6, 134, 2, 16, 32, 142, 4, 32, 4, 29, 166, 152, 64, 159, 0, 144, 4, 18, 1, 131, 130, 40, 26, 21, 112, 128, 0, 0, 66, 2, 16, 4, 205, 1, 68, 208, 64, 8, 33, 9, 4, 38, 129, 100, 72, 144, 33, 40, 32, 96, 131, 0, 16, 38, 96, 51, 152, 0, 2, 16, 4, 19, 37, 64, 129, 40, 32, 1, 98, 4, 33, 182, 16, 0, 8, 176, 16, 32, 165, 0, 176, 64, 42, 9, 113, 7, 160, 40, 0, 75, 22, 0, 80, 48, 128, 0, 128, 224, 192, 192, 67, 6, 0, 27, 160, 130, 140, 0, 40, 39, 22, 97, 160, 131, 129, 96, 164, 20, 66, 12, 90, 133, 40, 145, 170, 34, 16, 40, 89, 16, 32, 0, 70, 149, 90, 120, 84, 1, 48, 72, 16, 169, 80, 49, 0], "dtype": "uint8"}]}}
{"kernel_name": "bitwisenot_uint8", "prompt": "/*\nThis is the implementation of an AIE kernel that performs a bitwise NOT operation on 1 input vector and stores the result in 1 output vector.\n>>> bitwisenot_uint8([172, 10, 127, 140, 47, 170, 196, 151])\n[83, 245, 128, 115, 208, 85, 59, 104]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer1 size: 1024\nout_buffer size: 1024\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid bitwisenot_uint8(uint8_t *in_buffer1, uint8_t *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr uint32_t nbytes = 1024;\n    for (uint32_t i = 0; i < nbytes; ++i) {\n        out_buffer[i] = ~in_buffer1[i];\n    }\n}", "program_code": "extern \"C\" {\n    void bitwisenot_uint8_wrapper(uint8_t *in_buffer1, uint8_t *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        bitwisenot_uint8(in_buffer1, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer1": [172, 10, 127, 140, 47, 170, 196, 151, 117, 166, 22, 183, 192, 204, 33, 216, 67, 179, 78, 154, 251, 82, 162, 219, 195, 118, 125, 139, 103, 125, 229, 216, 9, 164, 116, 108, 211, 222, 161, 159, 21, 81, 89, 165, 242, 214, 102, 98, 36, 183, 5, 112, 87, 58, 43, 76, 70, 60, 75, 228, 216, 189, 132, 14, 88, 154, 178, 246, 140, 205, 204, 69, 58, 57, 41, 98, 193, 66, 72, 122, 230, 125, 174, 202, 39, 74, 234, 207, 87, 168, 101, 135, 174, 200, 223, 122, 88, 94, 107, 145, 81, 139, 141, 100, 165, 230, 243, 236, 25, 66, 9, 214, 77, 107, 47, 18, 72, 152, 95, 86, 9, 27, 78, 22, 148, 151, 238, 165, 115, 8, 45, 5, 208, 19, 69, 94, 243, 146, 38, 213, 197, 30, 8, 245, 254, 71, 53, 199, 79, 7, 238, 35, 175, 29, 185, 222, 192, 9, 190, 222, 82, 187, 134, 250, 99, 96, 62, 121, 216, 167, 149, 204, 177, 124, 8, 205, 243, 130, 35, 118, 29, 3, 62, 133, 147, 194, 208, 199, 147, 12, 203, 173, 142, 59, 71, 30, 167, 97, 123, 184, 32, 221, 209, 163, 193, 63, 148, 9, 205, 178, 36, 185, 74, 145, 137, 127, 210, 213, 241, 32, 162, 52, 194, 31, 218, 151, 133, 202, 194, 28, 27, 244, 72, 39, 106, 151, 224, 61, 121, 163, 234, 185, 67, 254, 121, 179, 47, 203, 45, 52, 198, 114, 171, 166, 188, 183, 68, 198, 116, 28, 216, 111, 55, 34, 227, 132, 145, 128, 168, 157, 34, 128, 104, 207, 4, 164, 231, 250, 82, 53, 92, 29, 158, 133, 23, 81, 38, 38, 78, 178, 156, 232, 13, 234, 56, 244, 98, 239, 157, 17, 241, 240, 98, 79, 121, 153, 241, 132, 177, 16, 231, 105, 198, 139, 174, 42, 236, 47, 115, 186, 181, 8, 92, 31, 186, 241, 156, 120, 83, 225, 111, 1, 81, 0, 231, 65, 245, 151, 178, 231, 111, 106, 25, 169, 239, 106, 15, 57, 104, 69, 248, 35, 57, 177, 170, 102, 47, 52, 167, 119, 236, 174, 171, 11, 187, 192, 43, 174, 161, 219, 53, 82, 220, 175, 91, 91, 80, 1, 33, 128, 247, 44, 192, 142, 233, 191, 80, 99, 202, 154, 155, 53, 38, 28, 93, 140, 75, 54, 83, 121, 106, 248, 145, 170, 63, 214, 9, 84, 48, 72, 112, 203, 200, 95, 162, 68, 17, 6, 253, 6, 179, 125, 245, 196, 155, 31, 26, 47, 68, 29, 167, 127, 242, 120, 53, 244, 55, 147, 162, 131, 148, 75, 41, 204, 243, 203, 254, 100, 27, 50, 167, 180, 36, 244, 148, 232, 183, 215, 64, 78, 15, 20, 106, 143, 36, 96, 119, 148, 198, 133, 121, 227, 172, 146, 62, 186, 91, 158, 159, 23, 59, 178, 40, 207, 170, 135, 86, 141, 139, 65, 28, 117, 145, 188, 172, 85, 55, 5, 168, 48, 34, 52, 81, 49, 245, 95, 35, 69, 166, 65, 199, 169, 56, 83, 50, 163, 22, 23, 243, 192, 197, 100, 94, 95, 92, 155, 169, 197, 156, 44, 210, 94, 110, 121, 3, 0, 161, 219, 24, 113, 215, 114, 159, 178, 142, 131, 214, 36, 245, 116, 172, 162, 231, 153, 24, 48, 99, 209, 248, 93, 63, 249, 249, 131, 73, 209, 224, 98, 134, 249, 119, 42, 190, 118, 130, 205, 3, 13, 250, 112, 81, 67, 14, 231, 39, 215, 154, 149, 43, 127, 115, 201, 96, 64, 189, 127, 233, 29, 5, 0, 54, 8, 10, 138, 247, 19, 113, 114, 9, 102, 72, 43, 50, 198, 250, 186, 51, 197, 30, 127, 141, 4, 92, 23, 216, 207, 75, 187, 214, 27, 123, 130, 240, 100, 30, 121, 25, 76, 176, 98, 88, 103, 81, 62, 222, 102, 225, 163, 35, 13, 106, 222, 122, 17, 235, 123, 248, 107, 16, 195, 167, 129, 55, 82, 218, 69, 177, 174, 55, 176, 144, 227, 202, 12, 145, 148, 92, 119, 221, 209, 144, 240, 67, 50, 202, 75, 130, 155, 149, 243, 133, 14, 91, 174, 234, 41, 124, 12, 24, 58, 252, 208, 235, 193, 58, 113, 147, 36, 220, 70, 21, 10, 91, 230, 237, 86, 144, 24, 71, 43, 188, 141, 81, 104, 51, 101, 2, 11, 104, 219, 170, 2, 187, 163, 215, 51, 129, 189, 33, 80, 52, 173, 165, 32, 56, 97, 183, 182, 20, 101, 215, 128, 132, 22, 74, 38, 91, 197, 67, 19, 161, 229, 46, 174, 148, 215, 101, 42, 182, 37, 150, 115, 181, 133, 141, 184, 196, 37, 5, 188, 137, 57, 42, 232, 105, 53, 212, 77, 190, 171, 94, 30, 185, 51, 1, 24, 53, 125, 37, 125, 98, 133, 173, 2, 131, 210, 145, 3, 62, 31, 69, 94, 32, 40, 180, 226, 172, 53, 188, 107, 151, 217, 73, 13, 253, 81, 246, 112, 247, 235, 110, 40, 73, 174, 63, 72, 53, 144, 193, 19, 12, 127, 147, 95, 178, 102, 101, 72, 15, 144, 151, 154, 197, 98, 229, 194, 25, 127, 146, 248, 84, 144, 163, 180, 224, 27, 57, 67, 233, 60, 228, 236, 91, 231, 243, 61, 31, 24, 174, 14, 207, 118, 114, 96, 159, 254, 114, 4, 61, 174, 216, 195, 159, 131, 250, 237, 18, 17, 179, 139, 104, 191, 29, 252, 211, 36, 76, 86, 170, 91, 196, 205, 13, 85, 208, 121, 11, 109, 105, 109, 102, 129, 101, 75, 147, 233, 172, 184, 250, 143, 225, 16, 166, 242, 63, 152, 76, 206, 148, 157, 19, 47, 80, 149, 104, 185, 225, 110, 132, 37, 247, 25, 192, 73, 177, 208, 165, 165, 150, 188, 67, 170, 185, 121, 7, 224, 168, 118, 203, 86, 128, 117, 52, 128, 136, 189, 229, 193, 244, 83, 54, 4, 59, 161, 138, 220, 164, 104, 39, 22, 101, 160, 195, 129, 108, 228, 60, 106, 158, 251, 149, 60, 155, 251, 234, 144, 121, 121, 216, 233, 4, 70, 149, 90, 120, 213, 1, 52, 77, 31, 169, 80, 183, 13], "dtype": "uint8"}], "outputs": [{"out_buffer": [83, 245, 128, 115, 208, 85, 59, 104, 138, 89, 233, 72, 63, 51, 222, 39, 188, 76, 177, 101, 4, 173, 93, 36, 60, 137, 130, 116, 152, 130, 26, 39, 246, 91, 139, 147, 44, 33, 94, 96, 234, 174, 166, 90, 13, 41, 153, 157, 219, 72, 250, 143, 168, 197, 212, 179, 185, 195, 180, 27, 39, 66, 123, 241, 167, 101, 77, 9, 115, 50, 51, 186, 197, 198, 214, 157, 62, 189, 183, 133, 25, 130, 81, 53, 216, 181, 21, 48, 168, 87, 154, 120, 81, 55, 32, 133, 167, 161, 148, 110, 174, 116, 114, 155, 90, 25, 12, 19, 230, 189, 246, 41, 178, 148, 208, 237, 183, 103, 160, 169, 246, 228, 177, 233, 107, 104, 17, 90, 140, 247, 210, 250, 47, 236, 186, 161, 12, 109, 217, 42, 58, 225, 247, 10, 1, 184, 202, 56, 176, 248, 17, 220, 80, 226, 70, 33, 63, 246, 65, 33, 173, 68, 121, 5, 156, 159, 193, 134, 39, 88, 106, 51, 78, 131, 247, 50, 12, 125, 220, 137, 226, 252, 193, 122, 108, 61, 47, 56, 108, 243, 52, 82, 113, 196, 184, 225, 88, 158, 132, 71, 223, 34, 46, 92, 62, 192, 107, 246, 50, 77, 219, 70, 181, 110, 118, 128, 45, 42, 14, 223, 93, 203, 61, 224, 37, 104, 122, 53, 61, 227, 228, 11, 183, 216, 149, 104, 31, 194, 134, 92, 21, 70, 188, 1, 134, 76, 208, 52, 210, 203, 57, 141, 84, 89, 67, 72, 187, 57, 139, 227, 39, 144, 200, 221, 28, 123, 110, 127, 87, 98, 221, 127, 151, 48, 251, 91, 24, 5, 173, 202, 163, 226, 97, 122, 232, 174, 217, 217, 177, 77, 99, 23, 242, 21, 199, 11, 157, 16, 98, 238, 14, 15, 157, 176, 134, 102, 14, 123, 78, 239, 24, 150, 57, 116, 81, 213, 19, 208, 140, 69, 74, 247, 163, 224, 69, 14, 99, 135, 172, 30, 144, 254, 174, 255, 24, 190, 10, 104, 77, 24, 144, 149, 230, 86, 16, 149, 240, 198, 151, 186, 7, 220, 198, 78, 85, 153, 208, 203, 88, 136, 19, 81, 84, 244, 68, 63, 212, 81, 94, 36, 202, 173, 35, 80, 164, 164, 175, 254, 222, 127, 8, 211, 63, 113, 22, 64, 175, 156, 53, 101, 100, 202, 217, 227, 162, 115, 180, 201, 172, 134, 149, 7, 110, 85, 192, 41, 246, 171, 207, 183, 143, 52, 55, 160, 93, 187, 238, 249, 2, 249, 76, 130, 10, 59, 100, 224, 229, 208, 187, 226, 88, 128, 13, 135, 202, 11, 200, 108, 93, 124, 107, 180, 214, 51, 12, 52, 1, 155, 228, 205, 88, 75, 219, 11, 107, 23, 72, 40, 191, 177, 240, 235, 149, 112, 219, 159, 136, 107, 57, 122, 134, 28, 83, 109, 193, 69, 164, 97, 96, 232, 196, 77, 215, 48, 85, 120, 169, 114, 116, 190, 227, 138, 110, 67, 83, 170, 200, 250, 87, 207, 221, 203, 174, 206, 10, 160, 220, 186, 89, 190, 56, 86, 199, 172, 205, 92, 233, 232, 12, 63, 58, 155, 161, 160, 163, 100, 86, 58, 99, 211, 45, 161, 145, 134, 252, 255, 94, 36, 231, 142, 40, 141, 96, 77, 113, 124, 41, 219, 10, 139, 83, 93, 24, 102, 231, 207, 156, 46, 7, 162, 192, 6, 6, 124, 182, 46, 31, 157, 121, 6, 136, 213, 65, 137, 125, 50, 252, 242, 5, 143, 174, 188, 241, 24, 216, 40, 101, 106, 212, 128, 140, 54, 159, 191, 66, 128, 22, 226, 250, 255, 201, 247, 245, 117, 8, 236, 142, 141, 246, 153, 183, 212, 205, 57, 5, 69, 204, 58, 225, 128, 114, 251, 163, 232, 39, 48, 180, 68, 41, 228, 132, 125, 15, 155, 225, 134, 230, 179, 79, 157, 167, 152, 174, 193, 33, 153, 30, 92, 220, 242, 149, 33, 133, 238, 20, 132, 7, 148, 239, 60, 88, 126, 200, 173, 37, 186, 78, 81, 200, 79, 111, 28, 53, 243, 110, 107, 163, 136, 34, 46, 111, 15, 188, 205, 53, 180, 125, 100, 106, 12, 122, 241, 164, 81, 21, 214, 131, 243, 231, 197, 3, 47, 20, 62, 197, 142, 108, 219, 35, 185, 234, 245, 164, 25, 18, 169, 111, 231, 184, 212, 67, 114, 174, 151, 204, 154, 253, 244, 151, 36, 85, 253, 68, 92, 40, 204, 126, 66, 222, 175, 203, 82, 90, 223, 199, 158, 72, 73, 235, 154, 40, 127, 123, 233, 181, 217, 164, 58, 188, 236, 94, 26, 209, 81, 107, 40, 154, 213, 73, 218, 105, 140, 74, 122, 114, 71, 59, 218, 250, 67, 118, 198, 213, 23, 150, 202, 43, 178, 65, 84, 161, 225, 70, 204, 254, 231, 202, 130, 218, 130, 157, 122, 82, 253, 124, 45, 110, 252, 193, 224, 186, 161, 223, 215, 75, 29, 83, 202, 67, 148, 104, 38, 182, 242, 2, 174, 9, 143, 8, 20, 145, 215, 182, 81, 192, 183, 202, 111, 62, 236, 243, 128, 108, 160, 77, 153, 154, 183, 240, 111, 104, 101, 58, 157, 26, 61, 230, 128, 109, 7, 171, 111, 92, 75, 31, 228, 198, 188, 22, 195, 27, 19, 164, 24, 12, 194, 224, 231, 81, 241, 48, 137, 141, 159, 96, 1, 141, 251, 194, 81, 39, 60, 96, 124, 5, 18, 237, 238, 76, 116, 151, 64, 226, 3, 44, 219, 179, 169, 85, 164, 59, 50, 242, 170, 47, 134, 244, 146, 150, 146, 153, 126, 154, 180, 108, 22, 83, 71, 5, 112, 30, 239, 89, 13, 192, 103, 179, 49, 107, 98, 236, 208, 175, 106, 151, 70, 30, 145, 123, 218, 8, 230, 63, 182, 78, 47, 90, 90, 105, 67, 188, 85, 70, 134, 248, 31, 87, 137, 52, 169, 127, 138, 203, 127, 119, 66, 26, 62, 11, 172, 201, 251, 196, 94, 117, 35, 91, 151, 216, 233, 154, 95, 60, 126, 147, 27, 195, 149, 97, 4, 106, 195, 100, 4, 21, 111, 134, 134, 39, 22, 251, 185, 106, 165, 135, 42, 254, 203, 178, 224, 86, 175, 72, 242], "dtype": "uint8"}]}}
{"kernel_name": "bitwiseor_uint8", "prompt": "/*\nThis is the implementation of an AIE kernel that performs a bitwise OR operation on 2 input vectors and stores the result in 1 output vector.\n>>> bitwiseor_uint8([172, 10, 127, 140, 47, 170, 196, 151], [71, 199, 185, 73, 184, 134, 66, 74])\n[239, 207, 255, 205, 191, 174, 198, 223]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer1 size: 1024\nin_buffer2 size: 1024\nout_buffer size: 1024\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid bitwiseor_uint8(uint8_t *in_buffer1, uint8_t *in_buffer2, uint8_t *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr uint32_t nbytes = 1024;\n    for (uint32_t i = 0; i < nbytes; ++i) {\n        out_buffer[i] = in_buffer1[i] | in_buffer2[i];\n    }\n}", "program_code": "extern \"C\" {\n    void bitwiseor_uint8_wrapper(uint8_t *in_buffer1, uint8_t *in_buffer2, uint8_t *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        bitwiseor_uint8(in_buffer1, in_buffer2, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer1": [172, 10, 127, 140, 47, 170, 196, 151, 117, 166, 22, 183, 192, 204, 33, 216, 67, 179, 78, 154, 251, 82, 162, 219, 195, 118, 125, 139, 103, 125, 229, 216, 9, 164, 116, 108, 211, 222, 161, 159, 21, 81, 89, 165, 242, 214, 102, 98, 36, 183, 5, 112, 87, 58, 43, 76, 70, 60, 75, 228, 216, 189, 132, 14, 88, 154, 178, 246, 140, 205, 204, 69, 58, 57, 41, 98, 193, 66, 72, 122, 230, 125, 174, 202, 39, 74, 234, 207, 87, 168, 101, 135, 174, 200, 223, 122, 88, 94, 107, 145, 81, 139, 141, 100, 165, 230, 243, 236, 25, 66, 9, 214, 77, 107, 47, 18, 72, 152, 95, 86, 9, 27, 78, 22, 148, 151, 238, 165, 115, 8, 45, 5, 208, 19, 69, 94, 243, 146, 38, 213, 197, 30, 8, 245, 254, 71, 53, 199, 79, 7, 238, 35, 175, 29, 185, 222, 192, 9, 190, 222, 82, 187, 134, 250, 99, 96, 62, 121, 216, 167, 149, 204, 177, 124, 8, 205, 243, 130, 35, 118, 29, 3, 62, 133, 147, 194, 208, 199, 147, 12, 203, 173, 142, 59, 71, 30, 167, 97, 123, 184, 32, 221, 209, 163, 193, 63, 148, 9, 205, 178, 36, 185, 74, 145, 137, 127, 210, 213, 241, 32, 162, 52, 194, 31, 218, 151, 133, 202, 194, 28, 27, 244, 72, 39, 106, 151, 224, 61, 121, 163, 234, 185, 67, 254, 121, 179, 47, 203, 45, 52, 198, 114, 171, 166, 188, 183, 68, 198, 116, 28, 216, 111, 55, 34, 227, 132, 145, 128, 168, 157, 34, 128, 104, 207, 4, 164, 231, 250, 82, 53, 92, 29, 158, 133, 23, 81, 38, 38, 78, 178, 156, 232, 13, 234, 56, 244, 98, 239, 157, 17, 241, 240, 98, 79, 121, 153, 241, 132, 177, 16, 231, 105, 198, 139, 174, 42, 236, 47, 115, 186, 181, 8, 92, 31, 186, 241, 156, 120, 83, 225, 111, 1, 81, 0, 231, 65, 245, 151, 178, 231, 111, 106, 25, 169, 239, 106, 15, 57, 104, 69, 248, 35, 57, 177, 170, 102, 47, 52, 167, 119, 236, 174, 171, 11, 187, 192, 43, 174, 161, 219, 53, 82, 220, 175, 91, 91, 80, 1, 33, 128, 247, 44, 192, 142, 233, 191, 80, 99, 202, 154, 155, 53, 38, 28, 93, 140, 75, 54, 83, 121, 106, 248, 145, 170, 63, 214, 9, 84, 48, 72, 112, 203, 200, 95, 162, 68, 17, 6, 253, 6, 179, 125, 245, 196, 155, 31, 26, 47, 68, 29, 167, 127, 242, 120, 53, 244, 55, 147, 162, 131, 148, 75, 41, 204, 243, 203, 254, 100, 27, 50, 167, 180, 36, 244, 148, 232, 183, 215, 64, 78, 15, 20, 106, 143, 36, 96, 119, 148, 198, 133, 121, 227, 172, 146, 62, 186, 91, 158, 159, 23, 59, 178, 40, 207, 170, 135, 86, 141, 139, 65, 28, 117, 145, 188, 172, 85, 55, 5, 168, 48, 34, 52, 81, 49, 245, 95, 35, 69, 166, 65, 199, 169, 56, 83, 50, 163, 22, 23, 243, 192, 197, 100, 94, 95, 92, 155, 169, 197, 156, 44, 210, 94, 110, 121, 3, 0, 161, 219, 24, 113, 215, 114, 159, 178, 142, 131, 214, 36, 245, 116, 172, 162, 231, 153, 24, 48, 99, 209, 248, 93, 63, 249, 249, 131, 73, 209, 224, 98, 134, 249, 119, 42, 190, 118, 130, 205, 3, 13, 250, 112, 81, 67, 14, 231, 39, 215, 154, 149, 43, 127, 115, 201, 96, 64, 189, 127, 233, 29, 5, 0, 54, 8, 10, 138, 247, 19, 113, 114, 9, 102, 72, 43, 50, 198, 250, 186, 51, 197, 30, 127, 141, 4, 92, 23, 216, 207, 75, 187, 214, 27, 123, 130, 240, 100, 30, 121, 25, 76, 176, 98, 88, 103, 81, 62, 222, 102, 225, 163, 35, 13, 106, 222, 122, 17, 235, 123, 248, 107, 16, 195, 167, 129, 55, 82, 218, 69, 177, 174, 55, 176, 144, 227, 202, 12, 145, 148, 92, 119, 221, 209, 144, 240, 67, 50, 202, 75, 130, 155, 149, 243, 133, 14, 91, 174, 234, 41, 124, 12, 24, 58, 252, 208, 235, 193, 58, 113, 147, 36, 220, 70, 21, 10, 91, 230, 237, 86, 144, 24, 71, 43, 188, 141, 81, 104, 51, 101, 2, 11, 104, 219, 170, 2, 187, 163, 215, 51, 129, 189, 33, 80, 52, 173, 165, 32, 56, 97, 183, 182, 20, 101, 215, 128, 132, 22, 74, 38, 91, 197, 67, 19, 161, 229, 46, 174, 148, 215, 101, 42, 182, 37, 150, 115, 181, 133, 141, 184, 196, 37, 5, 188, 137, 57, 42, 232, 105, 53, 212, 77, 190, 171, 94, 30, 185, 51, 1, 24, 53, 125, 37, 125, 98, 133, 173, 2, 131, 210, 145, 3, 62, 31, 69, 94, 32, 40, 180, 226, 172, 53, 188, 107, 151, 217, 73, 13, 253, 81, 246, 112, 247, 235, 110, 40, 73, 174, 63, 72, 53, 144, 193, 19, 12, 127, 147, 95, 178, 102, 101, 72, 15, 144, 151, 154, 197, 98, 229, 194, 25, 127, 146, 248, 84, 144, 163, 180, 224, 27, 57, 67, 233, 60, 228, 236, 91, 231, 243, 61, 31, 24, 174, 14, 207, 118, 114, 96, 159, 254, 114, 4, 61, 174, 216, 195, 159, 131, 250, 237, 18, 17, 179, 139, 104, 191, 29, 252, 211, 36, 76, 86, 170, 91, 196, 205, 13, 85, 208, 121, 11, 109, 105, 109, 102, 129, 101, 75, 147, 233, 172, 184, 250, 143, 225, 16, 166, 242, 63, 152, 76, 206, 148, 157, 19, 47, 80, 149, 104, 185, 225, 110, 132, 37, 247, 25, 192, 73, 177, 208, 165, 165, 150, 188, 67, 170, 185, 121, 7, 224, 168, 118, 203, 86, 128, 117, 52, 128, 136, 189, 229, 193, 244, 83, 54, 4, 59, 161, 138, 220, 164, 104, 39, 22, 101, 160, 195, 129, 108, 228, 60, 106, 158, 251, 149, 60, 155, 251, 234, 144, 121, 121, 216, 233, 4, 70, 149, 90, 120, 213, 1, 52, 77, 31, 169, 80, 183, 13], "dtype": "uint8"}, {"in_buffer2": [71, 199, 185, 73, 184, 134, 66, 74, 152, 148, 42, 98, 79, 66, 54, 158, 41, 152, 201, 191, 18, 201, 195, 109, 40, 62, 226, 224, 182, 109, 174, 34, 207, 64, 85, 26, 11, 59, 92, 76, 166, 208, 165, 23, 111, 56, 233, 145, 93, 205, 162, 90, 249, 111, 67, 151, 129, 212, 67, 141, 223, 250, 6, 147, 118, 167, 155, 8, 44, 43, 56, 167, 216, 224, 13, 248, 125, 61, 240, 166, 24, 224, 44, 82, 67, 112, 113, 110, 210, 171, 164, 56, 239, 19, 132, 229, 3, 223, 41, 36, 234, 136, 24, 94, 204, 6, 230, 24, 230, 215, 148, 111, 35, 49, 234, 251, 214, 22, 85, 228, 254, 179, 165, 66, 189, 186, 98, 206, 197, 78, 122, 137, 215, 10, 50, 180, 43, 74, 171, 114, 32, 120, 168, 25, 11, 92, 125, 25, 104, 54, 99, 235, 212, 24, 49, 90, 138, 132, 216, 182, 182, 182, 32, 120, 235, 111, 180, 165, 245, 84, 215, 125, 62, 66, 38, 156, 254, 150, 231, 111, 130, 61, 222, 232, 125, 157, 9, 2, 35, 153, 41, 27, 246, 32, 130, 211, 79, 149, 157, 217, 132, 182, 42, 151, 170, 178, 31, 53, 227, 111, 199, 51, 17, 23, 217, 174, 68, 108, 221, 148, 116, 172, 206, 181, 75, 81, 105, 29, 150, 176, 145, 67, 62, 213, 35, 35, 42, 61, 104, 39, 67, 129, 8, 137, 237, 180, 17, 73, 8, 138, 251, 41, 177, 138, 178, 151, 251, 143, 95, 131, 95, 27, 116, 46, 15, 138, 107, 218, 162, 216, 184, 178, 87, 243, 12, 108, 59, 203, 221, 3, 39, 145, 93, 31, 199, 187, 249, 9, 187, 65, 4, 138, 237, 21, 219, 27, 238, 17, 59, 173, 177, 2, 199, 64, 209, 195, 167, 133, 39, 92, 61, 20, 178, 241, 85, 169, 224, 186, 97, 243, 191, 44, 236, 239, 43, 34, 43, 227, 86, 162, 167, 98, 133, 88, 20, 83, 125, 33, 24, 233, 13, 133, 186, 199, 86, 232, 248, 50, 51, 18, 243, 45, 36, 216, 189, 4, 0, 199, 197, 43, 203, 197, 47, 203, 34, 185, 164, 118, 197, 32, 83, 57, 126, 3, 228, 223, 181, 247, 104, 88, 254, 212, 177, 241, 80, 188, 150, 237, 190, 117, 182, 155, 136, 128, 84, 180, 189, 104, 190, 152, 129, 152, 38, 8, 209, 232, 156, 200, 112, 101, 41, 42, 35, 185, 1, 128, 120, 53, 25, 159, 91, 13, 229, 12, 168, 64, 197, 147, 116, 23, 248, 178, 36, 139, 230, 60, 176, 176, 13, 254, 25, 166, 40, 239, 67, 81, 107, 68, 103, 223, 44, 157, 252, 225, 216, 173, 35, 59, 31, 137, 114, 140, 65, 221, 30, 87, 4, 151, 29, 84, 55, 192, 241, 70, 233, 186, 33, 205, 232, 246, 146, 160, 219, 79, 17, 213, 226, 141, 221, 208, 241, 101, 84, 57, 95, 54, 253, 81, 184, 53, 2, 10, 242, 56, 69, 88, 170, 47, 101, 245, 55, 140, 99, 194, 241, 44, 146, 207, 145, 117, 51, 83, 189, 253, 106, 189, 115, 66, 181, 142, 125, 111, 110, 97, 248, 91, 216, 55, 58, 85, 45, 56, 174, 167, 129, 29, 65, 39, 238, 213, 21, 203, 218, 14, 150, 110, 113, 14, 158, 237, 53, 111, 145, 238, 226, 124, 198, 218, 209, 79, 199, 131, 137, 225, 18, 145, 67, 178, 92, 163, 245, 249, 43, 88, 180, 96, 83, 212, 30, 158, 177, 129, 250, 45, 41, 51, 225, 138, 93, 88, 81, 6, 174, 244, 199, 218, 149, 69, 55, 17, 201, 240, 107, 190, 89, 175, 236, 173, 242, 73, 133, 122, 224, 121, 37, 116, 219, 55, 85, 173, 73, 65, 93, 137, 28, 78, 103, 155, 235, 63, 140, 229, 209, 96, 246, 182, 105, 218, 134, 253, 186, 247, 48, 120, 128, 143, 134, 55, 214, 95, 189, 116, 63, 126, 191, 169, 16, 4, 11, 232, 106, 24, 105, 67, 164, 224, 32, 35, 94, 98, 73, 5, 24, 30, 174, 58, 116, 26, 37, 194, 191, 148, 175, 225, 195, 164, 236, 81, 51, 101, 136, 231, 136, 176, 42, 98, 184, 35, 82, 165, 91, 243, 155, 150, 93, 108, 30, 83, 123, 151, 191, 212, 238, 202, 11, 133, 87, 244, 4, 161, 160, 160, 3, 0, 147, 8, 102, 223, 72, 18, 214, 79, 199, 217, 6, 70, 87, 100, 234, 108, 13, 204, 76, 204, 58, 125, 165, 226, 81, 214, 133, 47, 120, 148, 12, 174, 116, 39, 234, 243, 183, 235, 196, 116, 64, 59, 175, 203, 170, 192, 123, 220, 130, 43, 55, 164, 211, 234, 201, 25, 225, 134, 242, 32, 179, 188, 58, 170, 93, 25, 187, 14, 47, 91, 225, 214, 81, 2, 65, 28, 37, 78, 80, 20, 157, 155, 54, 210, 127, 27, 245, 68, 205, 168, 132, 22, 182, 196, 120, 227, 212, 145, 6, 122, 91, 42, 182, 83, 194, 28, 53, 135, 130, 88, 39, 200, 47, 184, 108, 61, 66, 254, 186, 141, 154, 201, 95, 5, 150, 113, 165, 0, 225, 172, 118, 136, 108, 2, 55, 207, 172, 18, 71, 207, 185, 187, 47, 181, 127, 55, 150, 139, 148, 189, 206, 4, 164, 37, 221, 167, 153, 64, 191, 92, 145, 22, 30, 173, 203, 194, 172, 26, 245, 114, 132, 74, 130, 226, 70, 52, 55, 207, 33, 238, 211, 198, 44, 177, 29, 132, 183, 219, 108, 88, 180, 51, 43, 100, 101, 227, 2, 145, 118, 105, 115, 191, 144, 18, 83, 38, 215, 117, 109, 235, 46, 34, 21, 114, 52, 51, 190, 20, 37, 158, 190, 58, 42, 181, 65, 241, 124, 58, 15, 245, 31, 171, 111, 9, 91, 55, 71, 218, 184, 252, 37, 192, 240, 252, 195, 203, 7, 18, 91, 236, 195, 173, 3, 59, 191, 87, 107, 168, 191, 193, 97, 180, 23, 70, 45, 90, 231, 234, 213, 170, 55, 53, 44, 91, 21, 48, 35, 207, 191, 94, 124, 92, 141, 59, 72, 80, 187, 80, 57, 160], "dtype": "uint8"}], "outputs": [{"out_buffer": [239, 207, 255, 205, 191, 174, 198, 223, 253, 182, 62, 247, 207, 206, 55, 222, 107, 187, 207, 191, 251, 219, 227, 255, 235, 126, 255, 235, 247, 125, 239, 250, 207, 228, 117, 126, 219, 255, 253, 223, 183, 209, 253, 183, 255, 254, 239, 243, 125, 255, 167, 122, 255, 127, 107, 223, 199, 252, 75, 237, 223, 255, 134, 159, 126, 191, 187, 254, 172, 239, 252, 231, 250, 249, 45, 250, 253, 127, 248, 254, 254, 253, 174, 218, 103, 122, 251, 239, 215, 171, 229, 191, 239, 219, 223, 255, 91, 223, 107, 181, 251, 139, 157, 126, 237, 230, 247, 252, 255, 215, 157, 255, 111, 123, 239, 251, 222, 158, 95, 246, 255, 187, 239, 86, 189, 191, 238, 239, 247, 78, 127, 141, 215, 27, 119, 254, 251, 218, 175, 247, 229, 126, 168, 253, 255, 95, 125, 223, 111, 55, 239, 235, 255, 29, 185, 222, 202, 141, 254, 254, 246, 191, 166, 250, 235, 111, 190, 253, 253, 247, 215, 253, 191, 126, 46, 221, 255, 150, 231, 127, 159, 63, 254, 237, 255, 223, 217, 199, 179, 157, 235, 191, 254, 59, 199, 223, 239, 245, 255, 249, 164, 255, 251, 183, 235, 191, 159, 61, 239, 255, 231, 187, 91, 151, 217, 255, 214, 253, 253, 180, 246, 188, 206, 191, 219, 215, 237, 223, 214, 188, 155, 247, 126, 247, 107, 183, 234, 61, 121, 167, 235, 185, 75, 255, 253, 183, 63, 203, 45, 190, 255, 123, 187, 174, 190, 183, 255, 207, 127, 159, 223, 127, 119, 46, 239, 142, 251, 218, 170, 221, 186, 178, 127, 255, 12, 236, 255, 251, 223, 55, 127, 157, 223, 159, 215, 251, 255, 47, 255, 243, 156, 234, 237, 255, 251, 255, 238, 255, 191, 189, 241, 242, 231, 79, 249, 219, 247, 133, 183, 92, 255, 125, 246, 251, 255, 171, 236, 191, 115, 251, 191, 44, 252, 255, 187, 243, 191, 251, 87, 227, 239, 99, 213, 88, 247, 83, 253, 183, 186, 239, 111, 239, 187, 239, 255, 234, 255, 59, 123, 87, 251, 47, 61, 249, 191, 102, 47, 247, 231, 127, 239, 239, 175, 203, 187, 249, 175, 254, 229, 251, 119, 123, 254, 175, 255, 223, 245, 247, 105, 216, 255, 252, 241, 255, 249, 191, 214, 239, 254, 255, 191, 191, 174, 156, 93, 188, 255, 126, 255, 249, 235, 248, 183, 170, 255, 254, 157, 220, 112, 109, 121, 235, 235, 255, 163, 196, 121, 55, 253, 159, 251, 125, 245, 204, 187, 95, 223, 191, 116, 31, 255, 255, 246, 251, 247, 252, 183, 179, 175, 255, 157, 239, 41, 239, 243, 219, 255, 100, 127, 255, 175, 189, 252, 245, 220, 237, 183, 255, 95, 207, 127, 156, 107, 223, 62, 119, 119, 151, 223, 213, 127, 227, 253, 214, 255, 186, 123, 223, 255, 247, 187, 178, 251, 207, 187, 215, 246, 141, 223, 209, 253, 117, 213, 189, 255, 119, 255, 85, 184, 53, 34, 62, 243, 57, 245, 95, 171, 111, 231, 245, 247, 173, 123, 211, 243, 175, 150, 223, 243, 245, 247, 119, 255, 255, 126, 191, 251, 199, 189, 174, 255, 127, 110, 121, 251, 91, 249, 255, 58, 117, 255, 122, 191, 183, 143, 159, 215, 39, 255, 245, 189, 235, 255, 159, 158, 126, 115, 223, 254, 253, 63, 255, 249, 239, 235, 253, 230, 250, 215, 255, 247, 171, 191, 247, 146, 221, 67, 191, 254, 243, 245, 251, 47, 255, 183, 247, 219, 213, 63, 255, 243, 201, 250, 109, 189, 127, 233, 159, 93, 88, 119, 14, 174, 254, 247, 219, 245, 119, 63, 119, 201, 251, 123, 254, 251, 191, 255, 237, 254, 127, 141, 126, 252, 127, 253, 255, 219, 191, 215, 191, 123, 195, 253, 237, 30, 127, 127, 223, 251, 127, 220, 231, 209, 126, 254, 246, 233, 251, 167, 253, 250, 255, 122, 121, 235, 255, 254, 127, 214, 223, 191, 245, 63, 126, 255, 237, 177, 174, 63, 248, 250, 251, 235, 79, 181, 244, 124, 119, 223, 243, 217, 245, 91, 62, 238, 123, 246, 155, 181, 243, 191, 158, 255, 239, 235, 173, 252, 93, 59, 127, 252, 247, 235, 241, 58, 115, 187, 39, 222, 231, 95, 251, 219, 246, 253, 126, 158, 91, 127, 191, 191, 221, 255, 234, 59, 229, 87, 255, 108, 251, 170, 162, 187, 163, 215, 59, 231, 255, 105, 82, 246, 239, 231, 249, 62, 103, 247, 246, 254, 109, 223, 204, 204, 222, 122, 127, 255, 231, 83, 215, 165, 239, 126, 190, 156, 255, 117, 47, 254, 247, 183, 251, 245, 245, 205, 187, 239, 239, 175, 252, 251, 253, 170, 235, 127, 181, 215, 239, 255, 187, 255, 158, 251, 51, 179, 188, 63, 255, 125, 125, 251, 143, 175, 91, 227, 214, 209, 3, 127, 31, 101, 94, 112, 60, 189, 251, 190, 247, 255, 123, 247, 221, 205, 173, 253, 87, 246, 244, 255, 235, 254, 185, 79, 254, 127, 106, 183, 211, 195, 31, 61, 255, 147, 95, 183, 238, 111, 248, 111, 189, 215, 254, 255, 239, 255, 203, 95, 127, 150, 249, 245, 144, 227, 188, 246, 155, 125, 67, 255, 255, 236, 254, 95, 239, 251, 191, 63, 189, 255, 63, 223, 255, 246, 253, 223, 254, 246, 37, 253, 175, 217, 195, 191, 223, 251, 255, 30, 189, 251, 203, 236, 191, 253, 254, 215, 110, 206, 246, 238, 127, 247, 207, 45, 255, 211, 255, 47, 253, 125, 237, 247, 219, 109, 91, 183, 251, 175, 252, 255, 239, 227, 145, 246, 251, 127, 191, 220, 222, 215, 191, 215, 127, 125, 255, 110, 187, 245, 126, 180, 55, 255, 29, 229, 223, 191, 250, 175, 181, 215, 253, 127, 186, 191, 253, 31, 235, 239, 127, 219, 119, 199, 255, 188, 252, 173, 253, 245, 253, 247, 219, 55, 22, 123, 237, 203, 253, 167, 123, 191, 87, 111, 168, 255, 193, 109, 244, 63, 110, 191, 251, 247, 254, 223, 251, 255, 181, 125, 123, 221, 249, 39, 207, 191, 94, 124, 221, 141, 63, 77, 95, 187, 80, 191, 173], "dtype": "uint8"}]}}
{"kernel_name": "bitwisexor_uint8", "prompt": "/*\nThis is the implementation of an AIE kernel that performs a bitwise XOR operation on 2 input vectors and stores the result in 1 output vector.\n>>> bitwisexor_uint8([172, 10, 127, 140, 47, 170, 196, 151], [71, 199, 185, 73, 184, 134, 66, 74])\n[235, 205, 198, 197, 151, 44, 134, 221]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer1 size: 1024\nin_buffer2 size: 1024\nout_buffer size: 1024\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid bitwisexor_uint8(uint8_t *in_buffer1, uint8_t *in_buffer2, uint8_t *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t nbytes = 1024;\n    for (uint32_t i = 0; i < nbytes; ++i) {  \n        out_buffer[i] = in_buffer1[i] ^ in_buffer2[i];\n    }\n}", "program_code": "extern \"C\" {\n    void bitwisexor_uint8_wrapper(uint8_t *in_buffer1, uint8_t *in_buffer2, uint8_t *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        bitwisexor_uint8(in_buffer1, in_buffer2, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer1": [172, 10, 127, 140, 47, 170, 196, 151, 117, 166, 22, 183, 192, 204, 33, 216, 67, 179, 78, 154, 251, 82, 162, 219, 195, 118, 125, 139, 103, 125, 229, 216, 9, 164, 116, 108, 211, 222, 161, 159, 21, 81, 89, 165, 242, 214, 102, 98, 36, 183, 5, 112, 87, 58, 43, 76, 70, 60, 75, 228, 216, 189, 132, 14, 88, 154, 178, 246, 140, 205, 204, 69, 58, 57, 41, 98, 193, 66, 72, 122, 230, 125, 174, 202, 39, 74, 234, 207, 87, 168, 101, 135, 174, 200, 223, 122, 88, 94, 107, 145, 81, 139, 141, 100, 165, 230, 243, 236, 25, 66, 9, 214, 77, 107, 47, 18, 72, 152, 95, 86, 9, 27, 78, 22, 148, 151, 238, 165, 115, 8, 45, 5, 208, 19, 69, 94, 243, 146, 38, 213, 197, 30, 8, 245, 254, 71, 53, 199, 79, 7, 238, 35, 175, 29, 185, 222, 192, 9, 190, 222, 82, 187, 134, 250, 99, 96, 62, 121, 216, 167, 149, 204, 177, 124, 8, 205, 243, 130, 35, 118, 29, 3, 62, 133, 147, 194, 208, 199, 147, 12, 203, 173, 142, 59, 71, 30, 167, 97, 123, 184, 32, 221, 209, 163, 193, 63, 148, 9, 205, 178, 36, 185, 74, 145, 137, 127, 210, 213, 241, 32, 162, 52, 194, 31, 218, 151, 133, 202, 194, 28, 27, 244, 72, 39, 106, 151, 224, 61, 121, 163, 234, 185, 67, 254, 121, 179, 47, 203, 45, 52, 198, 114, 171, 166, 188, 183, 68, 198, 116, 28, 216, 111, 55, 34, 227, 132, 145, 128, 168, 157, 34, 128, 104, 207, 4, 164, 231, 250, 82, 53, 92, 29, 158, 133, 23, 81, 38, 38, 78, 178, 156, 232, 13, 234, 56, 244, 98, 239, 157, 17, 241, 240, 98, 79, 121, 153, 241, 132, 177, 16, 231, 105, 198, 139, 174, 42, 236, 47, 115, 186, 181, 8, 92, 31, 186, 241, 156, 120, 83, 225, 111, 1, 81, 0, 231, 65, 245, 151, 178, 231, 111, 106, 25, 169, 239, 106, 15, 57, 104, 69, 248, 35, 57, 177, 170, 102, 47, 52, 167, 119, 236, 174, 171, 11, 187, 192, 43, 174, 161, 219, 53, 82, 220, 175, 91, 91, 80, 1, 33, 128, 247, 44, 192, 142, 233, 191, 80, 99, 202, 154, 155, 53, 38, 28, 93, 140, 75, 54, 83, 121, 106, 248, 145, 170, 63, 214, 9, 84, 48, 72, 112, 203, 200, 95, 162, 68, 17, 6, 253, 6, 179, 125, 245, 196, 155, 31, 26, 47, 68, 29, 167, 127, 242, 120, 53, 244, 55, 147, 162, 131, 148, 75, 41, 204, 243, 203, 254, 100, 27, 50, 167, 180, 36, 244, 148, 232, 183, 215, 64, 78, 15, 20, 106, 143, 36, 96, 119, 148, 198, 133, 121, 227, 172, 146, 62, 186, 91, 158, 159, 23, 59, 178, 40, 207, 170, 135, 86, 141, 139, 65, 28, 117, 145, 188, 172, 85, 55, 5, 168, 48, 34, 52, 81, 49, 245, 95, 35, 69, 166, 65, 199, 169, 56, 83, 50, 163, 22, 23, 243, 192, 197, 100, 94, 95, 92, 155, 169, 197, 156, 44, 210, 94, 110, 121, 3, 0, 161, 219, 24, 113, 215, 114, 159, 178, 142, 131, 214, 36, 245, 116, 172, 162, 231, 153, 24, 48, 99, 209, 248, 93, 63, 249, 249, 131, 73, 209, 224, 98, 134, 249, 119, 42, 190, 118, 130, 205, 3, 13, 250, 112, 81, 67, 14, 231, 39, 215, 154, 149, 43, 127, 115, 201, 96, 64, 189, 127, 233, 29, 5, 0, 54, 8, 10, 138, 247, 19, 113, 114, 9, 102, 72, 43, 50, 198, 250, 186, 51, 197, 30, 127, 141, 4, 92, 23, 216, 207, 75, 187, 214, 27, 123, 130, 240, 100, 30, 121, 25, 76, 176, 98, 88, 103, 81, 62, 222, 102, 225, 163, 35, 13, 106, 222, 122, 17, 235, 123, 248, 107, 16, 195, 167, 129, 55, 82, 218, 69, 177, 174, 55, 176, 144, 227, 202, 12, 145, 148, 92, 119, 221, 209, 144, 240, 67, 50, 202, 75, 130, 155, 149, 243, 133, 14, 91, 174, 234, 41, 124, 12, 24, 58, 252, 208, 235, 193, 58, 113, 147, 36, 220, 70, 21, 10, 91, 230, 237, 86, 144, 24, 71, 43, 188, 141, 81, 104, 51, 101, 2, 11, 104, 219, 170, 2, 187, 163, 215, 51, 129, 189, 33, 80, 52, 173, 165, 32, 56, 97, 183, 182, 20, 101, 215, 128, 132, 22, 74, 38, 91, 197, 67, 19, 161, 229, 46, 174, 148, 215, 101, 42, 182, 37, 150, 115, 181, 133, 141, 184, 196, 37, 5, 188, 137, 57, 42, 232, 105, 53, 212, 77, 190, 171, 94, 30, 185, 51, 1, 24, 53, 125, 37, 125, 98, 133, 173, 2, 131, 210, 145, 3, 62, 31, 69, 94, 32, 40, 180, 226, 172, 53, 188, 107, 151, 217, 73, 13, 253, 81, 246, 112, 247, 235, 110, 40, 73, 174, 63, 72, 53, 144, 193, 19, 12, 127, 147, 95, 178, 102, 101, 72, 15, 144, 151, 154, 197, 98, 229, 194, 25, 127, 146, 248, 84, 144, 163, 180, 224, 27, 57, 67, 233, 60, 228, 236, 91, 231, 243, 61, 31, 24, 174, 14, 207, 118, 114, 96, 159, 254, 114, 4, 61, 174, 216, 195, 159, 131, 250, 237, 18, 17, 179, 139, 104, 191, 29, 252, 211, 36, 76, 86, 170, 91, 196, 205, 13, 85, 208, 121, 11, 109, 105, 109, 102, 129, 101, 75, 147, 233, 172, 184, 250, 143, 225, 16, 166, 242, 63, 152, 76, 206, 148, 157, 19, 47, 80, 149, 104, 185, 225, 110, 132, 37, 247, 25, 192, 73, 177, 208, 165, 165, 150, 188, 67, 170, 185, 121, 7, 224, 168, 118, 203, 86, 128, 117, 52, 128, 136, 189, 229, 193, 244, 83, 54, 4, 59, 161, 138, 220, 164, 104, 39, 22, 101, 160, 195, 129, 108, 228, 60, 106, 158, 251, 149, 60, 155, 251, 234, 144, 121, 121, 216, 233, 4, 70, 149, 90, 120, 213, 1, 52, 77, 31, 169, 80, 183, 13], "dtype": "uint8"}, {"in_buffer2": [71, 199, 185, 73, 184, 134, 66, 74, 152, 148, 42, 98, 79, 66, 54, 158, 41, 152, 201, 191, 18, 201, 195, 109, 40, 62, 226, 224, 182, 109, 174, 34, 207, 64, 85, 26, 11, 59, 92, 76, 166, 208, 165, 23, 111, 56, 233, 145, 93, 205, 162, 90, 249, 111, 67, 151, 129, 212, 67, 141, 223, 250, 6, 147, 118, 167, 155, 8, 44, 43, 56, 167, 216, 224, 13, 248, 125, 61, 240, 166, 24, 224, 44, 82, 67, 112, 113, 110, 210, 171, 164, 56, 239, 19, 132, 229, 3, 223, 41, 36, 234, 136, 24, 94, 204, 6, 230, 24, 230, 215, 148, 111, 35, 49, 234, 251, 214, 22, 85, 228, 254, 179, 165, 66, 189, 186, 98, 206, 197, 78, 122, 137, 215, 10, 50, 180, 43, 74, 171, 114, 32, 120, 168, 25, 11, 92, 125, 25, 104, 54, 99, 235, 212, 24, 49, 90, 138, 132, 216, 182, 182, 182, 32, 120, 235, 111, 180, 165, 245, 84, 215, 125, 62, 66, 38, 156, 254, 150, 231, 111, 130, 61, 222, 232, 125, 157, 9, 2, 35, 153, 41, 27, 246, 32, 130, 211, 79, 149, 157, 217, 132, 182, 42, 151, 170, 178, 31, 53, 227, 111, 199, 51, 17, 23, 217, 174, 68, 108, 221, 148, 116, 172, 206, 181, 75, 81, 105, 29, 150, 176, 145, 67, 62, 213, 35, 35, 42, 61, 104, 39, 67, 129, 8, 137, 237, 180, 17, 73, 8, 138, 251, 41, 177, 138, 178, 151, 251, 143, 95, 131, 95, 27, 116, 46, 15, 138, 107, 218, 162, 216, 184, 178, 87, 243, 12, 108, 59, 203, 221, 3, 39, 145, 93, 31, 199, 187, 249, 9, 187, 65, 4, 138, 237, 21, 219, 27, 238, 17, 59, 173, 177, 2, 199, 64, 209, 195, 167, 133, 39, 92, 61, 20, 178, 241, 85, 169, 224, 186, 97, 243, 191, 44, 236, 239, 43, 34, 43, 227, 86, 162, 167, 98, 133, 88, 20, 83, 125, 33, 24, 233, 13, 133, 186, 199, 86, 232, 248, 50, 51, 18, 243, 45, 36, 216, 189, 4, 0, 199, 197, 43, 203, 197, 47, 203, 34, 185, 164, 118, 197, 32, 83, 57, 126, 3, 228, 223, 181, 247, 104, 88, 254, 212, 177, 241, 80, 188, 150, 237, 190, 117, 182, 155, 136, 128, 84, 180, 189, 104, 190, 152, 129, 152, 38, 8, 209, 232, 156, 200, 112, 101, 41, 42, 35, 185, 1, 128, 120, 53, 25, 159, 91, 13, 229, 12, 168, 64, 197, 147, 116, 23, 248, 178, 36, 139, 230, 60, 176, 176, 13, 254, 25, 166, 40, 239, 67, 81, 107, 68, 103, 223, 44, 157, 252, 225, 216, 173, 35, 59, 31, 137, 114, 140, 65, 221, 30, 87, 4, 151, 29, 84, 55, 192, 241, 70, 233, 186, 33, 205, 232, 246, 146, 160, 219, 79, 17, 213, 226, 141, 221, 208, 241, 101, 84, 57, 95, 54, 253, 81, 184, 53, 2, 10, 242, 56, 69, 88, 170, 47, 101, 245, 55, 140, 99, 194, 241, 44, 146, 207, 145, 117, 51, 83, 189, 253, 106, 189, 115, 66, 181, 142, 125, 111, 110, 97, 248, 91, 216, 55, 58, 85, 45, 56, 174, 167, 129, 29, 65, 39, 238, 213, 21, 203, 218, 14, 150, 110, 113, 14, 158, 237, 53, 111, 145, 238, 226, 124, 198, 218, 209, 79, 199, 131, 137, 225, 18, 145, 67, 178, 92, 163, 245, 249, 43, 88, 180, 96, 83, 212, 30, 158, 177, 129, 250, 45, 41, 51, 225, 138, 93, 88, 81, 6, 174, 244, 199, 218, 149, 69, 55, 17, 201, 240, 107, 190, 89, 175, 236, 173, 242, 73, 133, 122, 224, 121, 37, 116, 219, 55, 85, 173, 73, 65, 93, 137, 28, 78, 103, 155, 235, 63, 140, 229, 209, 96, 246, 182, 105, 218, 134, 253, 186, 247, 48, 120, 128, 143, 134, 55, 214, 95, 189, 116, 63, 126, 191, 169, 16, 4, 11, 232, 106, 24, 105, 67, 164, 224, 32, 35, 94, 98, 73, 5, 24, 30, 174, 58, 116, 26, 37, 194, 191, 148, 175, 225, 195, 164, 236, 81, 51, 101, 136, 231, 136, 176, 42, 98, 184, 35, 82, 165, 91, 243, 155, 150, 93, 108, 30, 83, 123, 151, 191, 212, 238, 202, 11, 133, 87, 244, 4, 161, 160, 160, 3, 0, 147, 8, 102, 223, 72, 18, 214, 79, 199, 217, 6, 70, 87, 100, 234, 108, 13, 204, 76, 204, 58, 125, 165, 226, 81, 214, 133, 47, 120, 148, 12, 174, 116, 39, 234, 243, 183, 235, 196, 116, 64, 59, 175, 203, 170, 192, 123, 220, 130, 43, 55, 164, 211, 234, 201, 25, 225, 134, 242, 32, 179, 188, 58, 170, 93, 25, 187, 14, 47, 91, 225, 214, 81, 2, 65, 28, 37, 78, 80, 20, 157, 155, 54, 210, 127, 27, 245, 68, 205, 168, 132, 22, 182, 196, 120, 227, 212, 145, 6, 122, 91, 42, 182, 83, 194, 28, 53, 135, 130, 88, 39, 200, 47, 184, 108, 61, 66, 254, 186, 141, 154, 201, 95, 5, 150, 113, 165, 0, 225, 172, 118, 136, 108, 2, 55, 207, 172, 18, 71, 207, 185, 187, 47, 181, 127, 55, 150, 139, 148, 189, 206, 4, 164, 37, 221, 167, 153, 64, 191, 92, 145, 22, 30, 173, 203, 194, 172, 26, 245, 114, 132, 74, 130, 226, 70, 52, 55, 207, 33, 238, 211, 198, 44, 177, 29, 132, 183, 219, 108, 88, 180, 51, 43, 100, 101, 227, 2, 145, 118, 105, 115, 191, 144, 18, 83, 38, 215, 117, 109, 235, 46, 34, 21, 114, 52, 51, 190, 20, 37, 158, 190, 58, 42, 181, 65, 241, 124, 58, 15, 245, 31, 171, 111, 9, 91, 55, 71, 218, 184, 252, 37, 192, 240, 252, 195, 203, 7, 18, 91, 236, 195, 173, 3, 59, 191, 87, 107, 168, 191, 193, 97, 180, 23, 70, 45, 90, 231, 234, 213, 170, 55, 53, 44, 91, 21, 48, 35, 207, 191, 94, 124, 92, 141, 59, 72, 80, 187, 80, 57, 160], "dtype": "uint8"}], "outputs": [{"out_buffer": [235, 205, 198, 197, 151, 44, 134, 221, 237, 50, 60, 213, 143, 142, 23, 70, 106, 43, 135, 37, 233, 155, 97, 182, 235, 72, 159, 107, 209, 16, 75, 250, 198, 228, 33, 118, 216, 229, 253, 211, 179, 129, 252, 178, 157, 238, 143, 243, 121, 122, 167, 42, 174, 85, 104, 219, 199, 232, 8, 105, 7, 71, 130, 157, 46, 61, 41, 254, 160, 230, 244, 226, 226, 217, 36, 154, 188, 127, 184, 220, 254, 157, 130, 152, 100, 58, 155, 161, 133, 3, 193, 191, 65, 219, 91, 159, 91, 129, 66, 181, 187, 3, 149, 58, 105, 224, 21, 244, 255, 149, 157, 185, 110, 90, 197, 233, 158, 142, 10, 178, 247, 168, 235, 84, 41, 45, 140, 107, 182, 70, 87, 140, 7, 25, 119, 234, 216, 216, 141, 167, 229, 102, 160, 236, 245, 27, 72, 222, 39, 49, 141, 200, 123, 5, 136, 132, 74, 141, 102, 104, 228, 13, 166, 130, 136, 15, 138, 220, 45, 243, 66, 177, 143, 62, 46, 81, 13, 20, 196, 25, 159, 62, 224, 109, 238, 95, 217, 197, 176, 149, 226, 182, 120, 27, 197, 205, 232, 244, 230, 97, 164, 107, 251, 52, 107, 141, 139, 60, 46, 221, 227, 138, 91, 134, 80, 209, 150, 185, 44, 180, 214, 152, 12, 170, 145, 198, 236, 215, 84, 172, 138, 183, 118, 242, 73, 180, 202, 0, 17, 132, 169, 56, 75, 119, 148, 7, 62, 130, 37, 190, 61, 91, 26, 44, 14, 32, 191, 73, 43, 159, 135, 116, 67, 12, 236, 14, 250, 90, 10, 69, 154, 50, 63, 60, 8, 200, 220, 49, 143, 54, 123, 140, 195, 154, 208, 234, 223, 47, 245, 243, 152, 98, 224, 255, 227, 239, 140, 254, 166, 188, 64, 242, 165, 15, 168, 90, 86, 1, 150, 76, 218, 125, 116, 122, 251, 131, 12, 149, 18, 73, 10, 36, 176, 240, 145, 211, 183, 155, 5, 67, 200, 99, 212, 88, 243, 18, 136, 182, 170, 14, 98, 239, 163, 110, 185, 130, 247, 11, 91, 87, 11, 14, 29, 105, 23, 98, 47, 243, 98, 92, 39, 107, 132, 192, 153, 121, 143, 216, 100, 251, 102, 107, 162, 172, 191, 132, 229, 246, 73, 216, 9, 248, 113, 127, 185, 3, 198, 142, 116, 239, 45, 174, 174, 156, 9, 56, 246, 94, 237, 225, 235, 96, 183, 162, 238, 62, 149, 156, 64, 45, 89, 225, 235, 230, 163, 196, 105, 51, 228, 153, 232, 112, 16, 200, 51, 95, 223, 188, 48, 10, 95, 205, 214, 243, 211, 200, 135, 35, 175, 125, 141, 237, 1, 35, 176, 154, 149, 32, 124, 237, 139, 41, 216, 21, 76, 69, 148, 236, 95, 199, 125, 152, 43, 82, 58, 55, 115, 3, 219, 209, 78, 35, 93, 212, 215, 0, 122, 83, 119, 225, 169, 18, 243, 128, 187, 82, 180, 0, 86, 145, 237, 16, 197, 133, 243, 99, 202, 84, 16, 5, 32, 62, 163, 9, 176, 7, 137, 106, 195, 180, 240, 37, 91, 145, 195, 143, 132, 216, 98, 181, 246, 55, 227, 162, 54, 38, 218, 135, 41, 162, 175, 49, 0, 24, 251, 91, 121, 236, 34, 36, 250, 74, 49, 21, 15, 158, 151, 3, 27, 161, 185, 105, 61, 151, 142, 94, 18, 223, 102, 176, 10, 150, 104, 109, 171, 173, 38, 184, 87, 182, 176, 169, 55, 151, 144, 92, 64, 191, 166, 211, 164, 186, 37, 191, 147, 183, 201, 65, 53, 225, 194, 72, 154, 109, 148, 76, 8, 151, 88, 88, 103, 14, 164, 126, 48, 201, 228, 55, 62, 119, 129, 219, 89, 120, 163, 21, 223, 104, 236, 54, 8, 126, 188, 110, 253, 187, 144, 140, 131, 182, 50, 195, 173, 237, 2, 55, 126, 215, 91, 93, 212, 130, 128, 94, 40, 208, 136, 121, 165, 240, 208, 41, 74, 105, 107, 244, 126, 92, 198, 156, 26, 245, 8, 44, 101, 236, 161, 170, 60, 88, 250, 251, 163, 79, 53, 116, 124, 84, 131, 179, 217, 245, 91, 44, 100, 113, 246, 129, 176, 49, 58, 154, 244, 79, 41, 141, 144, 93, 43, 95, 116, 55, 99, 113, 16, 19, 43, 7, 142, 227, 78, 249, 192, 112, 176, 58, 142, 75, 60, 188, 3, 89, 191, 162, 56, 224, 85, 255, 108, 122, 10, 162, 184, 163, 68, 59, 231, 98, 105, 66, 226, 226, 98, 249, 62, 39, 224, 210, 254, 9, 218, 76, 200, 218, 112, 91, 254, 39, 18, 197, 36, 202, 86, 58, 152, 121, 17, 13, 92, 214, 33, 152, 113, 241, 205, 131, 107, 238, 175, 124, 242, 229, 168, 195, 94, 145, 7, 167, 119, 178, 191, 152, 75, 19, 178, 164, 15, 215, 120, 100, 217, 139, 130, 89, 98, 4, 192, 1, 127, 3, 96, 16, 112, 60, 41, 121, 154, 231, 195, 112, 98, 157, 132, 165, 121, 71, 64, 180, 143, 8, 186, 185, 79, 212, 100, 98, 131, 195, 3, 15, 57, 248, 17, 7, 149, 174, 74, 240, 99, 173, 213, 100, 127, 239, 127, 11, 70, 122, 4, 137, 241, 144, 66, 24, 150, 147, 85, 65, 222, 243, 72, 254, 28, 40, 74, 134, 48, 173, 209, 57, 89, 253, 230, 221, 81, 250, 214, 33, 224, 9, 65, 131, 32, 223, 107, 251, 12, 188, 120, 73, 196, 165, 232, 142, 87, 110, 206, 180, 236, 111, 243, 2, 44, 187, 3, 191, 39, 220, 116, 233, 209, 90, 9, 19, 39, 218, 135, 220, 159, 108, 227, 129, 208, 155, 76, 39, 220, 220, 199, 187, 196, 90, 61, 126, 70, 155, 244, 28, 176, 22, 73, 13, 229, 215, 15, 234, 143, 16, 215, 77, 63, 144, 182, 140, 24, 75, 199, 127, 144, 97, 199, 175, 140, 124, 173, 125, 21, 61, 55, 152, 49, 22, 96, 77, 73, 113, 167, 83, 152, 65, 14, 8, 124, 64, 13, 80, 43, 44, 179, 161, 114, 214, 78, 81, 221, 165, 85, 34, 205, 217, 39, 137, 42, 4, 4, 137, 140, 15, 5, 79, 18, 0, 142, 173], "dtype": "uint8"}]}}
{"kernel_name": "cast_bfloat16_to_float32", "prompt": "/*\nThis AIE kernel casts a bfloat16 input vector of length 512 into an output vector of float32, performing an elementwise conversion.\n>>> cast_bfloat16_to_float32([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875])\n[1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 512\nout_buffer size: 512\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid cast_bfloat16_to_float32(bfloat16 *in_buffer, float *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t N = 512;\n    for (int i = 0; i < N; i++) {\n        out_buffer[i] = float(in_buffer[i]);\n    }\n}", "program_code": "extern \"C\" {\n    void cast_bfloat16_to_float32_wrapper(bfloat16 *in_buffer, float *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        cast_bfloat16_to_float32(in_buffer, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625, 0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625, 0.671875, 0.408203125, -0.76953125, 0.5390625, -0.67578125, 0.03173828125, -0.63671875, 0.67578125, 0.578125, -0.2080078125, 0.396484375, -1.09375, -1.4921875, 0.439453125, 0.1669921875, 0.63671875, 2.390625, 0.9453125, -0.9140625, 1.1171875, -1.3125, -0.4609375, -0.068359375, 1.7109375, -0.74609375, -0.828125, -0.0986328125, -0.6640625, 1.125, -1.078125, -1.1484375, -0.4375, -0.498046875, 1.9296875, 0.94921875, 0.08740234375, -1.2265625, 0.84375, -1.0, -1.546875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.65234375, -1.03125, 0.6796875, -0.8046875, -0.69140625, -0.455078125, 0.0174560546875, -0.353515625, -1.375, -0.64453125, -2.21875, 0.625, -1.6015625, -1.1015625, 0.05224609375, -0.73828125, 1.546875, -1.2890625, 0.267578125, -0.039306640625, -1.171875, 0.5234375, -0.171875, 0.7734375, 0.82421875, 2.15625, 1.3359375, -0.369140625, -0.2392578125, 1.1015625, 0.65625, 0.640625, -1.6171875, -0.0242919921875, -0.73828125, 0.279296875, -0.09814453125, 0.91015625, 0.31640625, 0.78515625, -0.466796875, -0.9453125, -0.41015625, -0.0169677734375, 0.37890625, 2.265625, -0.042236328125, -0.95703125, -0.345703125, -0.462890625, 0.482421875, -1.5390625, 0.0634765625, 0.15625, 0.232421875, -0.59765625, -0.23828125, -1.421875, -0.494140625, -0.54296875, 0.416015625, -1.15625, 0.78125, 1.4921875, -2.0625, 0.42578125, 0.67578125, -0.63671875, -0.396484375, -0.1328125, -0.296875, -0.30859375, -1.6796875, 1.1484375, 1.078125, -0.8125, -1.46875, 0.51953125, -0.57421875, 0.1416015625, -0.318359375, 0.69140625, 0.6953125, -0.7265625, -1.3828125, -1.5859375, 0.609375, -1.1875, -0.5078125, -0.59765625, -0.052490234375, -1.9375, 0.1884765625, 0.5234375, 0.08837890625, -0.310546875, 0.09716796875, 0.3984375, -2.765625, 1.953125, 0.390625, -0.65234375, -0.390625, 0.494140625, -0.1162109375, -2.03125, 2.0625, -0.1103515625, 1.0234375, -0.69140625, 1.5390625, 0.287109375, 0.609375, -1.046875, 1.2109375, 0.69140625, 1.3046875, -0.62890625, -0.48046875, 2.296875, -1.0625, -0.1357421875, 1.140625, 0.09765625, 0.58203125, -0.400390625, 0.369140625, -1.3046875, 1.65625, -0.1181640625, -0.6796875, 0.66796875, -0.4609375, -1.3359375, -1.34375, 0.6953125, -0.1591796875, -0.1337890625, 1.078125, -1.125, -0.73046875, -0.384765625, 0.09423828125, -0.042236328125, -0.287109375, -0.0615234375, -0.107421875, -0.71875, -0.8125, 0.275390625, -0.890625, -1.15625, -0.3125, -0.1572265625, 2.25, -0.703125, 0.94140625, 0.74609375, -1.1875, 0.7734375, -1.1875, -2.65625, 0.60546875, -1.7578125, 0.451171875, -0.68359375, 1.65625, 1.0703125, -0.453125, -0.6875, -1.2109375, -0.44140625, -0.28125, -0.365234375, 0.15625, 0.578125, 0.349609375, -0.765625, -1.4375, 1.3671875, -0.6875, -0.65234375, -0.51953125, -1.84375, -0.478515625, -0.48046875, 0.62109375, 0.69921875, 0.0037689208984375, 0.93359375, 0.33984375, -0.015625, 0.1611328125, -0.1904296875, -0.39453125, -0.267578125, -1.125, 0.28125, -0.9921875, 0.83984375, -0.2490234375, 0.049560546875, 0.494140625, 0.64453125, -1.5703125, -0.20703125, 0.87890625, -1.6953125, 0.38671875, -2.25, -1.0234375, 0.03857421875, -1.65625, -0.984375, -1.46875, 1.6484375, 0.1640625, 0.56640625, -0.22265625, -0.353515625, -1.6171875, -0.291015625, -0.76171875, 0.859375, 1.140625, 1.46875, 0.8515625, -0.59765625, -1.1171875, 0.765625, 0.35546875, -1.765625, 0.35546875, 0.81640625, 0.058837890625, -0.1845703125, -0.80859375, -1.4453125, 0.80078125, -0.30859375, -0.2333984375, 1.734375, 0.68359375, 0.37109375, 0.1416015625, 1.5234375, 1.71875, 0.9296875, 0.58203125, -2.09375, 0.12353515625, -0.1298828125, 0.09375, 0.94140625, -2.734375, -0.5703125, 0.26953125, -0.466796875, -1.4140625, 0.8671875, 0.27734375, -0.97265625, 0.314453125, 0.8203125, 0.005279541015625, 0.80078125, 0.078125, -0.39453125, -1.15625, -0.0859375, 0.1943359375, 0.875, -0.115234375, 0.45703125, -0.96484375, -0.78125, -0.1103515625, -1.0546875, 0.8203125, 0.462890625, 0.279296875, 0.33984375, 2.015625, -0.46875, -2.203125, 0.19921875, -0.050537109375, -0.515625, -0.98046875, -0.439453125, 0.181640625, -0.50390625, 2.40625, -0.9609375, -0.79296875, -2.28125, 0.251953125, -2.015625, -0.5390625, -0.275390625, -0.7109375, 1.7421875, 0.99609375, 1.3203125, -0.8828125, 1.125, 0.49609375, 0.76953125, 1.03125, -0.91015625, -0.423828125, 0.86328125, -2.65625, 1.515625, 0.5546875, -0.045654296875, 0.220703125, -1.03125, -0.349609375, 1.1015625, 1.296875, 2.703125, -0.07373046875, -0.66015625, -0.515625, -1.015625, -0.07763671875, 0.3828125, -0.0341796875, 1.09375, -0.234375, -0.34765625, -0.58203125, -1.6328125, -1.5703125, -1.1796875, 1.3046875, 0.89453125, 1.375], "dtype": "bfloat16"}], "outputs": [{"out_buffer": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625, 0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625, 0.671875, 0.408203125, -0.76953125, 0.5390625, -0.67578125, 0.03173828125, -0.63671875, 0.67578125, 0.578125, -0.2080078125, 0.396484375, -1.09375, -1.4921875, 0.439453125, 0.1669921875, 0.63671875, 2.390625, 0.9453125, -0.9140625, 1.1171875, -1.3125, -0.4609375, -0.068359375, 1.7109375, -0.74609375, -0.828125, -0.0986328125, -0.6640625, 1.125, -1.078125, -1.1484375, -0.4375, -0.498046875, 1.9296875, 0.94921875, 0.08740234375, -1.2265625, 0.84375, -1.0, -1.546875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.65234375, -1.03125, 0.6796875, -0.8046875, -0.69140625, -0.455078125, 0.0174560546875, -0.353515625, -1.375, -0.64453125, -2.21875, 0.625, -1.6015625, -1.1015625, 0.05224609375, -0.73828125, 1.546875, -1.2890625, 0.267578125, -0.039306640625, -1.171875, 0.5234375, -0.171875, 0.7734375, 0.82421875, 2.15625, 1.3359375, -0.369140625, -0.2392578125, 1.1015625, 0.65625, 0.640625, -1.6171875, -0.0242919921875, -0.73828125, 0.279296875, -0.09814453125, 0.91015625, 0.31640625, 0.78515625, -0.466796875, -0.9453125, -0.41015625, -0.0169677734375, 0.37890625, 2.265625, -0.042236328125, -0.95703125, -0.345703125, -0.462890625, 0.482421875, -1.5390625, 0.0634765625, 0.15625, 0.232421875, -0.59765625, -0.23828125, -1.421875, -0.494140625, -0.54296875, 0.416015625, -1.15625, 0.78125, 1.4921875, -2.0625, 0.42578125, 0.67578125, -0.63671875, -0.396484375, -0.1328125, -0.296875, -0.30859375, -1.6796875, 1.1484375, 1.078125, -0.8125, -1.46875, 0.51953125, -0.57421875, 0.1416015625, -0.318359375, 0.69140625, 0.6953125, -0.7265625, -1.3828125, -1.5859375, 0.609375, -1.1875, -0.5078125, -0.59765625, -0.052490234375, -1.9375, 0.1884765625, 0.5234375, 0.08837890625, -0.310546875, 0.09716796875, 0.3984375, -2.765625, 1.953125, 0.390625, -0.65234375, -0.390625, 0.494140625, -0.1162109375, -2.03125, 2.0625, -0.1103515625, 1.0234375, -0.69140625, 1.5390625, 0.287109375, 0.609375, -1.046875, 1.2109375, 0.69140625, 1.3046875, -0.62890625, -0.48046875, 2.296875, -1.0625, -0.1357421875, 1.140625, 0.09765625, 0.58203125, -0.400390625, 0.369140625, -1.3046875, 1.65625, -0.1181640625, -0.6796875, 0.66796875, -0.4609375, -1.3359375, -1.34375, 0.6953125, -0.1591796875, -0.1337890625, 1.078125, -1.125, -0.73046875, -0.384765625, 0.09423828125, -0.042236328125, -0.287109375, -0.0615234375, -0.107421875, -0.71875, -0.8125, 0.275390625, -0.890625, -1.15625, -0.3125, -0.1572265625, 2.25, -0.703125, 0.94140625, 0.74609375, -1.1875, 0.7734375, -1.1875, -2.65625, 0.60546875, -1.7578125, 0.451171875, -0.68359375, 1.65625, 1.0703125, -0.453125, -0.6875, -1.2109375, -0.44140625, -0.28125, -0.365234375, 0.15625, 0.578125, 0.349609375, -0.765625, -1.4375, 1.3671875, -0.6875, -0.65234375, -0.51953125, -1.84375, -0.478515625, -0.48046875, 0.62109375, 0.69921875, 0.0037689208984375, 0.93359375, 0.33984375, -0.015625, 0.1611328125, -0.1904296875, -0.39453125, -0.267578125, -1.125, 0.28125, -0.9921875, 0.83984375, -0.2490234375, 0.049560546875, 0.494140625, 0.64453125, -1.5703125, -0.20703125, 0.87890625, -1.6953125, 0.38671875, -2.25, -1.0234375, 0.03857421875, -1.65625, -0.984375, -1.46875, 1.6484375, 0.1640625, 0.56640625, -0.22265625, -0.353515625, -1.6171875, -0.291015625, -0.76171875, 0.859375, 1.140625, 1.46875, 0.8515625, -0.59765625, -1.1171875, 0.765625, 0.35546875, -1.765625, 0.35546875, 0.81640625, 0.058837890625, -0.1845703125, -0.80859375, -1.4453125, 0.80078125, -0.30859375, -0.2333984375, 1.734375, 0.68359375, 0.37109375, 0.1416015625, 1.5234375, 1.71875, 0.9296875, 0.58203125, -2.09375, 0.12353515625, -0.1298828125, 0.09375, 0.94140625, -2.734375, -0.5703125, 0.26953125, -0.466796875, -1.4140625, 0.8671875, 0.27734375, -0.97265625, 0.314453125, 0.8203125, 0.005279541015625, 0.80078125, 0.078125, -0.39453125, -1.15625, -0.0859375, 0.1943359375, 0.875, -0.115234375, 0.45703125, -0.96484375, -0.78125, -0.1103515625, -1.0546875, 0.8203125, 0.462890625, 0.279296875, 0.33984375, 2.015625, -0.46875, -2.203125, 0.19921875, -0.050537109375, -0.515625, -0.98046875, -0.439453125, 0.181640625, -0.50390625, 2.40625, -0.9609375, -0.79296875, -2.28125, 0.251953125, -2.015625, -0.5390625, -0.275390625, -0.7109375, 1.7421875, 0.99609375, 1.3203125, -0.8828125, 1.125, 0.49609375, 0.76953125, 1.03125, -0.91015625, -0.423828125, 0.86328125, -2.65625, 1.515625, 0.5546875, -0.045654296875, 0.220703125, -1.03125, -0.349609375, 1.1015625, 1.296875, 2.703125, -0.07373046875, -0.66015625, -0.515625, -1.015625, -0.07763671875, 0.3828125, -0.0341796875, 1.09375, -0.234375, -0.34765625, -0.58203125, -1.6328125, -1.5703125, -1.1796875, 1.3046875, 0.89453125, 1.375], "dtype": "float32"}]}}
{"kernel_name": "cast_bfloat16_to_int8", "prompt": "/*\nThis AIE kernel casts each element of a bfloat16 vector input to int8, performing rounding to nearest integer and saturating to the int8 value range [-128, 127]. The output is a vector of int8.\n>>> cast_bfloat16_to_int8([123.5, 28.0, 68.5, 157.0, 131.0, -68.5, 66.5, -10.625])\n[124, 28, 68, 127, 127, -68, 66, -11]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid cast_bfloat16_to_int8(bfloat16 *input, int8_t *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n    for (int i = 0; i < N; ++i) {\n        float x = float(input[i]);\n        int xi = int(x);\n        int floor_x;\n        if (x >= 0.0f) {\n            floor_x = xi;\n        } else {\n            if (float(xi) == x) {\n                floor_x = xi;\n            } else {\n                floor_x = xi - 1;\n            }\n        }\n        float frac = x - float(floor_x);\n        int r;\n        if (frac < 0.5f) {\n            r = floor_x;\n        } else if (frac > 0.5f) {\n            r = floor_x + 1;\n        } else {\n            r = (floor_x & 1) == 0 ? floor_x : (floor_x + 1);\n        }\n        if (r > 127)      r = 127;\n        else if (r < -128) r = -128;\n        output[i] = int8_t(r);\n    }\n}", "program_code": "extern \"C\" {\n    void cast_bfloat16_to_int8_wrapper(bfloat16 *input, int8_t *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        cast_bfloat16_to_int8(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [123.5, 28.0, 68.5, 157.0, 131.0, -68.5, 66.5, -10.625, -7.21875, 28.75, 10.0625, 102.0, 53.25, 8.5, 31.125, 23.375, 104.5, -14.375, 21.875, -59.75, -179.0, 45.75, 60.5, -52.0, 159.0, -102.0, 3.203125, -13.125, 107.5, 103.0, 10.875, 26.5, -62.25, -139.0, -24.375, 10.9375, 86.0, 84.0, -27.125, -21.125, -73.5, -99.5, -119.5, 137.0, -35.75, -30.625, -87.5, 54.5, -113.0, -14.875, -62.75, 27.125, -35.75, -82.5, -1.9765625, 30.0, 4.65625, 21.125, -44.5, -25.375, -47.0, -25.125, -57.0, -121.0, 12.4375, -28.125, -114.0, 32.5, -63.5, 3.640625, 51.0, 9.0, 80.0, -86.5, 28.125, -48.0, -61.0, -40.5, -21.75, 3.9375, -81.5, 63.0, 32.5, -107.5, 104.0, 133.0, 82.5, -12.625, -75.0, 74.0, -28.25, 85.5, 14.5625, 68.5, 25.0, 49.5, 0.734375, 125.0, 8.875, 28.125, 132.0, -94.5, -89.0, 68.0, -82.0, 136.0, -29.0, -52.25, 135.0, 103.5, 131.0, 63.5, -60.25, 134.0, -18.75, 56.25, 66.5, -10.875, 43.0, 64.5, 26.375, -77.0, 20.875, 93.0, -48.5, -10.5, -30.5, 129.0, 47.0, 28.5, -54.0, 37.75, -47.25, 2.234375, -44.5, 47.25, 40.25, -14.5625, 27.75, -76.5, -104.5, 30.75, 11.6875, 44.5, 167.0, 66.0, -64.0, 78.0, -92.0, -32.25, -4.78125, 120.0, -52.25, -57.75, -6.90625, -46.5, 79.0, -75.5, -80.5, -30.625, -34.75, 135.0, 66.5, 6.125, -86.0, 59.0, -70.0, -108.0, 83.0, 22.125, 64.5, 22.25, 60.0, -45.5, -72.5, 47.75, -56.25, -48.25, -31.875, 1.2265625, -24.75, -96.0, -45.0, -156.0, 43.75, -112.0, -77.5, 3.65625, -51.75, 108.0, -90.5, 18.75, -2.75, -82.0, 36.75, -12.0, 54.0, 57.75, 151.0, 93.5, -25.875, -16.75, 77.0, 45.75, 44.75, -113.0, -1.703125, -51.75, 19.625, -6.875, 63.75, 22.25, 55.0, -32.75, -66.0, -28.75, -1.1953125, 26.5, 158.0, -2.953125, -67.0, -24.25, -32.5, 33.75, -108.0, 4.4375, 10.9375, 16.25, -41.75, -16.625, -99.5, -34.5, -38.0, 29.125, -81.0, 54.75, 104.5, -145.0, 29.875, 47.5, -44.5, -27.75, -9.3125, -20.875, -21.625, -117.5, 80.5, 75.5, -57.0, -102.5, 36.5, -40.25, 9.9375, -22.375, 48.5, 48.75], "dtype": "bfloat16"}], "outputs": [{"output": [124, 28, 68, 127, 127, -68, 66, -11, -7, 29, 10, 102, 53, 8, 31, 23, 104, -14, 22, -60, -128, 46, 60, -52, 127, -102, 3, -13, 108, 103, 11, 26, -62, -128, -24, 11, 86, 84, -27, -21, -74, -100, -120, 127, -36, -31, -88, 54, -113, -15, -63, 27, -36, -82, -2, 30, 5, 21, -44, -25, -47, -25, -57, -121, 12, -28, -114, 32, -64, 4, 51, 9, 80, -86, 28, -48, -61, -40, -22, 4, -82, 63, 32, -108, 104, 127, 82, -13, -75, 74, -28, 86, 15, 68, 25, 50, 1, 125, 9, 28, 127, -94, -89, 68, -82, 127, -29, -52, 127, 104, 127, 64, -60, 127, -19, 56, 66, -11, 43, 64, 26, -77, 21, 93, -48, -10, -30, 127, 47, 28, -54, 38, -47, 2, -44, 47, 40, -15, 28, -76, -104, 31, 12, 44, 127, 66, -64, 78, -92, -32, -5, 120, -52, -58, -7, -46, 79, -76, -80, -31, -35, 127, 66, 6, -86, 59, -70, -108, 83, 22, 64, 22, 60, -46, -72, 48, -56, -48, -32, 1, -25, -96, -45, -128, 44, -112, -78, 4, -52, 108, -90, 19, -3, -82, 37, -12, 54, 58, 127, 94, -26, -17, 77, 46, 45, -113, -2, -52, 20, -7, 64, 22, 55, -33, -66, -29, -1, 26, 127, -3, -67, -24, -32, 34, -108, 4, 11, 16, -42, -17, -100, -34, -38, 29, -81, 55, 104, -128, 30, 48, -44, -28, -9, -21, -22, -118, 80, 76, -57, -102, 36, -40, 10, -22, 48, 49], "dtype": "int8"}]}}
{"kernel_name": "cast_float32_to_bfloat16", "prompt": "/*\nThis AIE kernel casts a float32 input vector of length 256 to bfloat16, writing results to the output buffer.\n>>> cast_float32_to_bfloat16([8.82026195526123, 2.000786066055298, 4.89369010925293, 11.204465866088867, 9.337789535522461, -4.886389255523682, 4.750442028045654, -0.756786048412323])\n[8.8125, 2.0, 4.90625, 11.1875, 9.3125, -4.875, 4.75, -0.7578125]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 256\nout_buffer size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid cast_float32_to_bfloat16(float *in_buffer, bfloat16 *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t N = 256;\n    for (int i = 0; i < N; ++i) {\n        out_buffer[i] = bfloat16(in_buffer[i]);\n    }\n}", "program_code": "extern \"C\" {\n    void cast_float32_to_bfloat16_wrapper(float *in_buffer, bfloat16 *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        cast_float32_to_bfloat16(in_buffer, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [8.82026195526123, 2.000786066055298, 4.89369010925293, 11.204465866088867, 9.337789535522461, -4.886389255523682, 4.750442028045654, -0.756786048412323, -0.5160942673683167, 2.052992582321167, 0.7202178835868835, 7.27136754989624, 3.8051886558532715, 0.608375072479248, 2.219316244125366, 1.6683716773986816, 7.470395565032959, -1.0257912874221802, 1.5653384923934937, -4.27047872543335, -12.764948844909668, 3.2680928707122803, 4.322181224822998, -3.710825204849243, 11.348773002624512, -7.2718281745910645, 0.22879259288311005, -0.9359192252159119, 7.663896083831787, 7.3467936515808105, 0.7747371196746826, 1.890812635421753, -4.438928604125977, -9.903982162475586, -1.7395607233047485, 0.7817448377609253, 6.151453495025635, 6.011899471282959, -1.9366340637207031, -1.5115137100219727, -5.242764949798584, -7.1000895500183105, -8.531351089477539, 9.753876686096191, -2.5482609272003174, -2.190371513366699, -6.263976573944092, 3.8874518871307373, -8.069489479064941, -1.0637013912200928, -4.477332592010498, 1.9345124959945679, -2.554025650024414, -5.90316104888916, -0.14091114699840546, 2.1416592597961426, 0.3325861096382141, 1.5123594999313354, -3.1716103553771973, -1.8137058019638062, -3.362302303314209, -1.797765851020813, -4.065731525421143, -8.631413459777832, 0.8871307373046875, -2.0089046955108643, -8.150991439819336, 2.313911199569702, -4.536491870880127, 0.25972697138786316, 3.6454527378082275, 0.6449145674705505, 5.697003364562988, -6.174129009246826, 2.0117082595825195, -3.4240505695343018, -4.353985786437988, -2.8942482471466064, -1.557762622833252, 0.28082671761512756, -5.825749397277832, 4.504132270812988, 2.3283121585845947, -7.68121862411499, 7.441260814666748, 9.479445457458496, 5.893898010253906, -0.8996241688728333, -5.353763103485107, 5.272258758544922, -2.0158846378326416, 6.112225532531738, 1.041374921798706, 4.883195400238037, 1.781831979751587, 3.5328657627105713, 0.052500102669000626, 8.929352760314941, 0.6345604658126831, 2.009946823120117, 9.415753364562988, -6.738795280456543, -6.3524250984191895, 4.846983432769775, -5.865616798400879, 9.718106269836426, -2.0680949687957764, -3.737274169921875, 9.614709854125977, 7.402574062347412, 9.33779525756836, 4.530223369598389, -4.30612850189209, 9.550324440002441, -1.3400168418884277, 4.012281894683838, 4.736259937286377, -0.7750504612922668, 3.070396900177002, 4.6110334396362305, 1.8821276426315308, -5.49700403213501, 1.4911909103393555, 6.631929397583008, -3.47283935546875, -0.7481727004051208, -2.175767660140991, 9.246318817138672, 3.361473798751831, 2.037309169769287, -3.8495802879333496, 2.6962459087371826, -3.3716633319854736, 0.1591527909040451, -3.1792304515838623, 3.3821663856506348, 2.8829541206359863, -1.0414937734603882, 1.98003351688385, -5.465307712554932, -7.456287860870361, 2.196958541870117, 0.8333674669265747, 3.175157070159912, 11.91572380065918, 4.722397327423096, -4.564111232757568, 5.585081577301025, -6.5795369148254395, -2.3079230785369873, -0.3412080407142639, 8.566713333129883, -3.7237741947174072, -4.132192611694336, -0.4922626316547394, -3.3173913955688477, 5.633179664611816, -5.399657726287842, -5.7373433113098145, -2.1891002655029297, -2.4901623725891113, 9.647660255432129, 4.747104167938232, 0.437756210565567, -6.127177715301514, 4.22181510925293, -5.001076698303223, -7.723855495452881, 5.940148830413818, 1.584713101387024, 4.604294300079346, 1.593638300895691, 4.284152984619141, -3.2551279067993164, -5.1712141036987305, 3.407972574234009, -4.017048358917236, -3.447748899459839, -2.277662515640259, 0.0873957946896553, -1.7699695825576782, -6.874756336212158, -3.2180919647216797, -11.117015838623047, 3.126157283782959, -8.01028823852539, -5.52191686630249, 0.26082539558410645, -3.69781494140625, 7.715073108673096, -6.464284420013428, 1.3352543115615845, -0.19641409814357758, -5.84046745300293, 2.6163833141326904, -0.8577316403388977, 3.858952760696411, 4.117520809173584, 10.816179275512695, 6.6826395988464355, -1.8459092378616333, -1.1968958377838135, 5.498298168182373, 3.2763185501098633, 3.200657606124878, -8.0847806930542, -0.12163062393665314, -3.690154552459717, 1.3996230363845825, -0.4907519519329071, 4.550894737243652, 1.5860910415649414, 3.9316399097442627, -2.3320953845977783, -4.722231388092041, -2.050248384475708, -0.08510206639766693, 1.8957586288452148, 11.296545028686523, -0.2112857550382614, -4.779725074768066, -1.72990882396698, -2.3179798126220703, 2.407407283782959, -7.703985214233398, 0.31630995869636536, 0.7825326919555664, 1.160905122756958, -2.9865803718566895, -1.1896086931228638, -7.120304584503174, -2.466599464416504, -2.7143073081970215, 2.0802502632141113, -5.780911922454834, 3.9059906005859375, 7.4724225997924805, -10.34992504119873, 2.131293535232544, 3.38454008102417, -3.187185049057007, -1.9863591194152832, -0.6644029021263123, -1.4889544248580933, -1.5450648069381714, -8.380019187927246, 5.76165771484375, 5.398092746734619, -4.066821098327637, -7.332121849060059, 2.6053242683410645, -2.8789398670196533, 0.7097657918930054, -1.5966421365737915, 3.4576938152313232, 3.473745822906494], "dtype": "float32"}], "outputs": [{"out_buffer": [8.8125, 2.0, 4.90625, 11.1875, 9.3125, -4.875, 4.75, -0.7578125, -0.515625, 2.046875, 0.71875, 7.28125, 3.8125, 0.609375, 2.21875, 1.671875, 7.46875, -1.0234375, 1.5625, -4.28125, -12.75, 3.265625, 4.3125, -3.703125, 11.375, -7.28125, 0.228515625, -0.9375, 7.65625, 7.34375, 0.7734375, 1.890625, -4.4375, -9.875, -1.7421875, 0.78125, 6.15625, 6.0, -1.9375, -1.5078125, -5.25, -7.09375, -8.5625, 9.75, -2.546875, -2.1875, -6.25, 3.890625, -8.0625, -1.0625, -4.46875, 1.9375, -2.546875, -5.90625, -0.140625, 2.140625, 0.33203125, 1.515625, -3.171875, -1.8125, -3.359375, -1.796875, -4.0625, -8.625, 0.88671875, -2.015625, -8.125, 2.3125, -4.53125, 0.259765625, 3.640625, 0.64453125, 5.6875, -6.1875, 2.015625, -3.421875, -4.34375, -2.890625, -1.5546875, 0.28125, -5.8125, 4.5, 2.328125, -7.6875, 7.4375, 9.5, 5.90625, -0.8984375, -5.34375, 5.28125, -2.015625, 6.125, 1.0390625, 4.875, 1.78125, 3.53125, 0.052490234375, 8.9375, 0.6328125, 2.015625, 9.4375, -6.75, -6.34375, 4.84375, -5.875, 9.6875, -2.0625, -3.734375, 9.625, 7.40625, 9.3125, 4.53125, -4.3125, 9.5625, -1.34375, 4.0, 4.75, -0.7734375, 3.078125, 4.625, 1.8828125, -5.5, 1.4921875, 6.625, -3.46875, -0.75, -2.171875, 9.25, 3.359375, 2.03125, -3.84375, 2.703125, -3.375, 0.1591796875, -3.171875, 3.375, 2.890625, -1.0390625, 1.9765625, -5.46875, -7.46875, 2.203125, 0.83203125, 3.171875, 11.9375, 4.71875, -4.5625, 5.59375, -6.59375, -2.3125, -0.341796875, 8.5625, -3.71875, -4.125, -0.4921875, -3.3125, 5.625, -5.40625, -5.75, -2.1875, -2.484375, 9.625, 4.75, 0.4375, -6.125, 4.21875, -5.0, -7.71875, 5.9375, 1.5859375, 4.59375, 1.59375, 4.28125, -3.25, -5.15625, 3.40625, -4.03125, -3.453125, -2.28125, 0.08740234375, -1.7734375, -6.875, -3.21875, -11.125, 3.125, -8.0, -5.53125, 0.26171875, -3.703125, 7.71875, -6.46875, 1.3359375, -0.1962890625, -5.84375, 2.609375, -0.859375, 3.859375, 4.125, 10.8125, 6.6875, -1.84375, -1.1953125, 5.5, 3.28125, 3.203125, -8.0625, -0.12158203125, -3.6875, 1.3984375, -0.490234375, 4.5625, 1.5859375, 3.9375, -2.328125, -4.71875, -2.046875, -0.0849609375, 1.8984375, 11.3125, -0.2109375, -4.78125, -1.7265625, -2.3125, 2.40625, -7.71875, 0.31640625, 0.78125, 1.1640625, -2.984375, -1.1875, -7.125, -2.46875, -2.71875, 2.078125, -5.78125, 3.90625, 7.46875, -10.375, 2.125, 3.390625, -3.1875, -1.984375, -0.6640625, -1.4921875, -1.546875, -8.375, 5.75, 5.40625, -4.0625, -7.34375, 2.609375, -2.875, 0.7109375, -1.59375, 3.453125, 3.46875], "dtype": "bfloat16"}]}}
{"kernel_name": "cast_int8_to_int32", "prompt": "/*\nThis AIE kernel casts each element of a signed int8 input vector to signed int32, storing the result in the output buffer. The casting should preserve the sign.\n>>> cast_int8_to_int32([44, -118, -1, 12, -81, 42, 68, 23])\n[44, -118, -1, 12, -81, 42, 68, 23]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid cast_int8_to_int32(int8_t *input_vector, int32_t *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t VECTOR_SIZE = 256;\n    for (int i = 0; i < VECTOR_SIZE; i++) {\n        output_vector[i] = (int32_t)input_vector[i];\n    }\n}", "program_code": "extern \"C\" {\n    void cast_int8_to_int32_wrapper(int8_t *input_vector, int32_t *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        cast_int8_to_int32(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [44, -118, -1, 12, -81, 42, 68, 23, -11, 38, -106, 55, 64, 76, -95, 88, -61, 51, -50, 26, 123, -46, 34, 91, 67, -10, -3, 11, -25, -3, 101, 88, -119, 36, -12, -20, 83, 94, 33, 31, -107, -47, -39, 37, 114, 86, -26, -30, -92, 55, -123, -16, -41, -70, -85, -52, -58, -68, -53, 100, 88, 61, 4, -114, -40, 26, 50, 118, 12, 77, 76, -59, -70, -71, -87, -30, 65, -62, -56, -6, 102, -3, 46, 74, -89, -54, 106, 79, -41, 40, -27, 7, 46, 72, 95, -6, -40, -34, -21, 17, -47, 11, 13, -28, 37, 102, 115, 108, -103, -62, -119, 86, -51, -21, -81, -110, -56, 24, -33, -42, -119, -101, -50, -106, 20, 23, 110, 37, -13, -120, -83, -123, 80, -109, -59, -34, 115, 18, -90, 85, 69, -98, -120, 117, 126, -57, -75, 71, -49, -121, 110, -93, 47, -99, 57, 94, 64, -119, 62, 94, -46, 59, 6, 122, -29, -32, -66, -7, 88, 39, 21, 76, 49, -4, -120, 77, 115, 2, -93, -10, -99, -125, -66, 5, 19, 66, 80, 71, 19, -116, 75, 45, 14, -69, -57, -98, 39, -31, -5, 56, -96, 93, 81, 35, 65, -65, 127, 20, -119, 77, 50, -92, 57, -54, 17, 9, -1, 82, 85, 113, -96, 34, -76, 66, -97, 90, 23, 5, 74, 66, -100, -101, 116, -56, -89, -22, 23, 96, -67, -7, 35, 106, 57, -61, 126, -7, 51, -81, 75, -83, -76, 70, -14, 43, 38, 60], "dtype": "int8"}], "outputs": [{"output_vector": [44, -118, -1, 12, -81, 42, 68, 23, -11, 38, -106, 55, 64, 76, -95, 88, -61, 51, -50, 26, 123, -46, 34, 91, 67, -10, -3, 11, -25, -3, 101, 88, -119, 36, -12, -20, 83, 94, 33, 31, -107, -47, -39, 37, 114, 86, -26, -30, -92, 55, -123, -16, -41, -70, -85, -52, -58, -68, -53, 100, 88, 61, 4, -114, -40, 26, 50, 118, 12, 77, 76, -59, -70, -71, -87, -30, 65, -62, -56, -6, 102, -3, 46, 74, -89, -54, 106, 79, -41, 40, -27, 7, 46, 72, 95, -6, -40, -34, -21, 17, -47, 11, 13, -28, 37, 102, 115, 108, -103, -62, -119, 86, -51, -21, -81, -110, -56, 24, -33, -42, -119, -101, -50, -106, 20, 23, 110, 37, -13, -120, -83, -123, 80, -109, -59, -34, 115, 18, -90, 85, 69, -98, -120, 117, 126, -57, -75, 71, -49, -121, 110, -93, 47, -99, 57, 94, 64, -119, 62, 94, -46, 59, 6, 122, -29, -32, -66, -7, 88, 39, 21, 76, 49, -4, -120, 77, 115, 2, -93, -10, -99, -125, -66, 5, 19, 66, 80, 71, 19, -116, 75, 45, 14, -69, -57, -98, 39, -31, -5, 56, -96, 93, 81, 35, 65, -65, 127, 20, -119, 77, 50, -92, 57, -54, 17, 9, -1, 82, 85, 113, -96, 34, -76, 66, -97, 90, 23, 5, 74, 66, -100, -101, 116, -56, -89, -22, 23, 96, -67, -7, 35, 106, 57, -61, 126, -7, 51, -81, 75, -83, -76, 70, -14, 43, 38, 60], "dtype": "int32"}]}}
{"kernel_name": "ceil_bfloat16", "prompt": "/*\nThis AIE kernel implements ceil operation on a bfloat16 vector, rounding each element up to the nearest integer\n>>> ceil_bfloat16([17.625, 4.0, 9.8125, 22.375, 18.625, -9.75, 9.5, -1.515625])\n[18.0, 4.0, 10.0, 23.0, 19.0, -9.0, 10.0, -1.0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid ceil_bfloat16(bfloat16 *input_vector, bfloat16 *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    for (uint32_t i = 0; i < vector_size; i++) {\n        float val = (float)input_vector[i];\n        int32_t int_part = (int32_t)val;\n        if (val == (float)int_part || val < 0.0f) {\n            output_vector[i] = (bfloat16)int_part;\n        } else {\n            output_vector[i] = (bfloat16)(int_part + 1);\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void ceil_bfloat16_wrapper(bfloat16 *input_vector, bfloat16 *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        ceil_bfloat16(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [17.625, 4.0, 9.8125, 22.375, 18.625, -9.75, 9.5, -1.515625, -1.03125, 4.09375, 1.4375, 14.5625, 7.625, 1.21875, 4.4375, 3.34375, 14.9375, -2.046875, 3.125, -8.5625, -25.5, 6.53125, 8.625, -7.40625, 22.75, -14.5625, 0.45703125, -1.875, 15.3125, 14.6875, 1.546875, 3.78125, -8.875, -19.75, -3.484375, 1.5625, 12.3125, 12.0, -3.875, -3.015625, -10.5, -14.1875, -17.125, 19.5, -5.09375, -4.375, -12.5, 7.78125, -16.125, -2.125, -8.9375, 3.875, -5.09375, -11.8125, -0.28125, 4.28125, 0.6640625, 3.03125, -6.34375, -3.625, -6.71875, -3.59375, -8.125, -17.25, 1.7734375, -4.03125, -16.25, 4.625, -9.0625, 0.51953125, 7.28125, 1.2890625, 11.375, -12.375, 4.03125, -6.84375, -8.6875, -5.78125, -3.109375, 0.5625, -11.625, 9.0, 4.65625, -15.375, 14.875, 19.0, 11.8125, -1.796875, -10.6875, 10.5625, -4.03125, 12.25, 2.078125, 9.75, 3.5625, 7.0625, 0.10498046875, 17.875, 1.265625, 4.03125, 18.875, -13.5, -12.6875, 9.6875, -11.75, 19.375, -4.125, -7.46875, 19.25, 14.8125, 18.625, 9.0625, -8.625, 19.125, -2.6875, 8.0, 9.5, -1.546875, 6.15625, 9.25, 3.765625, -11.0, 2.984375, 13.25, -6.9375, -1.5, -4.34375, 18.5, 6.71875, 4.0625, -7.6875, 5.40625, -6.75, 0.318359375, -6.34375, 6.75, 5.78125, -2.078125, 3.953125, -10.9375, -14.9375, 4.40625, 1.6640625, 6.34375, 23.875, 9.4375, -9.125, 11.1875, -13.1875, -4.625, -0.68359375, 17.125, -7.4375, -8.25, -0.984375, -6.625, 11.25, -10.8125, -11.5, -4.375, -4.96875, 19.25, 9.5, 0.875, -12.25, 8.4375, -10.0, -15.4375, 11.875, 3.171875, 9.1875, 3.1875, 8.5625, -6.5, -10.3125, 6.8125, -8.0625, -6.90625, -4.5625, 0.1748046875, -3.546875, -13.75, -6.4375, -22.25, 6.25, -16.0, -11.0625, 0.5234375, -7.40625, 15.4375, -12.9375, 2.671875, -0.392578125, -11.6875, 5.21875, -1.71875, 7.71875, 8.25, 21.625, 13.375, -3.6875, -2.390625, 11.0, 6.5625, 6.40625, -16.125, -0.2431640625, -7.375, 2.796875, -0.98046875, 9.125, 3.171875, 7.875, -4.65625, -9.4375, -4.09375, -0.169921875, 3.796875, 22.625, -0.421875, -9.5625, -3.453125, -4.625, 4.8125, -15.4375, 0.6328125, 1.5625, 2.328125, -5.96875, -2.375, -14.25, -4.9375, -5.4375, 4.15625, -11.5625, 7.8125, 14.9375, -20.75, 4.25, 6.78125, -6.375, -3.96875, -1.328125, -2.984375, -3.09375, -16.75, 11.5, 10.8125, -8.125, -14.6875, 5.21875, -5.75, 1.421875, -3.1875, 6.90625, 6.9375], "dtype": "bfloat16"}], "outputs": [{"output_vector": [18.0, 4.0, 10.0, 23.0, 19.0, -9.0, 10.0, -1.0, -1.0, 5.0, 2.0, 15.0, 8.0, 2.0, 5.0, 4.0, 15.0, -2.0, 4.0, -8.0, -25.0, 7.0, 9.0, -7.0, 23.0, -14.0, 1.0, -1.0, 16.0, 15.0, 2.0, 4.0, -8.0, -19.0, -3.0, 2.0, 13.0, 12.0, -3.0, -3.0, -10.0, -14.0, -17.0, 20.0, -5.0, -4.0, -12.0, 8.0, -16.0, -2.0, -8.0, 4.0, -5.0, -11.0, -0.0, 5.0, 1.0, 4.0, -6.0, -3.0, -6.0, -3.0, -8.0, -17.0, 2.0, -4.0, -16.0, 5.0, -9.0, 1.0, 8.0, 2.0, 12.0, -12.0, 5.0, -6.0, -8.0, -5.0, -3.0, 1.0, -11.0, 9.0, 5.0, -15.0, 15.0, 19.0, 12.0, -1.0, -10.0, 11.0, -4.0, 13.0, 3.0, 10.0, 4.0, 8.0, 1.0, 18.0, 2.0, 5.0, 19.0, -13.0, -12.0, 10.0, -11.0, 20.0, -4.0, -7.0, 20.0, 15.0, 19.0, 10.0, -8.0, 20.0, -2.0, 8.0, 10.0, -1.0, 7.0, 10.0, 4.0, -11.0, 3.0, 14.0, -6.0, -1.0, -4.0, 19.0, 7.0, 5.0, -7.0, 6.0, -6.0, 1.0, -6.0, 7.0, 6.0, -2.0, 4.0, -10.0, -14.0, 5.0, 2.0, 7.0, 24.0, 10.0, -9.0, 12.0, -13.0, -4.0, -0.0, 18.0, -7.0, -8.0, -0.0, -6.0, 12.0, -10.0, -11.0, -4.0, -4.0, 20.0, 10.0, 1.0, -12.0, 9.0, -10.0, -15.0, 12.0, 4.0, 10.0, 4.0, 9.0, -6.0, -10.0, 7.0, -8.0, -6.0, -4.0, 1.0, -3.0, -13.0, -6.0, -22.0, 7.0, -16.0, -11.0, 1.0, -7.0, 16.0, -12.0, 3.0, -0.0, -11.0, 6.0, -1.0, 8.0, 9.0, 22.0, 14.0, -3.0, -2.0, 11.0, 7.0, 7.0, -16.0, -0.0, -7.0, 3.0, -0.0, 10.0, 4.0, 8.0, -4.0, -9.0, -4.0, -0.0, 4.0, 23.0, -0.0, -9.0, -3.0, -4.0, 5.0, -15.0, 1.0, 2.0, 3.0, -5.0, -2.0, -14.0, -4.0, -5.0, 5.0, -11.0, 8.0, 15.0, -20.0, 5.0, 7.0, -6.0, -3.0, -1.0, -2.0, -3.0, -16.0, 12.0, 11.0, -8.0, -14.0, 6.0, -5.0, 2.0, -3.0, 7.0, 7.0], "dtype": "bfloat16"}]}}
{"kernel_name": "compare_equal_bfloat16", "prompt": "/*\nThis AIE kernel compares two bfloat16 vectors elementwise for equality, and writes a uint8_t mask output (1 if equal, 0 if not).\n>>> compare_equal_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875], [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875])\n[1, 1, 1, 1, 1, 1, 1, 1]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_a size: 256\ninput_b size: 256\noutput_mask size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid compare_equal_bfloat16(bfloat16 *input_a, bfloat16 *input_b, uint8_t *output_mask) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr uint32_t vector_size = 256;\n    for (uint32_t i = 0; i < vector_size; i++) {\n        output_mask[i] = (input_a[i] == input_b[i]) ? 1 : 0;\n    }\n}", "program_code": "extern \"C\" {\n    void compare_equal_bfloat16_wrapper(bfloat16 *input_a, bfloat16 *input_b, uint8_t *output_mask) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        compare_equal_bfloat16(input_a, input_b, output_mask);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_a": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625, 0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625, 0.671875, 0.408203125, -0.76953125, 0.5390625, -0.67578125, 0.03173828125, -0.63671875, 0.67578125, 0.578125, -0.2080078125, 0.396484375, -1.09375, -1.4921875, 0.439453125, 0.1669921875, 0.63671875, 2.390625, 0.9453125, -0.9140625, 1.1171875, -1.3125, -0.4609375, -0.068359375, 1.7109375, -0.74609375, -0.828125, -0.0986328125, -0.6640625, 1.125, -1.078125, -1.1484375, -0.4375, -0.498046875, 1.9296875, 0.94921875, 0.08740234375, -1.2265625, 0.84375, -1.0, -1.546875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.65234375, -1.03125, 0.6796875, -0.8046875, -0.69140625, -0.455078125, 0.0174560546875, -0.353515625, -1.375, -0.64453125, -2.21875, 0.625, -1.6015625, -1.1015625, 0.05224609375, -0.73828125, 1.546875, -1.2890625, 0.267578125, -0.039306640625, -1.171875, 0.5234375, -0.171875, 0.7734375, 0.82421875, 2.15625, 1.3359375, -0.369140625, -0.2392578125, 1.1015625, 0.65625, 0.640625, -1.6171875, -0.0242919921875, -0.73828125, 0.279296875, -0.09814453125, 0.91015625, 0.31640625, 0.78515625, -0.466796875, -0.9453125, -0.41015625, -0.0169677734375, 0.37890625, 2.265625, -0.042236328125, -0.95703125, -0.345703125, -0.462890625, 0.482421875, -1.5390625, 0.0634765625, 0.15625, 0.232421875, -0.59765625, -0.23828125, -1.421875, -0.494140625, -0.54296875, 0.416015625, -1.15625, 0.78125, 1.4921875, -2.0625, 0.42578125, 0.67578125, -0.63671875, -0.396484375, -0.1328125, -0.296875, -0.30859375, -1.6796875, 1.1484375, 1.078125, -0.8125, -1.46875, 0.51953125, -0.57421875, 0.1416015625, -0.318359375, 0.69140625, 0.6953125], "dtype": "bfloat16"}, {"input_b": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 2.6875, 0.76171875, 1.359375, 1.6796875, 0.333984375, 1.4921875, -0.205078125, 0.3125, 0.37890625, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, 1.046875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, 0.9296875, -1.046875, -1.421875, -1.703125, 1.953125, 0.7265625, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625, 0.177734375, -0.40234375, -1.6328125, 0.462890625, 0.328125, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, 0.55078125, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 3.140625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625, 0.671875, 0.408203125, 0.46484375, 1.7734375, -0.67578125, 0.03173828125, -0.63671875, 0.67578125, 0.578125, -0.2080078125, 0.396484375, -1.09375, -1.4921875, 0.439453125, 0.1669921875, 1.8671875, 2.390625, 0.9453125, -0.9140625, 1.1171875, -1.3125, -0.4609375, -0.068359375, 1.7109375, -0.74609375, -0.828125, -0.0986328125, -0.6640625, 2.359375, -1.078125, -1.1484375, -0.4375, -0.498046875, 1.9296875, 0.94921875, 0.08740234375, -1.2265625, 0.84375, -1.0, -1.546875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.65234375, -1.03125, 0.6796875, -0.8046875, -0.69140625, -0.455078125, 0.0174560546875, 0.87890625, -1.375, -0.64453125, -2.21875, 0.625, -1.6015625, -1.1015625, 0.05224609375, -0.73828125, 2.78125, -1.2890625, 0.267578125, -0.039306640625, -1.171875, 0.5234375, -0.171875, 0.7734375, 2.0625, 2.15625, 1.3359375, 0.86328125, -0.2392578125, 1.1015625, 0.65625, 0.640625, -1.6171875, -0.0242919921875, -0.73828125, 0.279296875, -0.09814453125, 0.91015625, 0.31640625, 0.78515625, -0.466796875, -0.9453125, -0.41015625, -0.0169677734375, 0.37890625, 2.265625, -0.042236328125, -0.95703125, -0.345703125, -0.462890625, 0.482421875, -0.3046875, 0.0634765625, 0.15625, 0.232421875, -0.59765625, -0.23828125, -1.421875, -0.494140625, -0.54296875, 0.416015625, -1.15625, 0.78125, 1.4921875, -2.0625, 0.42578125, 0.67578125, -0.63671875, -0.396484375, -0.1328125, -0.296875, 0.92578125, -1.6796875, 1.1484375, 1.078125, -0.8125, -1.46875, 0.51953125, -0.57421875, 0.1416015625, -0.318359375, 0.69140625, 0.6953125], "dtype": "bfloat16"}], "outputs": [{"output_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "dtype": "uint8"}]}}
{"kernel_name": "compare_equal_int32", "prompt": "/*\nThis AIE kernel takes two int32 input vectors and compares them element-wise for equality, producing a uint8 output vector: 1 if equal, 0 if not.\n>>> compare_equal_int32([-316, -441, 653, 216, -165, -237, 731, 383], [-259, 243, 270, -900, -585, -779, 202, 532])\n[0, 0, 0, 0, 0, 0, 0, 0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\na size: 256\nb size: 256\nout size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid compare_equal_int32(int32_t *a, int32_t *b, uint8_t *out) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t VECTOR_SIZE = 256;\n    for (int i = 0; i < VECTOR_SIZE; i++) {\n        out[i] = (a[i] == b[i]) ? 1 : 0;\n    }\n}", "program_code": "extern \"C\" {\n    void compare_equal_int32_wrapper(int32_t *a, int32_t *b, uint8_t *out) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        compare_equal_int32(a, b, out);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"a": [-316, -441, 653, 216, -165, -237, 731, 383, 33, 747, -723, 778, 828, -401, 94, 496, -400, 420, -686, -295, 510, -449, -913, -826, 624, -151, 701, -463, -155, -928, -223, 940, -885, -24, -245, 733, 871, 455, -552, -150, -901, 201, -245, -203, -341, 171, -90, -577, 312, 985, 289, -303, -361, -456, -457, -286, -756, -849, -325, -490, 483, -118, 207, -972, -198, -872, -872, 956, 77, 925, 574, 512, -244, -727, -665, -612, 641, 66, 466, -457, -112, -743, 345, 961, -943, -709, 894, 143, -221, -570, 106, -909, 920, -602, -389, 589, -92, -367, 962, -916, -797, -676, -226, -36, 71, -361, 155, -28, -132, 204, 870, 167, 684, 251, -46, -209, -281, -91, -627, 877, -440, 329, 605, -831, 699, 472, 119, 221, 630, -744, 905, 714, 316, 954, -184, 885, -613, 634, 578, -27, -632, -83, -799, -617, 536, 930, -630, -445, -46, 407, -977, 723, -870, -623, -902, 598, -69, -266, -877, 987, -406, 966, -261, 172, -791, -438, 435, -218, 65, 82, -295, 60, -222, -914, 67, -128, -989, -230, -693, 104, -968, 206, 152, -194, -725, 198, 578, 395, 208, -556, -512, 613, -714, 304, -363, -230, 539, -906, 250, 899, 293, 904, -704, 352, 43, -393, 864, 434, -550, 272, -820, -677, 4, 853, 806, 888, 284, 987, -251, -861, 20, -402, 485, -111, 645, -157, -304, 552, 176, -75, -851, 134, -975, 488, -44, 913, -114, 141, 469, 619, -327, 896, -72, 252, 531, -237, -879, 350, -531, -713, -475, 863, 720, 176, -409, -959], "dtype": "int32"}, {"b": [-259, 243, 270, -900, -585, -779, 202, 532, -826, -395, 650, 697, -220, 760, 769, -152, 90, 480, 11, -875, 162, -376, -270, 179, -304, 144, -679, -552, -155, -291, 880, 314, 999, -997, -300, 733, 262, 701, 195, 747, -901, -144, -245, 606, 684, -98, 820, -373, 312, -98, -166, -396, 638, -131, 403, 733, 133, 353, -900, -306, -155, 941, 531, -329, 617, 59, -763, 956, 267, -750, -608, -234, 305, -727, -665, -979, -571, 253, -600, 177, 6, 143, 701, 961, 919, 409, 413, 734, -604, 370, -414, 19, -50, 102, -170, 608, -801, 837, 157, 583, -301, 194, -226, -549, -862, -246, 337, 499, 369, -613, 149, -282, 874, 221, 722, 924, 41, -291, -553, -650, -336, 667, -675, -576, 699, -836, 594, 201, 463, -336, -327, 714, 938, 889, -538, -247, 159, 634, 973, -253, -954, 520, 12, -361, -71, -663, 181, 548, 654, 838, -114, -712, -870, 826, -885, 623, -364, -591, 198, -502, 899, 588, -378, 600, 356, -438, 910, -415, -854, -228, 799, -357, -222, 72, 100, -707, -989, -884, -693, 517, 584, 206, 152, -891, -821, -439, 95, 882, 457, 309, -485, 613, -926, 620, -510, 345, 911, 556, 232, 66, 522, 904, -972, 434, -145, 204, -696, 986, 638, -223, 282, 396, 4, -124, 806, 769, -143, 404, -115, -388, 20, -910, 92, -383, 546, -988, 640, -775, -579, -833, -72, 402, 313, -78, -901, 241, -694, -656, 234, 812, -266, 692, 608, 298, 433, -80, 575, 258, 659, -716, 688, 682, 731, -828, 747, -699], "dtype": "int32"}], "outputs": [{"out": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "dtype": "uint8"}]}}
{"kernel_name": "compare_gt_int8", "prompt": "/*\nThis AIE kernel compares two int8 input vectors of length 256 and produces an int8 output vector, where each output element is 1 if the corresponding element of the first input is greater than that of the second, and 0 otherwise.\n>>> compare_gt_int8([44, -118, -1, 12, -81, 42, 68, 23], [-100, 88, -17, -73, -94, 99, 4, 17])\n[1, 0, 1, 1, 1, 0, 1, 1]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer0 size: 256\nin_buffer1 size: 256\nout_buffer size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid compare_gt_int8(int8_t *in_buffer0, int8_t *in_buffer1, int8_t *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t N = 256;\n    for (int i = 0; i < N; i++) {\n        out_buffer[i] = in_buffer0[i] > in_buffer1[i] ? 1 : 0;\n    }\n}", "program_code": "extern \"C\" {\n    void compare_gt_int8_wrapper(int8_t *in_buffer0, int8_t *in_buffer1, int8_t *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        compare_gt_int8(in_buffer0, in_buffer1, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer0": [44, -118, -1, 12, -81, 42, 68, 23, -11, 38, -106, 55, 64, 76, -95, 88, -61, 51, -50, 26, 123, -46, 34, 91, 67, -10, -3, 11, -25, -3, 101, 88, -119, 36, -12, -20, 83, 94, 33, 31, -107, -47, -39, 37, 114, 86, -26, -30, -92, 55, -123, -16, -41, -70, -85, -52, -58, -68, -53, 100, 88, 61, 4, -114, -40, 26, 50, 118, 12, 77, 76, -59, -70, -71, -87, -30, 65, -62, -56, -6, 102, -3, 46, 74, -89, -54, 106, 79, -41, 40, -27, 7, 46, 72, 95, -6, -40, -34, -21, 17, -47, 11, 13, -28, 37, 102, 115, 108, -103, -62, -119, 86, -51, -21, -81, -110, -56, 24, -33, -42, -119, -101, -50, -106, 20, 23, 110, 37, -13, -120, -83, -123, 80, -109, -59, -34, 115, 18, -90, 85, 69, -98, -120, 117, 126, -57, -75, 71, -49, -121, 110, -93, 47, -99, 57, 94, 64, -119, 62, 94, -46, 59, 6, 122, -29, -32, -66, -7, 88, 39, 21, 76, 49, -4, -120, 77, 115, 2, -93, -10, -99, -125, -66, 5, 19, 66, 80, 71, 19, -116, 75, 45, 14, -69, -57, -98, 39, -31, -5, 56, -96, 93, 81, 35, 65, -65, 20, -119, 77, 50, -92, 57, -54, 17, 9, -1, 82, 85, 113, -96, 34, -76, 66, -97, 90, 23, 5, 74, 66, -100, -101, 116, -56, -89, -22, 23, 96, -67, -7, 35, 106, 57, -61, 126, -7, 51, -81, 75, -83, -76, 70, -14, 43, 38, 60, 55], "dtype": "int8"}, {"in_buffer1": [-100, 88, -17, -73, -94, 99, 4, 17, 0, 40, 29, -94, 0, -24, 79, -124, 36, 103, 122, -46, -75, -36, -99, 30, 5, -105, -47, -90, -90, -50, 50, 28, 104, -115, 106, -72, 116, -30, 111, 29, -111, 113, 112, -30, -49, -7, 25, 113, 4, 49, -112, 103, -23, 70, 11, 46, -86, 108, -81, -13, 58, 53, -120, -36, -97, 58, 113, 28, -8, -45, 97, -17, -127, -47, -128, 103, -63, 117, 23, 50, 103, -17, -22, -103, 41, 111, -22, -113, -71, -24, -59, 120, -93, -71, 49, 42, -26, -81, -76, 39, -9, 108, 46, 43, -117, 59, 64, -85, 46, 33, 91, -75, -46, 92, 47, -37, -37, -48, -127, -95, 0, 119, -84, 64, 14, 105, 63, -48, -29, 74, 26, 27, -75, -90, -100, -35, 12, -53, -74, -45, -7, -22, 120, 17, 42, -65, 86, -119, -44, -80, -56, -16, 75, 72, -33, 34, -60, -111, -122, 125, -122, 51, -3, 117, 68, 27, -97, -102, -81, -60, -99, 39, -1, 114, -8, -75, 116, -73, 19, 34, 3, 20, -53, -87, 76, 115, 75, 126, -28, -101, -78, 39, 52, -92, 116, 20, 104, 55, 87, -64, -50, -113, -108, -22, 15, -92, -32, -9, 20, 70, 5, -7, 99, 44, 18, -66, 58, -37, 30, 31, -105, -69, 50, -88, 79, 42, 7, -42, 13, 11, -63, -100, -11, 17, 60, 44, -43, -73, -123, 40, -80, -94, -76, -47, -79, 117, -33, -93, -59, 38, -63, 71, 41, -72, -45, -78], "dtype": "int8"}], "outputs": [{"out_buffer": [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], "dtype": "int8"}]}}
{"kernel_name": "compare_lt_int8", "prompt": "/*\nThis AIE kernel compares two int8_t input vectors elementwise (length 256), outputting 1 at index i if input_a[i] < input_b[i], else 0. Results are int8_t.\n>>> compare_lt_int8([72, -90, 27, 40, -53, 70, 96, 51], [20, -17, 11, -99, -19, -100, -35, 51])\n[0, 1, 0, 0, 1, 0, 0, 0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_a size: 256\ninput_b size: 256\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid compare_lt_int8(int8_t *input_a, int8_t *input_b, int8_t *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t NUM_ELEMENTS = 256;\n    for (int i = 0; i < NUM_ELEMENTS; i++) {\n        output[i] = (input_a[i] < input_b[i]) ? 1 : 0;\n    }\n}", "program_code": "extern \"C\" {\n    void compare_lt_int8_wrapper(int8_t *input_a, int8_t *input_b, int8_t *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        compare_lt_int8(input_a, input_b, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_a": [72, -90, 27, 40, -53, 70, 96, 51, 17, 66, -78, 83, 92, -67, -33, 79, -22, 54, -18, 62, 95, 18, 25, 39, 3, 25, -91, 64, 16, 8, 61, 59, -79, -19, -11, 65, 2, -2, -64, 83, -95, 12, -13, -42, -57, -24, -30, -40, -25, 89, 32, -86, -12, 54, 78, 40, -31, -42, -43, -59, -2, 93, -34, -28, 22, 25, 74, -61, -26, -13, 68, 1, 35, 74, 22, -12, -6, 7, 45, -19, 39, 41, 0, 65, -75, -34, -91, -23, 7, -53, -82, -28, 52, -5, -14, -91, -73, -22, -78, 48, 51, 65, 15, -92, -55, -95, -81, -31, -6, 46, -62, 97, -70, -92, -29, -47, 99, -21, -93, -65, 75, -71, 85, 92, -91, 90, -18, 87, 34, -1, -4, -38, 21, 67, 49, 77, 24, -92, 30, -65, 18, -71, -97, -38, 33, 47, 94, 99, 47, -88, 73, 42, -41, -29, -70, 67, -3, 23, 84, -68, 63, 93, -37, 48, -91, 78, -64, 85, -26, 45, 37, 27, -68, 62, -48, 94, -69, 51, 33, 94, -72, -73, -28, -61, 6, 51, -39, 21, 63, 85, -33, 21, 79, -53, -55, -48, 98, 14, 71, 66, 88, 83, -32, 98, 16, -72, 11, -45, -66, 32, 45, 28, 68, 57, -66, 28, 4, -96, 64, -18, -47, -8, -71, 58, 33, -77, -19, -62, -62, -22, 78, 56, -87, -44, -2, 57, -83, -2, -21, 21, 53, 32, 77, -84, 5, 98, 39, 74, -58, -53, 15, 86, 81, -92, -8, -69], "dtype": "int8"}, {"input_b": [20, -17, 11, -99, -19, -100, -35, 51, 78, 11, 6, -75, 69, 6, -85, -43, 4, -31, -65, -43, 77, 70, 2, -53, -48, 67, 19, 74, 71, -89, 87, 92, -57, 74, 61, -47, -18, 75, -9, -9, -20, -99, -67, 28, -56, 92, 42, 91, -20, -1, 54, 55, -47, -62, -72, -7, 40, -25, -46, -17, 21, 6, 45, 70, -37, -91, -16, -52, -28, 12, -5, 62, -32, -83, -94, -94, 79, 25, 96, 55, -69, -74, -53, -32, -71, 67, 27, 20, -47, -45, 47, 62, 31, 48, -25, -59, 0, -73, -50, 67, 80, -64, 48, 83, -36, -22, -85, -80, 6, 43, -64, -4, 19, 48, 98, 33, 21, 72, 46, -38, 86, -9, 58, 59, -77, -41, 78, -60, 70, 35, -14, 41, 39, -35, -72, 17, 45, 88, 72, -15, -45, -95, 68, -52, -66, -48, -19, -51, -5, -65, -31, 66, -35, 99, 69, -44, -17, -50, 63, -78, -77, 92, 97, 0, -6, -5, -8, 55, 69, 97, 56, -56, -6, 10, 21, -97, -100, 61, -76, 13, 14, 59, 78, 42, 31, -64, 16, 72, 62, 53, -76, -52, -1, -7, -37, 31, -27, -2, 34, 19, -58, 90, 18, 30, -97, -87, 12, -19, -33, -86, -61, 54, 49, -57, 27, 15, -4, -36, 89, 27, -71, -95, -100, -46, -92, -90, 38, -81, 13, 14, -91, 2, -28, -57, -50, 98, 86, -49, 97, -70, 27, 41, -96, -8, -77, -25, 87, -73, 23, 30, 0, -70, 21, -75, -24, 76], "dtype": "int8"}], "outputs": [{"output": [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1], "dtype": "int8"}]}}
{"kernel_name": "complexabs_bfloat16", "prompt": "/*\nThis AIE kernel computes the absolute value of complex numbers. real_vector contains the real parts, and imag_vector contains the imaginary parts. The result is stored in output_vector.\n>>> complexabs_bfloat16([3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375], [0.35546875, -0.8046875, -3.265625, 0.92578125, -1.8125, 0.10400390625, 1.4609375, 0.2578125])\n[3.546875, 1.1328125, 3.8125, 4.5625, 4.15625, 1.953125, 2.390625, 0.3984375]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nreal_vector size: 64\nimag_vector size: 64\noutput_vector size: 64\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid complexabs_bfloat16(bfloat16 *real_vector, bfloat16 *imag_vector, bfloat16 *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 64;\n    for (uint32_t i = 0; i < vector_size; i++) {\n        float real = (float)real_vector[i];\n        float imag = (float)imag_vector[i];\n        float x = real * real + imag * imag;\n        if (x == 0.0f) {\n            output_vector[i] = (bfloat16)0.0f;\n            continue;\n        }\n        float xhalf = 0.5f * x;\n        int32_t j = *(int32_t*)&x;\n        j = 0x5f3759df - (j >> 1); // fast inverse square root\n        float y = *(float*)&j;\n        y = y * (1.5f - xhalf * y * y);\n        float result = x * y;\n        output_vector[i] = (bfloat16)result;\n    }\n}", "program_code": "extern \"C\" {\n    void complexabs_bfloat16_wrapper(bfloat16 *real_vector, bfloat16 *imag_vector, bfloat16 *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        complexabs_bfloat16(real_vector, imag_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"real_vector": [3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375, -0.2060546875, 0.8203125, 0.2890625, 2.90625, 1.5234375, 0.2431640625, 0.88671875, 0.66796875, 2.984375, -0.41015625, 0.625, -1.7109375, -5.09375, 1.3046875, 1.7265625, -1.484375, 4.53125, -2.90625, 0.09130859375, -0.375, 3.0625, 2.9375, 0.310546875, 0.7578125, -1.7734375, -3.96875, -0.6953125, 0.3125, 2.453125, 2.40625, -0.7734375, -0.60546875, -2.09375, -2.84375, -3.40625, 3.90625, -1.015625, -0.875, -2.5, 1.5546875, -3.234375, -0.42578125, -1.7890625, 0.7734375, -1.0234375, -2.359375, -0.056396484375, 0.85546875, 0.1328125, 0.60546875, -1.265625, -0.7265625, -1.34375, -0.71875, -1.625, -3.453125], "dtype": "bfloat16"}, {"imag_vector": [0.35546875, -0.8046875, -3.265625, 0.92578125, -1.8125, 0.10400390625, 1.4609375, 0.2578125, 2.28125, -2.46875, 0.8046875, -1.3671875, -1.7421875, -1.15625, -0.625, 0.1123046875, -2.328125, 1.8046875, 0.9296875, -3.078125, 2.96875, 3.796875, 2.359375, -0.359375, -2.140625, 2.109375, -0.8046875, 2.4375, 0.416015625, 1.953125, 0.7109375, 1.4140625, 0.02099609375, 3.578125, 0.25390625, 0.8046875, 3.765625, -2.703125, -2.546875, 1.9375, -2.34375, 3.890625, -0.828125, -1.4921875, 3.84375, 2.96875, 3.734375, 1.8125, -1.71875, 3.8125, -0.53515625, 1.6015625, 1.890625, -0.310546875, 1.2265625, 1.84375, 0.75390625, -2.203125, 0.59765625, 2.65625, -1.390625, -0.298828125, -0.87109375, 3.703125], "dtype": "bfloat16"}], "outputs": [{"output_vector": [3.546875, 1.1328125, 3.8125, 4.5625, 4.15625, 1.953125, 2.390625, 0.3984375, 2.296875, 2.59375, 0.85546875, 3.21875, 2.3125, 1.1796875, 1.0859375, 0.67578125, 3.796875, 1.8515625, 1.1171875, 3.53125, 5.90625, 4.0, 2.921875, 1.5234375, 5.0, 3.59375, 0.80859375, 2.46875, 3.09375, 3.53125, 0.77734375, 1.609375, 1.7734375, 5.34375, 0.73828125, 0.86328125, 4.5, 3.625, 2.65625, 2.03125, 3.140625, 4.8125, 3.515625, 4.1875, 3.96875, 3.09375, 4.5, 2.390625, 3.65625, 3.84375, 1.8671875, 1.7734375, 2.15625, 2.375, 1.2265625, 2.03125, 0.765625, 2.28125, 1.3984375, 2.75, 1.9375, 0.77734375, 1.84375, 5.0625], "dtype": "bfloat16"}]}}
{"kernel_name": "conv1d_bfloat16", "prompt": "/*\nA kernel that performs a 1D convolution operation on a bfloat16 input vector with a bfloat16 kernel and given stride (runtime parameter). All vectors are 256-wide and the kernel is size 2.\n>>> conv1d_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875], [-0.7265625, -1.3828125], 1)\n[-1.8359375, -1.6484375, -3.796875, -4.21875, -0.0062255859375, -0.6015625, -0.48046875]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 256\nkernel size: 2\nout_buffer size: 255\nstride: 1\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid conv1d_bfloat16(bfloat16 *in_buffer, bfloat16 *kernel, bfloat16 *out_buffer, uint32_t stride) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t VECTOR_SIZE = 256;\n    constexpr int32_t KERNEL_SIZE = 2;\n    uint32_t num_windows = (VECTOR_SIZE - KERNEL_SIZE) / stride + 1;\n\n    for (uint32_t i = 0; i < num_windows; i++) {\n        float acc = 0.0f;\n        for (uint32_t j = 0; j < KERNEL_SIZE; j++) {\n            acc += (float)in_buffer[i * stride + j] * (float)kernel[j];\n        }\n        out_buffer[i] = (bfloat16)acc;\n    }\n}", "program_code": "extern \"C\" {\n    void conv1d_bfloat16_wrapper(bfloat16 *in_buffer, bfloat16 *kernel, bfloat16 *out_buffer, uint32_t stride) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        conv1d_bfloat16(in_buffer, kernel, out_buffer, stride);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625, 0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625, 0.671875, 0.408203125, -0.76953125, 0.5390625, -0.67578125, 0.03173828125, -0.63671875, 0.67578125, 0.578125, -0.2080078125, 0.396484375, -1.09375, -1.4921875, 0.439453125, 0.1669921875, 0.63671875, 2.390625, 0.9453125, -0.9140625, 1.1171875, -1.3125, -0.4609375, -0.068359375, 1.7109375, -0.74609375, -0.828125, -0.0986328125, -0.6640625, 1.125, -1.078125, -1.1484375, -0.4375, -0.498046875, 1.9296875, 0.94921875, 0.08740234375, -1.2265625, 0.84375, -1.0, -1.546875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.65234375, -1.03125, 0.6796875, -0.8046875, -0.69140625, -0.455078125, 0.0174560546875, -0.353515625, -1.375, -0.64453125, -2.21875, 0.625, -1.6015625, -1.1015625, 0.05224609375, -0.73828125, 1.546875, -1.2890625, 0.267578125, -0.039306640625, -1.171875, 0.5234375, -0.171875, 0.7734375, 0.82421875, 2.15625, 1.3359375, -0.369140625, -0.2392578125, 1.1015625, 0.65625, 0.640625, -1.6171875, -0.0242919921875, -0.73828125, 0.279296875, -0.09814453125, 0.91015625, 0.31640625, 0.78515625, -0.466796875, -0.9453125, -0.41015625, -0.0169677734375, 0.37890625, 2.265625, -0.042236328125, -0.95703125, -0.345703125, -0.462890625, 0.482421875, -1.5390625, 0.0634765625, 0.15625, 0.232421875, -0.59765625, -0.23828125, -1.421875, -0.494140625, -0.54296875, 0.416015625, -1.15625, 0.78125, 1.4921875, -2.0625, 0.42578125, 0.67578125, -0.63671875, -0.396484375, -0.1328125, -0.296875, -0.30859375, -1.6796875, 1.1484375, 1.078125, -0.8125, -1.46875, 0.51953125, -0.57421875, 0.1416015625, -0.318359375, 0.69140625, 0.6953125], "dtype": "bfloat16"}, {"kernel": [-0.7265625, -1.3828125], "dtype": "bfloat16"}], "outputs": [{"out_buffer": [-1.8359375, -1.6484375, -3.796875, -4.21875, -0.0062255859375, -0.6015625, -0.48046875, 0.251953125, -0.4921875, -0.498046875, -2.109375, -2.109375, -0.72265625, -0.703125, -0.78515625, -2.3125, -0.80078125, -0.283203125, 0.95703125, 4.15625, 0.94921875, -1.6640625, 0.3984375, -2.59375, 0.36328125, 0.9921875, 0.2265625, -1.984375, -3.140625, -1.28125, -0.63671875, 0.94921875, 3.390625, 1.921875, 0.03662109375, -1.8125, -2.5625, -0.33984375, 0.69921875, 1.6640625, 2.734375, 3.390625, -1.4609375, -0.71875, 0.97265625, 2.046875, -0.1669921875, 1.671875, 1.46875, 1.390625, 0.115234375, 0.42578125, 2.0, 0.89453125, -0.5703125, -0.40234375, -0.466796875, 0.65625, 0.9609375, 1.1953125, 0.984375, 1.3828125, 2.984375, 1.0078125, 0.427734375, 2.546875, 0.546875, 0.91796875, 0.5859375, -1.046875, -0.7109375, -1.671875, 0.87890625, 0.33984375, 0.65234375, 1.703125, 1.4296875, 0.8515625, 0.1494140625, 1.5703125, -0.40234375, -1.296875, 1.7890625, -0.93359375, -3.703125, -3.015625, -0.609375, 1.609375, -0.6796875, -0.2099609375, -1.390625, -1.171875, -1.5, -1.203125, -1.234375, -0.52734375, -2.484375, -1.4765625, -0.6484375, -2.890625, 0.5, 2.75, -0.4140625, 0.91796875, -1.8359375, -0.83984375, 1.3359375, -2.109375, -3.453125, -3.65625, -2.609375, 0.53125, -2.015625, -1.015625, -0.9140625, -1.890625, -0.47265625, -0.734375, -1.71875, -1.1875, 1.25, 0.38671875, -2.046875, -0.00347900390625, 0.7109375, 0.7109375, -2.25, -2.28125, -1.0546875, 0.765625, -0.1865234375, 0.54296875, 0.447265625, 0.85546875, -0.47265625, -1.2890625, -0.1328125, -0.396484375, 1.2265625, 2.859375, 0.4765625, -0.55078125, -1.0, -3.765625, -3.046875, 0.578125, -0.87890625, 1.0, 1.59375, 0.4296875, -2.3125, -0.2109375, 1.6875, 0.73828125, 0.98828125, -1.0703125, 0.671875, 2.375, 1.4375, 1.0078125, -2.3125, -2.71875, -0.80859375, 1.6328125, -0.275390625, 0.76953125, 2.859375, -0.51953125, -1.296875, -1.5078125, -1.109375, -1.4140625, 0.28125, 1.8984375, -0.1904296875, 0.6171875, 1.5390625, 1.1328125, 0.306640625, 0.4765625, 2.15625, 1.890625, 3.53125, 0.74609375, 1.7578125, 2.6875, 0.7265625, 0.984375, -1.6015625, 0.66015625, 0.56640625, -0.1396484375, 1.6484375, 0.1279296875, -0.142578125, -0.9453125, -1.703125, -3.578125, -3.40625, -0.4609375, 0.59765625, -1.3515625, -1.7109375, -1.359375, 1.7734375, 1.2109375, 1.0390625, 0.150390625, -0.0673828125, -1.1875, -1.1015625, -1.3125, 0.0751953125, 1.6484375, 1.2578125, 0.322265625, -0.51171875, -3.40625, -1.5859375, 1.3515625, 1.171875, 0.890625, -0.330078125, 1.78125, 1.03125, -0.26171875, -0.435546875, 0.65625, 0.765625, 2.140625, 1.71875, 1.109375, -0.1806640625, 1.296875, -0.240234375, -2.625, 1.765625, 0.91015625, -1.2421875, 0.388671875, 1.0078125, 0.47265625, 0.5078125, 0.640625, 2.546875, -0.3671875, -2.328125, 0.33984375, 2.625, 0.349609375, 0.416015625, 0.2216796875, 0.337890625, -0.7265625, -1.4609375], "dtype": "bfloat16"}], "rtps": [{"stride": 1, "dtype": "uint32"}]}}
{"kernel_name": "conv1d_bias_relu_bfloat16", "prompt": "/*\nA 1D convolution kernel operating on a 256-length bfloat16 vector input using a 4-element bfloat16 kernel, bfloat16 bias, and reported stride (runtime parameter). The sum is computed, biased, ReLU applied, and written to the output buffer. Output size = (256-4)//stride+1.\n>>> conv1d_bias_relu_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875], [-0.7265625, -1.3828125, -1.5859375, 0.609375], -0.188477, 2)\n[0.0, 0.0, 0.0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 256\nkernel size: 4\nout_buffer size: 127\nbias: -0.1884765625\nstride: 2\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid conv1d_bias_relu_bfloat16(bfloat16 *in_buffer, bfloat16 *kernel, bfloat16 *out_buffer, bfloat16 bias, uint32_t stride) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t VECTOR_SIZE = 256;\n    constexpr int32_t KERNEL_SIZE = 4;\n    uint32_t num_windows = (VECTOR_SIZE - KERNEL_SIZE) / stride + 1;\n\n    for (uint32_t i = 0; i < num_windows; i++) {\n        bfloat16 acc = 0.0f;\n        for (uint32_t j = 0; j < KERNEL_SIZE; j++) {\n            acc += in_buffer[i * stride + j] * kernel[j];\n        }\n        acc += bias;\n        acc = acc > 0.0f ? acc : 0.0f;\n        out_buffer[i] = acc;\n    }\n}", "program_code": "extern \"C\" {\n    void conv1d_bias_relu_bfloat16_wrapper(bfloat16 *in_buffer, bfloat16 *kernel, bfloat16 *out_buffer, bfloat16 bias, uint32_t stride) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        conv1d_bias_relu_bfloat16(in_buffer, kernel, out_buffer, bias, stride);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625, 0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625, 0.671875, 0.408203125, -0.76953125, 0.5390625, -0.67578125, 0.03173828125, -0.63671875, 0.67578125, 0.578125, -0.2080078125, 0.396484375, -1.09375, -1.4921875, 0.439453125, 0.1669921875, 0.63671875, 2.390625, 0.9453125, -0.9140625, 1.1171875, -1.3125, -0.4609375, -0.068359375, 1.7109375, -0.74609375, -0.828125, -0.0986328125, -0.6640625, 1.125, -1.078125, -1.1484375, -0.4375, -0.498046875, 1.9296875, 0.94921875, 0.08740234375, -1.2265625, 0.84375, -1.0, -1.546875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.65234375, -1.03125, 0.6796875, -0.8046875, -0.69140625, -0.455078125, 0.0174560546875, -0.353515625, -1.375, -0.64453125, -2.21875, 0.625, -1.6015625, -1.1015625, 0.05224609375, -0.73828125, 1.546875, -1.2890625, 0.267578125, -0.039306640625, -1.171875, 0.5234375, -0.171875, 0.7734375, 0.82421875, 2.15625, 1.3359375, -0.369140625, -0.2392578125, 1.1015625, 0.65625, 0.640625, -1.6171875, -0.0242919921875, -0.73828125, 0.279296875, -0.09814453125, 0.91015625, 0.31640625, 0.78515625, -0.466796875, -0.9453125, -0.41015625, -0.0169677734375, 0.37890625, 2.265625, -0.042236328125, -0.95703125, -0.345703125, -0.462890625, 0.482421875, -1.5390625, 0.0634765625, 0.15625, 0.232421875, -0.59765625, -0.23828125, -1.421875, -0.494140625, -0.54296875, 0.416015625, -1.15625, 0.78125, 1.4921875, -2.0625, 0.42578125, 0.67578125, -0.63671875, -0.396484375, -0.1328125, -0.296875, -0.30859375, -1.6796875, 1.1484375, 1.078125, -0.8125, -1.46875, 0.51953125, -0.57421875, 0.1416015625, -0.318359375, 0.69140625, 0.6953125], "dtype": "bfloat16"}, {"kernel": [-0.7265625, -1.3828125, -1.5859375, 0.609375], "dtype": "bfloat16"}], "outputs": [{"out_buffer": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.21875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.84375, 0.0, 0.0, 1.3046875, 6.4375, 0.0, 3.25, 2.078125, 2.9375, 0.0185546875, 2.125, 0.0, 0.1201171875, 1.625, 1.0390625, 2.265625, 3.109375, 1.828125, 0.0, 0.0, 0.0, 1.4921875, 1.78125, 2.359375, 0.0, 0.3984375, 0.0, 1.546875, 0.5078125, 0.0, 0.0, 0.0, 0.0, 0.0, 2.921875, 2.453125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.390625, 0.0, 2.34375, 0.0, 0.3046875, 0.71484375, 1.6796875, 0.0, 0.0, 3.671875, 0.4140625, 0.0, 0.0, 0.7265625, 2.5625, 0.0, 1.25, 0.0, 2.046875, 3.21875, 0.0, 1.4609375, 0.1826171875, 1.0, 0.0, 0.0, 2.140625, 0.46875, 2.09375, 0.0, 1.6484375, 1.3671875, 3.359375, 2.65625, 0.4140625, 0.0, 0.5234375, 0.0, 0.0, 0.0, 0.0, 0.0, 1.171875, 0.34765625, 0.0, 0.0, 1.140625, 1.3125, 0.0, 0.0, 2.015625, 1.953125, 0.734375, 0.1826171875, 2.53125, 2.640625, 1.9375, 0.0, 1.3203125, 0.0, 0.8515625, 0.0, 1.1953125, 0.0, 1.2578125, 0.0, 0.0], "dtype": "bfloat16"}], "rtps": [{"bias": -0.1884765625, "dtype": "bfloat16"}, {"stride": 2, "dtype": "uint32"}]}}
{"kernel_name": "conv1d_int32", "prompt": "/*\nA kernel that performs a 1D convolution operation on an input vector with a given kernel and stride as runtime parameters.\n>>> conv1d_int32([2, 5, -10, -7, -7, -3, -1, 9], [1, 7, -4], 1)\n[77, -37, -31, -44, -24, -46]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 256\nkernel size: 3\nout_buffer size: 254\nstride: 1\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid conv1d_int32(int32_t *in_buffer, int32_t *kernel, int32_t *out_buffer, uint32_t stride) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    constexpr int32_t kernel_size = 3;\n    uint32_t num_windows = (vector_size - kernel_size) / stride + 1;\n\n    for (uint32_t i = 0; i < num_windows; i++) {\n        int32_t conv_sum = 0;\n        for (uint32_t j = 0; j < kernel_size; j++) {\n            conv_sum += in_buffer[i * stride + j] * kernel[j];\n        }\n        out_buffer[i] = conv_sum;\n    }\n}", "program_code": "extern \"C\" {\n    void conv1d_int32_wrapper(int32_t *in_buffer, int32_t *kernel, int32_t *out_buffer, uint32_t stride) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        conv1d_int32(in_buffer, kernel, out_buffer, stride);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [2, 5, -10, -7, -7, -3, -1, 9, 8, -6, -4, 2, -9, -4, -3, 4, 7, -5, 3, -2, -1, 9, 6, 9, -5, 5, 5, -10, 8, -7, 7, 9, 9, 9, 4, -3, -10, -9, -1, -10, 0, -7, 1, 8, -8, -10, -10, -6, -5, -4, -2, 7, 5, -6, -1, 0, -9, -9, -3, -1, -7, -4, 1, 4, 8, -10, 4, -7, 2, 0, 1, -6, -4, -6, 5, -7, 2, -6, -2, 4, 5, -7, 5, 3, 6, 7, -5, -1, -7, -10, -5, -10, 7, 8, -6, -8, 6, -7, -8, 0, 3, 6, -3, -1, -10, 0, 8, 1, -8, -8, -7, -7, 8, 4, -7, 7, 8, 4, -1, -9, -6, 0, 1, -2, 1, -8, 9, 6, -10, -10, -4, 9, 4, 0, 9, -2, 3, -8, -7, -8, 1, 3, 6, -2, -2, 9, -2, -8, -7, 2, 4, -10, -6, -7, 3, 1, 3, 3, 1, 6, 4, 6, 9, -9, -2, -10, -6, -4, 3, -3, 5, -1, 8, -2, 5, 1, -4, 5, -9, 2, -7, 8, 5, -7, 0, 2, -4, -7, -5, 1, -10, 1, -2, 0, 1, -5, 5, -2, -8, 9, 9, 4, -7, -7, -3, -1, -1, -1, -7, 4, 8, 2, -7, -1, 0, 3, -3, -3, -9, 2, -8, -8, -9, -5, -2, -6, -10, 1, -8, -5, 6, -2, -9, 7, 6, -7, -2, -6, 6, -7, -3, -7, 8, 7, -9, 8, 7, -8, -5, -5, 2, 2, -8, 5, -3, -3], "dtype": "int32"}, {"kernel": [1, 7, -4], "dtype": "int32"}], "outputs": [{"out_buffer": [77, -37, -31, -44, -24, -46, 30, 89, -18, -42, 46, -45, -25, -41, -3, 73, -40, 24, -7, -45, 38, 15, 89, -46, 10, 80, -97, 74, -69, 6, 34, 36, 56, 49, 23, -37, -69, 24, -71, 18, -53, -32, 89, -8, -38, -56, -32, -25, -25, -46, 27, 66, -33, -13, 35, -27, -60, -26, 18, -34, -39, -13, -3, 100, -78, 46, -53, 7, -2, 31, -25, -10, -66, 57, -52, 31, -32, -36, 6, 67, -64, 16, 2, 17, 75, -24, 16, -10, -57, -5, -103, 7, 87, -2, -86, 62, -11, -63, -20, -3, 57, -11, 30, -71, -42, 52, 47, -23, -36, -29, -88, 33, 64, -73, 10, 47, 40, 33, -40, -51, -10, 15, -17, 37, -91, 31, 91, -24, -64, -74, 43, 37, -32, 71, -17, 51, -25, -25, -67, -13, -2, 53, 0, -52, 69, 27, -30, -65, -9, 70, -42, -24, -67, 10, -2, 10, 20, -14, 27, 10, 10, 105, -46, 17, -48, -36, -46, 29, -38, 36, -34, 63, -26, 29, 28, -47, 67, -66, 33, -79, 29, 71, -44, -15, 30, 2, -33, -46, 42, -73, 5, -13, -6, 27, -54, 38, 23, -94, 19, 56, 65, -17, -44, -24, -6, -4, 20, -66, -11, 52, 50, -43, -14, -13, 33, -6, 12, -74, 37, -22, -28, -51, -36, 5, -4, -80, 29, -35, -67, 45, 28, -93, 16, 77, -35, 3, -68, 64, -31, 0, -84, 21, 93, -88, 19, 89, -29, -23, -48, 1, 48, -74, 39, -4], "dtype": "int32"}], "rtps": [{"stride": 1, "dtype": "uint32"}]}}
{"kernel_name": "conv1d_k2_s1_bias_relu_bfloat16", "prompt": "/*\nA kernel that performs 1D convolution with kernel size 2 and stride 1 on a bfloat16 input vector, adds a bfloat16 bias, applies ReLU, and writes bfloat16 output. The input is 256-wide and the kernel has size 2.\n>>> conv1d_k2_s1_bias_relu_bfloat16([3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375], [-0.7265625, -1.3828125], -1.5859375)\n[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 256\nkernel size: 2\nout_buffer size: 255\nbias: -1.5859375\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid conv1d_k2_s1_bias_relu_bfloat16(bfloat16 *in_buffer, bfloat16 *kernel, bfloat16 *out_buffer, bfloat16 bias) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t VECTOR_SIZE = 256;\n    constexpr int32_t KERNEL_SIZE = 2;\n    constexpr int32_t STRIDE = 1;\n    uint32_t num_windows = (VECTOR_SIZE - KERNEL_SIZE) / STRIDE + 1;\n\n    for (uint32_t i = 0; i < num_windows; i++) {\n        float acc = 0.0f;\n        for (uint32_t j = 0; j < KERNEL_SIZE; j++) {\n            acc += (float)in_buffer[i * STRIDE + j] * (float)kernel[j];\n        }\n        acc += (float)bias;\n        float relu = acc > 0.0f ? acc : 0.0f;\n        out_buffer[i] = (bfloat16)relu;\n    }\n}", "program_code": "extern \"C\" {\n    void conv1d_k2_s1_bias_relu_bfloat16_wrapper(bfloat16 *in_buffer, bfloat16 *kernel, bfloat16 *out_buffer, bfloat16 bias) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        conv1d_k2_s1_bias_relu_bfloat16(in_buffer, kernel, out_buffer, bias);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375, -0.2060546875, 0.8203125, 0.2890625, 2.90625, 1.5234375, 0.2431640625, 0.88671875, 0.66796875, 2.984375, -0.41015625, 0.625, -1.7109375, -5.09375, 1.3046875, 1.7265625, -1.484375, 4.53125, -2.90625, 0.09130859375, -0.375, 3.0625, 2.9375, 0.310546875, 0.7578125, -1.7734375, -3.96875, -0.6953125, 0.3125, 2.453125, 2.40625, -0.7734375, -0.60546875, -2.09375, -2.84375, -3.40625, 3.90625, -1.015625, -0.875, -2.5, 1.5546875, -3.234375, -0.42578125, -1.7890625, 0.7734375, -1.0234375, -2.359375, -0.056396484375, 0.85546875, 0.1328125, 0.60546875, -1.265625, -0.7265625, -1.34375, -0.71875, -1.625, -3.453125, 0.35546875, -0.8046875, -3.265625, 0.92578125, -1.8125, 0.10400390625, 1.4609375, 0.2578125, 2.28125, -2.46875, 0.8046875, -1.3671875, -1.7421875, -1.15625, -0.625, 0.1123046875, -2.328125, 1.8046875, 0.9296875, -3.078125, 2.96875, 3.796875, 2.359375, -0.359375, -2.140625, 2.109375, -0.8046875, 2.4375, 0.416015625, 1.953125, 0.7109375, 1.4140625, 0.02099609375, 3.578125, 0.25390625, 0.8046875, 3.765625, -2.703125, -2.546875, 1.9375, -2.34375, 3.890625, -0.828125, -1.4921875, 3.84375, 2.96875, 3.734375, 1.8125, -1.71875, 3.8125, -0.53515625, 1.6015625, 1.890625, -0.310546875, 1.2265625, 1.84375, 0.75390625, -2.203125, 0.59765625, 2.65625, -1.390625, -0.298828125, -0.87109375, 3.703125, 1.34375, 0.81640625, -1.5390625, 1.078125, -1.3515625, 0.0634765625, -1.2734375, 1.3515625, 1.15625, -0.416015625, 0.79296875, -2.1875, -2.984375, 0.87890625, 0.333984375, 1.2734375, 4.78125, 1.890625, -1.828125, 2.234375, -2.625, -0.921875, -0.13671875, 3.421875, -1.4921875, -1.65625, -0.197265625, -1.328125, 2.25, -2.15625, -2.296875, -0.875, -0.99609375, 3.859375, 1.8984375, 0.1748046875, -2.453125, 1.6875, -2.0, -3.09375, 2.375, 0.6328125, 1.84375, 0.63671875, 1.7109375, -1.3046875, -2.0625, 1.359375, -1.609375, -1.3828125, -0.91015625, 0.034912109375, -0.70703125, -2.75, -1.2890625, -4.4375, 1.25, -3.203125, -2.203125, 0.1044921875, -1.4765625, 3.09375, -2.578125, 0.53515625, -0.07861328125, -2.34375, 1.046875, -0.34375, 1.546875, 1.6484375, 4.3125, 2.671875, -0.73828125, -0.478515625, 2.203125, 1.3125, 1.28125, -3.234375, -0.048583984375, -1.4765625, 0.55859375, -0.1962890625, 1.8203125, 0.6328125, 1.5703125, -0.93359375, -1.890625, -0.8203125, -0.033935546875, 0.7578125, 4.53125, -0.08447265625, -1.9140625, -0.69140625, -0.92578125, 0.96484375, -3.078125, 0.126953125, 0.3125, 0.46484375, -1.1953125, -0.4765625, -2.84375, -0.98828125, -1.0859375, 0.83203125, -2.3125, 1.5625, 2.984375, -4.125, 0.8515625, 1.3515625, -1.2734375, -0.79296875, -0.265625, -0.59375, -0.6171875, -3.359375, 2.296875, 2.15625, -1.625, -2.9375, 1.0390625, -1.1484375, 0.283203125, -0.63671875, 1.3828125, 1.390625], "dtype": "bfloat16"}, {"kernel": [-0.7265625, -1.3828125], "dtype": "bfloat16"}], "outputs": [{"out_buffer": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.326171875, 6.6875, 0.310546875, 0.0, 0.0, 0.0, 0.0, 0.3984375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.31640625, 5.1875, 2.265625, 0.0, 0.0, 0.0, 0.0, 0.0, 1.75, 3.875, 5.1875, 0.0, 0.0, 0.361328125, 2.5, 0.0, 1.7578125, 1.3515625, 1.1953125, 0.0, 0.0, 2.421875, 0.2060546875, 0.0, 0.0, 0.0, 0.0, 0.337890625, 0.80078125, 0.384765625, 1.1796875, 4.375, 0.431640625, 0.0, 3.515625, 0.0, 0.248046875, 0.0, 0.0, 0.0, 0.0, 0.169921875, 0.0, 0.0, 1.8203125, 1.28125, 0.1181640625, 0.0, 1.5546875, 0.0, 0.0, 1.9921875, 0.0, 0.0, 0.0, 0.0, 1.6328125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.90625, 0.0, 0.2470703125, 0.0, 0.0, 1.078125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9140625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12890625, 0.0, 0.0, 0.0, 0.0, 0.86328125, 4.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.419921875, 1.59375, 0.0, 0.0, 0.0, 1.7890625, 0.0, 0.39453125, 0.0, 0.0, 3.15625, 1.2890625, 0.427734375, 0.0, 0.0, 0.0, 1.6796875, 0.0, 0.0, 4.15625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.21875, 0.0, 0.0, 1.4921875, 0.67578125, 0.0, 0.0, 2.734375, 2.1875, 5.5, 0.0, 1.9375, 3.78125, 0.0, 0.380859375, 0.0, 0.0, 0.0, 0.0, 1.7109375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.953125, 0.83203125, 0.490234375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.703125, 0.921875, 0.0, 0.0, 0.0, 0.0, 1.125, 0.76171875, 0.1962890625, 0.0, 1.96875, 0.474609375, 0.0, 0.0, 0.0, 0.0, 2.6875, 1.84375, 0.6328125, 0.0, 1.0078125, 0.0, 0.0, 1.953125, 0.2333984375, 0.0, 0.0, 0.435546875, 0.0, 0.0, 0.0, 3.515625, 0.0, 0.0, 0.0, 3.65625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "dtype": "bfloat16"}], "rtps": [{"bias": -1.5859375, "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "conv1d_k2_s2_bias_int16", "prompt": "/*\nA kernel that performs a 1D convolution with kernel size 2 and stride 2 on an int16 vector with an int16 kernel and adds a scalar int16 bias to the accumulator before writing the result. Input vector is 128 elements (int16), kernel is length 2 (int16), and bias is scalar int16. The output is ((128 - 2) // 2) + 1 = 64 elements (int16), with result saturated to int16 range.\n>>> conv1d_k2_s2_bias_int16([72, 27, -53, 96, 17, -78, 92, -67], [7, -9], -9)\n[252, -1244, 812, 1238]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 128\nkernel size: 2\nout_buffer size: 64\nbias: -9\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid conv1d_k2_s2_bias_int16(int16_t *in_buffer, int16_t *kernel, int16_t *out_buffer, int16_t bias) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t VECTOR_SIZE = 128;\n    constexpr int32_t KERNEL_SIZE = 2;\n    constexpr int32_t STRIDE = 2;\n    uint32_t num_windows = (VECTOR_SIZE - KERNEL_SIZE) / STRIDE + 1;\n\n    for (uint32_t i = 0; i < num_windows; i++) {\n        int16_t acc = bias;\n        for (uint32_t j = 0; j < KERNEL_SIZE; j++) {\n            acc += in_buffer[i * STRIDE + j] * kernel[j];\n        }\n        if (acc >  32767) acc =  32767;\n        if (acc < -32768) acc = -32768;\n        out_buffer[i] = acc;\n    }\n}", "program_code": "extern \"C\" {\n    void conv1d_k2_s2_bias_int16_wrapper(int16_t *in_buffer, int16_t *kernel, int16_t *out_buffer, int16_t bias) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        conv1d_k2_s2_bias_int16(in_buffer, kernel, out_buffer, bias);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [72, 27, -53, 96, 17, -78, 92, -67, -33, -22, 62, 95, 25, 3, -91, 16, 61, -79, -11, 2, -64, -95, -13, -57, -30, -25, 32, -12, 78, 40, -42, -59, 93, -28, 74, -61, -13, 1, 74, -12, 7, -19, 41, 65, -75, -91, -23, -53, -28, -5, -91, -22, 48, 15, -55, -31, -62, 97, -92, -47, -21, 75, 85, 92, 90, -18, 34, -1, -38, 49, 77, -92, -65, -71, -38, 47, 47, 42, -29, 67, 23, -68, 93, -91, 78, 85, 45, 27, -68, -48, -69, 51, -72, -61, 51, -39, 63, 85, 79, -48, 14, 66, 83, 98, -72, 11, -66, 32, 28, 57, 28, 64, -47, -71, 33, -19, -62, 78, -83, -21, 53, 32, -84, 5, 39, -58, -53, 86], "dtype": "int16"}, {"kernel": [7, -9], "dtype": "int16"}], "outputs": [{"out_buffer": [252, -1244, 812, 1238, -42, -430, 139, -790, 1129, -104, 398, 413, 6, 323, 177, 228, 894, 1058, -109, 617, 211, -307, 285, 307, -160, -448, 192, -115, -1316, -230, -831, -242, 783, 238, -716, 1358, 175, -698, -58, -815, 764, 1461, -228, 63, -53, -951, 36, 699, -333, 976, -505, -310, -612, -759, -326, -389, 301, 393, -1145, -401, 74, -642, 786, -1154], "dtype": "int16"}], "rtps": [{"bias": -9, "dtype": "int16"}]}}
{"kernel_name": "conv1d_k4_s1_bias_relu_bfloat16", "prompt": "/*\nA kernel that performs a 1D convolution with a bfloat16 vector of length 256. Uses a convolution kernel of size 4, stride 1, adds a bfloat16 bias after convolution, applies ReLU, and writes bfloat16 output. Output vector is length 253.\n>>> conv1d_k4_s1_bias_relu_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875], [-0.7265625, -1.3828125, -1.5859375, 0.609375], -0.188477)\n[0.0, 0.0, 0.0, 0.0, 0.0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 256\nkernel size: 4\nout_buffer size: 253\nbias: -0.1884765625\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid conv1d_k4_s1_bias_relu_bfloat16(bfloat16 *in_buffer, bfloat16 *kernel, bfloat16 *out_buffer, bfloat16 bias) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t VECTOR_SIZE = 256;\n    constexpr int32_t KERNEL_SIZE = 4;\n    constexpr int32_t STRIDE = 1;\n    uint32_t num_windows = (VECTOR_SIZE - KERNEL_SIZE) / STRIDE + 1;\n\n    for (uint32_t i = 0; i < num_windows; i++) {\n        float acc = 0.0f;\n        for (uint32_t j = 0; j < KERNEL_SIZE; j++) {\n            acc += (float)in_buffer[i * STRIDE + j] * (float)kernel[j];\n        }\n        acc += (float)bias;\n        float out_val = acc > 0.0f ? acc : 0.0f;\n        out_buffer[i] = (bfloat16)out_val;\n    }\n}", "program_code": "extern \"C\" {\n    void conv1d_k4_s1_bias_relu_bfloat16_wrapper(bfloat16 *in_buffer, bfloat16 *kernel, bfloat16 *out_buffer, bfloat16 bias) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        conv1d_k4_s1_bias_relu_bfloat16(in_buffer, kernel, out_buffer, bias);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625, 0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625, 0.671875, 0.408203125, -0.76953125, 0.5390625, -0.67578125, 0.03173828125, -0.63671875, 0.67578125, 0.578125, -0.2080078125, 0.396484375, -1.09375, -1.4921875, 0.439453125, 0.1669921875, 0.63671875, 2.390625, 0.9453125, -0.9140625, 1.1171875, -1.3125, -0.4609375, -0.068359375, 1.7109375, -0.74609375, -0.828125, -0.0986328125, -0.6640625, 1.125, -1.078125, -1.1484375, -0.4375, -0.498046875, 1.9296875, 0.94921875, 0.08740234375, -1.2265625, 0.84375, -1.0, -1.546875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.65234375, -1.03125, 0.6796875, -0.8046875, -0.69140625, -0.455078125, 0.0174560546875, -0.353515625, -1.375, -0.64453125, -2.21875, 0.625, -1.6015625, -1.1015625, 0.05224609375, -0.73828125, 1.546875, -1.2890625, 0.267578125, -0.039306640625, -1.171875, 0.5234375, -0.171875, 0.7734375, 0.82421875, 2.15625, 1.3359375, -0.369140625, -0.2392578125, 1.1015625, 0.65625, 0.640625, -1.6171875, -0.0242919921875, -0.73828125, 0.279296875, -0.09814453125, 0.91015625, 0.31640625, 0.78515625, -0.466796875, -0.9453125, -0.41015625, -0.0169677734375, 0.37890625, 2.265625, -0.042236328125, -0.95703125, -0.345703125, -0.462890625, 0.482421875, -1.5390625, 0.0634765625, 0.15625, 0.232421875, -0.59765625, -0.23828125, -1.421875, -0.494140625, -0.54296875, 0.416015625, -1.15625, 0.78125, 1.4921875, -2.0625, 0.42578125, 0.67578125, -0.63671875, -0.396484375, -0.1328125, -0.296875, -0.30859375, -1.6796875, 1.1484375, 1.078125, -0.8125, -1.46875, 0.51953125, -0.57421875, 0.1416015625, -0.318359375, 0.69140625, 0.6953125], "dtype": "bfloat16"}, {"kernel": [-0.7265625, -1.3828125, -1.5859375, 0.609375], "dtype": "bfloat16"}], "outputs": [{"out_buffer": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.21875, 3.453125, 0.0, 0.703125, 0.0, 0.0, 0.0, 2.03125, 0.0, 0.0, 0.0, 0.0, 0.0, 3.703125, 3.84375, 2.234375, 0.0, 0.0, 0.0, 0.0, 1.3046875, 2.703125, 6.4375, 0.0, 0.0, 0.0, 3.234375, 0.0, 2.078125, 1.2734375, 2.9375, 0.27734375, 0.0194091796875, 2.09375, 2.125, 0.06982421875, 0.0, 0.0, 0.126953125, 0.6328125, 1.6171875, 1.078125, 1.03125, 4.03125, 2.265625, 0.462890625, 3.109375, 1.078125, 1.828125, 1.09375, 0.0, 0.0, 0.0, 0.34375, 0.0, 0.70703125, 1.4921875, 2.234375, 1.7734375, 0.0, 2.359375, 0.232421875, 0.0, 1.859375, 0.404296875, 0.0, 0.0, 0.0, 1.546875, 0.0, 0.51171875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.921875, 0.3046875, 2.4375, 0.0, 0.0, 1.328125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.55078125, 1.3984375, 0.0, 0.0, 0.0, 2.34375, 0.0, 0.0, 0.0, 0.30859375, 0.0, 0.71484375, 0.0, 1.6796875, 0.0, 0.0, 0.0, 0.0, 0.2392578125, 3.671875, 2.078125, 0.412109375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.73046875, 1.5078125, 2.546875, 0.0, 0.0, 0.8515625, 1.25, 2.28125, 0.0, 0.0, 2.046875, 2.578125, 3.21875, 0.0, 0.0, 0.0, 1.4609375, 0.0, 0.1796875, 3.765625, 0.98828125, 0.0, 0.0, 0.0, 0.0, 0.0, 2.140625, 0.1435546875, 0.4765625, 1.25, 2.078125, 0.69921875, 0.0, 2.078125, 1.640625, 5.59375, 1.3828125, 2.421875, 3.34375, 1.96875, 2.65625, 0.0, 0.416015625, 0.0218505859375, 0.0, 1.8515625, 0.52734375, 0.68359375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.40234375, 0.0, 0.0, 0.0, 1.0, 1.171875, 2.359375, 0.34765625, 0.671875, 0.0, 0.0, 0.0, 0.0, 1.1328125, 2.09375, 1.3203125, 0.9140625, 0.0, 0.0, 0.0, 1.4296875, 2.015625, 0.0, 1.9609375, 1.5859375, 0.734375, 0.0, 0.1796875, 0.0, 2.53125, 2.40625, 2.640625, 0.0, 1.9375, 0.77734375, 0.0, 0.7109375, 1.3125, 0.0, 0.0, 0.75, 0.8515625, 0.56640625, 0.0, 3.8125, 1.1953125, 0.0, 0.0, 2.796875, 1.2578125, 1.15625, 0.0, 0.9609375, 0.0], "dtype": "bfloat16"}], "rtps": [{"bias": -0.1884765625, "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "conv2d_bfloat16", "prompt": "/*\nA kernel that performs a 2D convolution on a bfloat16 input matrix (16x16) with a bfloat16 2x2 kernel and a runtime stride parameter. The output is also in bfloat16. No padding.\n>>> conv2d_bfloat16([[3.53125, 0.80078125, 1.9609375, 4.46875], [2.984375, -0.41015625, 0.625, -1.7109375], [-1.7734375, -3.96875, -0.6953125, 0.3125], [-3.234375, -0.42578125, -1.7890625, 0.7734375]], [[-1.453125, -2.765625], [-3.171875, 1.21875]], 1)\n[[-17.25, -4.53125, -19.25], [-2.421875, 10.625, 6.40625], [23.25, 6.875, 6.75]]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_matrix size: 256\nkernel size: 4\noutput_matrix size: 225\nstride: 1\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid conv2d_bfloat16(bfloat16 *input_matrix, bfloat16 *kernel, bfloat16 *output_matrix, uint32_t stride) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t input_rows = 16;\n    constexpr int32_t input_cols = 16;\n    constexpr int32_t kernel_size = 2;\n    uint32_t output_rows = (input_rows - kernel_size) / stride + 1;\n    uint32_t output_cols = (input_cols - kernel_size) / stride + 1;\n\n    for (uint32_t i = 0; i < output_rows; i++) {\n        for (uint32_t j = 0; j < output_cols; j++) {\n            float conv_sum = 0.f;\n            for (uint32_t ki = 0; ki < kernel_size; ki++) {\n                for (uint32_t kj = 0; kj < kernel_size; kj++) {\n                    float inp = (float)input_matrix[(i * stride + ki) * input_cols + (j * stride + kj)];\n                    float ker = (float)kernel[ki * kernel_size + kj];\n                    conv_sum += inp * ker;\n                }\n            }\n            output_matrix[i * output_cols + j] = (bfloat16)conv_sum;\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void conv2d_bfloat16_wrapper(bfloat16 *input_matrix, bfloat16 *kernel, bfloat16 *output_matrix, uint32_t stride) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        conv2d_bfloat16(input_matrix, kernel, output_matrix, stride);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_matrix": [[3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375, -0.2060546875, 0.8203125, 0.2890625, 2.90625, 1.5234375, 0.2431640625, 0.88671875, 0.66796875], [2.984375, -0.41015625, 0.625, -1.7109375, -5.09375, 1.3046875, 1.7265625, -1.484375, 4.53125, -2.90625, 0.09130859375, -0.375, 3.0625, 2.9375, 0.310546875, 0.7578125], [-1.7734375, -3.96875, -0.6953125, 0.3125, 2.453125, 2.40625, -0.7734375, -0.60546875, -2.09375, -2.84375, -3.40625, 3.90625, -1.015625, -0.875, -2.5, 1.5546875], [-3.234375, -0.42578125, -1.7890625, 0.7734375, -1.0234375, -2.359375, -0.056396484375, 0.85546875, 0.1328125, 0.60546875, -1.265625, -0.7265625, -1.34375, -0.71875, -1.625, -3.453125], [0.35546875, -0.8046875, -3.265625, 0.92578125, -1.8125, 0.10400390625, 1.4609375, 0.2578125, 2.28125, -2.46875, 0.8046875, -1.3671875, -1.7421875, -1.15625, -0.625, 0.1123046875], [-2.328125, 1.8046875, 0.9296875, -3.078125, 2.96875, 3.796875, 2.359375, -0.359375, -2.140625, 2.109375, -0.8046875, 2.4375, 0.416015625, 1.953125, 0.7109375, 1.4140625], [0.02099609375, 3.578125, 0.25390625, 0.8046875, 3.765625, -2.703125, -2.546875, 1.9375, -2.34375, 3.890625, -0.828125, -1.4921875, 3.84375, 2.96875, 3.734375, 1.8125], [-1.71875, 3.8125, -0.53515625, 1.6015625, 1.890625, -0.310546875, 1.2265625, 1.84375, 0.75390625, -2.203125, 0.59765625, 2.65625, -1.390625, -0.298828125, -0.87109375, 3.703125], [1.34375, 0.81640625, -1.5390625, 1.078125, -1.3515625, 0.0634765625, -1.2734375, 1.3515625, 1.15625, -0.416015625, 0.79296875, -2.1875, -2.984375, 0.87890625, 0.333984375, 1.2734375], [4.78125, 1.890625, -1.828125, 2.234375, -2.625, -0.921875, -0.13671875, 3.421875, -1.4921875, -1.65625, -0.197265625, -1.328125, 2.25, -2.15625, -2.296875, -0.875], [-0.99609375, 3.859375, 1.8984375, 0.1748046875, -2.453125, 1.6875, -2.0, -3.09375, 2.375, 0.6328125, 1.84375, 0.63671875, 1.7109375, -1.3046875, -2.0625, 1.359375], [-1.609375, -1.3828125, -0.91015625, 0.034912109375, -0.70703125, -2.75, -1.2890625, -4.4375, 1.25, -3.203125, -2.203125, 0.1044921875, -1.4765625, 3.09375, -2.578125, 0.53515625], [-0.07861328125, -2.34375, 1.046875, -0.34375, 1.546875, 1.6484375, 4.3125, 2.671875, -0.73828125, -0.478515625, 2.203125, 1.3125, 1.28125, -3.234375, -0.048583984375, -1.4765625], [0.55859375, -0.1962890625, 1.8203125, 0.6328125, 1.5703125, -0.93359375, -1.890625, -0.8203125, -0.033935546875, 0.7578125, 4.53125, -0.08447265625, -1.9140625, -0.69140625, -0.92578125, 0.96484375], [-3.078125, 0.126953125, 0.3125, 0.46484375, -1.1953125, -0.4765625, -2.84375, -0.98828125, -1.0859375, 0.83203125, -2.3125, 1.5625, 2.984375, -4.125, 0.8515625, 1.3515625], [-1.2734375, -0.79296875, -0.265625, -0.59375, -0.6171875, -3.359375, 2.296875, 2.15625, -1.625, -2.9375, 1.0390625, -1.1484375, 0.283203125, -0.63671875, 1.3828125, 1.390625]], "dtype": "bfloat16"}, {"kernel": [[-1.453125, -2.765625], [-3.171875, 1.21875]], "dtype": "bfloat16"}], "outputs": [{"output_matrix": [[-17.25, -4.53125, -19.25, -17.625, 17.75, -4.4375, -9.1875, 11.25, -19.875, 7.34375, -9.1875, -3.515625, -9.0, -11.75, -3.203125], [-2.421875, 10.625, 6.40625, 18.625, -1.0546875, -15.25, 3.3125, -11.0, 4.625, 8.8125, 16.5, -21.5, -10.4375, -5.40625, 7.28125], [23.25, 6.875, 6.75, -10.9375, -9.875, 6.0625, 4.03125, 4.125, 11.25, 10.0625, -2.71875, -2.203125, 7.28125, 8.5, 0.279296875], [3.765625, 4.125, 11.9375, -3.4375, 13.875, 5.03125, -6.59375, 0.3515625, -12.125, 11.4375, -0.37109375, 7.0, 8.0625, 8.4375, 14.0], [11.3125, 5.625, -4.5, 17.0, -2.4375, -13.375, -10.75, -8.125, 12.875, -6.3125, 8.125, -0.419921875, 6.78125, -1.921875, 0.06591796875], [2.6875, -16.25, 7.34375, -1.703125, -30.0, -6.5625, 8.0, -2.5625, 9.4375, -14.1875, -4.75, 4.71875, -14.5625, -9.6875, -14.5625], [0.171875, -18.625, 1.0546875, -14.375, -4.375, 13.4375, -3.296875, -1.265625, -12.4375, 4.34375, 6.65625, -18.625, -9.75, -14.75, -3.15625], [-11.3125, -8.5, 2.546875, -12.625, 2.46875, -4.6875, -1.1953125, -7.65625, 0.82421875, 3.828125, -13.375, 3.28125, 13.375, 0.462890625, -8.5], [-17.125, -5.15625, 7.78125, -8.125, 9.0, 6.1875, 2.71875, -17.875, 2.1875, 3.421875, 3.90625, 18.375, -7.84375, 1.8359375, 2.21875], [-4.3125, -7.625, -9.3125, 0.46875, 16.25, -6.0625, -6.6875, 11.875, -0.0130615234375, 3.1875, -1.109375, -4.21875, -4.3125, 11.125, 13.9375], [-5.8125, -7.59375, -0.3125, 5.5625, -2.21875, 10.25, 10.125, 13.5, -13.0625, 1.453125, 2.671875, -7.78125, 9.5625, -5.34375, 8.0625], [3.5625, 13.25, -2.515625, 4.875, 5.75, 7.59375, 3.71875, -6.375, 8.8125, 14.9375, -2.46875, 1.328125, -14.4375, 12.8125, 0.62109375], [4.59375, 3.359375, -5.5625, -3.875, -12.9375, -13.6875, -8.6875, 0.71875, 3.421875, -2.28125, -21.25, -7.5, 12.3125, 5.90625, 8.25], [9.625, -4.78125, -4.8125, -8.1875, 3.515625, 4.625, 12.8125, 3.09375, 2.40625, -19.125, 2.890625, 4.09375, -9.8125, 17.625, -2.375], [7.1875, 1.140625, -1.6171875, 3.765625, 0.91796875, 22.0, 2.203125, -4.375, 0.8515625, 15.75, -5.65625, -6.53125, 5.40625, 7.34375, -7.65625]], "dtype": "bfloat16"}], "rtps": [{"stride": 1, "dtype": "uint32"}]}}
{"kernel_name": "conv2d_int32", "prompt": "/*\nA kernel that performs a 2D convolution operation on an input matrix with a given kernel and stride as runtime parameter. Both matrix and kernel are assumed to have a square shape.\n>>> conv2d_int32([[2, 5, -10, -7], [7, -5, 3, -2], [9, 9, 4, -3], [-5, -4, -2, 7]], [[1, 7, -4], [-3, 8, 1], [9, 7, -1]], 1)\n[[159, 112], [-62, -31]]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_matrix size: 256\nkernel size: 9\noutput_matrix size: 196\nstride: 1\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid conv2d_int32(int32_t *input_matrix, int32_t *kernel, int32_t *output_matrix, uint32_t stride) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t input_rows = 16;\n    constexpr int32_t input_cols = 16;\n    constexpr int32_t kernel_size = 3;\n    uint32_t output_rows = (input_rows - kernel_size) / stride + 1;\n    uint32_t output_cols = (input_cols - kernel_size) / stride + 1;\n\n    for (uint32_t i = 0; i < output_rows; i++) {\n        for (uint32_t j = 0; j < output_cols; j++) {\n            int32_t conv_sum = 0;\n            for (uint32_t ki = 0; ki < kernel_size; ki++) {\n                for (uint32_t kj = 0; kj < kernel_size; kj++) {\n                    conv_sum += input_matrix[(i * stride + ki) * input_cols + (j * stride + kj)] * kernel[ki * kernel_size + kj];\n                }\n            }\n            output_matrix[i * output_cols + j] = conv_sum;\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void conv2d_int32_wrapper(int32_t *input_matrix, int32_t *kernel, int32_t *output_matrix, uint32_t stride) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        conv2d_int32(input_matrix, kernel, output_matrix, stride);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_matrix": [[2, 5, -10, -7, -7, -3, -1, 9, 8, -6, -4, 2, -9, -4, -3, 4], [7, -5, 3, -2, -1, 9, 6, 9, -5, 5, 5, -10, 8, -7, 7, 9], [9, 9, 4, -3, -10, -9, -1, -10, 0, -7, 1, 8, -8, -10, -10, -6], [-5, -4, -2, 7, 5, -6, -1, 0, -9, -9, -3, -1, -7, -4, 1, 4], [8, -10, 4, -7, 2, 0, 1, -6, -4, -6, 5, -7, 2, -6, -2, 4], [5, -7, 5, 3, 6, 7, -5, -1, -7, -10, -5, -10, 7, 8, -6, -8], [6, -7, -8, 0, 3, 6, -3, -1, -10, 0, 8, 1, -8, -8, -7, -7], [8, 4, -7, 7, 8, 4, -1, -9, -6, 0, 1, -2, 1, -8, 9, 6], [-10, -10, -4, 9, 4, 0, 9, -2, 3, -8, -7, -8, 1, 3, 6, -2], [-2, 9, -2, -8, -7, 2, 4, -10, -6, -7, 3, 1, 3, 3, 1, 6], [4, 6, 9, -9, -2, -10, -6, -4, 3, -3, 5, -1, 8, -2, 5, 1], [-4, 5, -9, 2, -7, 8, 5, -7, 0, 2, -4, -7, -5, 1, -10, 1], [-2, 0, 1, -5, 5, -2, -8, 9, 9, 4, -7, -7, -3, -1, -1, -1], [-7, 4, 8, 2, -7, -1, 0, 3, -3, -3, -9, 2, -8, -8, -9, -5], [-2, -6, -10, 1, -8, -5, 6, -2, -9, 7, 6, -7, -2, -6, 6, -7], [-3, -7, 8, 7, -9, 8, 7, -8, -5, -5, 2, 2, -8, 5, -3, -3]], "dtype": "int32"}, {"kernel": [[1, 7, -4], [-3, 8, 1], [9, 7, -1]], "dtype": "int32"}], "outputs": [{"output_matrix": [[159, 112, -32, -125, -95, -94, 0, -56, -8, -91, 32, 68, -230, -109], [-62, -31, -27, -21, -1, -37, 12, -77, -186, 16, -71, -78, -227, -83], [35, -3, 75, -73, -116, 47, -106, -139, -184, -42, 77, -108, -70, -104], [-134, -22, 21, 165, 70, 18, -65, -95, -219, -90, -173, -52, 30, 31], [-131, -9, -113, 68, 103, 3, -49, -152, -228, 92, -23, 86, -116, -230], [-39, -47, 7, 162, 212, -29, -59, -210, -74, 69, -133, -71, -16, -56], [-166, -251, 88, 153, 91, 25, 19, -81, -45, -55, -91, -85, -70, 144], [57, 9, 31, -71, -16, 159, -108, -154, -196, -68, -28, 99, -17, 96], [81, 1, -2, -78, -73, -41, -200, 14, -59, 30, -35, 60, 67, 74], [122, 52, -191, -103, -101, 162, -57, -56, -77, 55, -97, -24, -43, -29], [34, 32, -41, -45, 81, -110, -135, 192, 90, -15, -192, -38, -46, -68], [31, 27, 88, -56, -80, 10, 85, 43, -11, -165, -130, -80, -77, -209], [5, -44, -144, -67, -77, -89, 89, -68, 3, 34, -2, -173, -121, -62], [-147, -23, 210, -123, -56, 177, 2, -167, 19, -87, 1, -66, -98, 35]], "dtype": "int32"}], "rtps": [{"stride": 1, "dtype": "uint32"}]}}
{"kernel_name": "conv2d_k2_s1_bias_relu_bfloat16", "prompt": "/*\nA kernel that performs 2D convolution with a 2x2 bfloat16 kernel on a 16x16 bfloat16 input, stride 1, adds a bfloat16 bias, and applies ReLU activation to each output. Output is a 15x15 bfloat16 matrix.\n>>> conv2d_k2_s1_bias_relu_bfloat16([[3.53125, 0.80078125, 1.9609375, 4.46875], [2.984375, -0.41015625, 0.625, -1.7109375], [-1.7734375, -3.96875, -0.6953125, 0.3125], [-3.234375, -0.42578125, -1.7890625, 0.7734375]], [[-0.7265625, -1.3828125], [-1.5859375, 0.609375]], -1.1875)\n[[0.0, 0.0, 0.0], [0.0, 4.125, 2.015625], [10.4375, 2.25, 2.1875]]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\nkernel size: 4\noutput size: 225\nbias: -1.1875\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid conv2d_k2_s1_bias_relu_bfloat16(bfloat16 *input, bfloat16 *kernel, bfloat16 *output, bfloat16 bias) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t IN_ROWS = 16;\n    constexpr int32_t IN_COLS = 16;\n    constexpr int32_t KERNEL_SIZE = 2;\n    constexpr int32_t STRIDE = 1;\n\n    uint32_t OUT_ROWS = (IN_ROWS - KERNEL_SIZE) / STRIDE + 1;\n    uint32_t OUT_COLS = (IN_COLS - KERNEL_SIZE) / STRIDE + 1;\n\n    for (uint32_t i = 0; i < OUT_ROWS; i++) {\n        for (uint32_t j = 0; j < OUT_COLS; j++) {\n            float acc = (float)bias;\n            for (uint32_t ki = 0; ki < KERNEL_SIZE; ki++) {\n                for (uint32_t kj = 0; kj < KERNEL_SIZE; kj++) {\n                    uint32_t in_idx = (i * STRIDE + ki) * IN_COLS + (j * STRIDE + kj);\n                    uint32_t k_idx = ki * KERNEL_SIZE + kj;\n                    acc += (float)input[in_idx] * (float)kernel[k_idx];\n                }\n            }\n            float relu = acc > 0.0f ? acc : 0.0f;\n            output[i * OUT_COLS + j] = (bfloat16)relu;\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void conv2d_k2_s1_bias_relu_bfloat16_wrapper(bfloat16 *input, bfloat16 *kernel, bfloat16 *output, bfloat16 bias) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        conv2d_k2_s1_bias_relu_bfloat16(input, kernel, output, bias);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [[3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375, -0.2060546875, 0.8203125, 0.2890625, 2.90625, 1.5234375, 0.2431640625, 0.88671875, 0.66796875], [2.984375, -0.41015625, 0.625, -1.7109375, -5.09375, 1.3046875, 1.7265625, -1.484375, 4.53125, -2.90625, 0.09130859375, -0.375, 3.0625, 2.9375, 0.310546875, 0.7578125], [-1.7734375, -3.96875, -0.6953125, 0.3125, 2.453125, 2.40625, -0.7734375, -0.60546875, -2.09375, -2.84375, -3.40625, 3.90625, -1.015625, -0.875, -2.5, 1.5546875], [-3.234375, -0.42578125, -1.7890625, 0.7734375, -1.0234375, -2.359375, -0.056396484375, 0.85546875, 0.1328125, 0.60546875, -1.265625, -0.7265625, -1.34375, -0.71875, -1.625, -3.453125], [0.35546875, -0.8046875, -3.265625, 0.92578125, -1.8125, 0.10400390625, 1.4609375, 0.2578125, 2.28125, -2.46875, 0.8046875, -1.3671875, -1.7421875, -1.15625, -0.625, 0.1123046875], [-2.328125, 1.8046875, 0.9296875, -3.078125, 2.96875, 3.796875, 2.359375, -0.359375, -2.140625, 2.109375, -0.8046875, 2.4375, 0.416015625, 1.953125, 0.7109375, 1.4140625], [0.02099609375, 3.578125, 0.25390625, 0.8046875, 3.765625, -2.703125, -2.546875, 1.9375, -2.34375, 3.890625, -0.828125, -1.4921875, 3.84375, 2.96875, 3.734375, 1.8125], [-1.71875, 3.8125, -0.53515625, 1.6015625, 1.890625, -0.310546875, 1.2265625, 1.84375, 0.75390625, -2.203125, 0.59765625, 2.65625, -1.390625, -0.298828125, -0.87109375, 3.703125], [1.34375, 0.81640625, -1.5390625, 1.078125, -1.3515625, 0.0634765625, -1.2734375, 1.3515625, 1.15625, -0.416015625, 0.79296875, -2.1875, -2.984375, 0.87890625, 0.333984375, 1.2734375], [4.78125, 1.890625, -1.828125, 2.234375, -2.625, -0.921875, -0.13671875, 3.421875, -1.4921875, -1.65625, -0.197265625, -1.328125, 2.25, -2.15625, -2.296875, -0.875], [-0.99609375, 3.859375, 1.8984375, 0.1748046875, -2.453125, 1.6875, -2.0, -3.09375, 2.375, 0.6328125, 1.84375, 0.63671875, 1.7109375, -1.3046875, -2.0625, 1.359375], [-1.609375, -1.3828125, -0.91015625, 0.034912109375, -0.70703125, -2.75, -1.2890625, -4.4375, 1.25, -3.203125, -2.203125, 0.1044921875, -1.4765625, 3.09375, -2.578125, 0.53515625], [-0.07861328125, -2.34375, 1.046875, -0.34375, 1.546875, 1.6484375, 4.3125, 2.671875, -0.73828125, -0.478515625, 2.203125, 1.3125, 1.28125, -3.234375, -0.048583984375, -1.4765625], [0.55859375, -0.1962890625, 1.8203125, 0.6328125, 1.5703125, -0.93359375, -1.890625, -0.8203125, -0.033935546875, 0.7578125, 4.53125, -0.08447265625, -1.9140625, -0.69140625, -0.92578125, 0.96484375], [-3.078125, 0.126953125, 0.3125, 0.46484375, -1.1953125, -0.4765625, -2.84375, -0.98828125, -1.0859375, 0.83203125, -2.3125, 1.5625, 2.984375, -4.125, 0.8515625, 1.3515625], [-1.2734375, -0.79296875, -0.265625, -0.59375, -0.6171875, -3.359375, 2.296875, 2.15625, -1.625, -2.9375, 1.0390625, -1.1484375, 0.283203125, -0.63671875, 1.3828125, 1.390625]], "dtype": "bfloat16"}, {"kernel": [[-0.7265625, -1.3828125], [-1.5859375, 0.609375]], "dtype": "bfloat16"}], "outputs": [{"output": [[0.0, 0.0, 0.0, 0.0, 7.6875, 0.0, 0.0, 4.4375, 0.0, 2.484375, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 4.125, 2.015625, 8.125, 0.0, 0.0, 0.46875, 0.0, 1.125, 3.234375, 7.0625, 0.0, 0.0, 0.0, 2.453125], [10.4375, 2.25, 2.1875, 0.0, 0.0, 1.84375, 0.82421875, 0.87109375, 4.4375, 3.859375, 0.0, 0.0, 2.453125, 3.0625, 0.0], [0.6953125, 0.8828125, 4.78125, 0.0, 5.75, 1.328125, 0.0, 0.0, 0.0, 4.53125, 0.0, 2.3125, 2.84375, 3.03125, 5.8125], [4.46875, 1.6171875, 0.0, 7.34375, 0.0, 0.0, 0.0, 0.0, 5.25, 0.0, 2.875, 0.0, 2.203125, 0.0, 0.0], [0.1552734375, 0.0, 2.484375, 0.0, 0.0, 0.0, 2.8125, 0.0, 3.53125, 0.0, 0.0, 1.171875, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 5.53125, 0.0, 0.0, 0.0, 0.98828125, 2.140625, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.08447265625, 0.0, 0.050537109375, 0.0, 0.0, 0.0, 0.0, 0.73046875, 0.0, 0.45703125, 5.5, 0.0, 0.0], [0.0, 0.0, 2.703125, 0.0, 3.3125, 1.90625, 0.1708984375, 0.0, 0.0, 0.5234375, 0.765625, 8.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 6.90625, 0.0, 0.0, 4.75, 0.0, 0.408203125, 0.0, 0.0, 0.0, 4.375, 5.78125], [0.0, 0.0, 0.0, 1.59375, 0.0, 3.921875, 3.890625, 5.5625, 0.0, 0.0, 0.150390625, 0.0, 3.59375, 0.0, 2.84375], [0.58984375, 5.4375, 0.0, 1.25, 1.6796875, 2.609375, 0.67578125, 0.0, 3.21875, 6.28125, 0.0, 0.0, 0.0, 5.21875, 0.0], [1.1015625, 0.48828125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.52734375, 0.0, 0.0, 0.0, 4.96875, 1.765625, 2.953125], [3.640625, 0.0, 0.0, 0.0, 0.56640625, 1.125, 5.21875, 0.361328125, 0.0184326171875, 0.0, 0.255859375, 0.859375, 0.0, 7.65625, 0.0], [2.40625, 0.0, 0.0, 0.69140625, 0.0, 9.8125, 0.0, 0.0, 0.0, 6.6875, 0.0, 0.0, 1.5078125, 2.484375, 0.0]], "dtype": "bfloat16"}], "rtps": [{"bias": -1.1875, "dtype": "bfloat16"}]}}
{"kernel_name": "conv2d_k4_s2_bias_relu_bfloat16", "prompt": "/*\nA kernel that performs 2D convolution on a bfloat16 input (16x16) with a 4x4 bfloat16 kernel, stride 2 (runtime parameter), adds scalar bias, and applies ReLU. Produces a 7x7 bfloat16 matrix.\n>>> conv2d_k4_s2_bias_relu_bfloat16([[1.765625, 0.400390625, 0.98046875, 2.234375], [1.4921875, -0.205078125, 0.3125, -0.85546875], [-0.88671875, -1.984375, -0.34765625, 0.15625], [-1.6171875, -0.212890625, -0.89453125, 0.38671875]], [[-0.7265625, -1.3828125, -1.5859375, 0.609375], [-1.1875, -0.5078125, -0.59765625, -0.052490234375], [-1.9375, 0.1884765625, 0.5234375, 0.08837890625], [-0.310546875, 0.09716796875, 0.3984375, -2.765625]], 2.95312, 2)\n[[0.0]]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 256\nkernel size: 16\nout_buffer size: 49\nbias: 2.953125\nstride: 2\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid conv2d_k4_s2_bias_relu_bfloat16(bfloat16 *in_buffer, bfloat16 *kernel, bfloat16 *out_buffer, bfloat16 bias, uint32_t stride) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t IN_ROWS = 16;\n    constexpr int32_t IN_COLS = 16;\n    constexpr int32_t KERNEL_SIZE = 4;\n\n    uint32_t out_rows = (IN_ROWS - KERNEL_SIZE) / stride + 1;\n    uint32_t out_cols = (IN_COLS - KERNEL_SIZE) / stride + 1;\n\n    for (uint32_t i = 0; i < out_rows; i++) {\n        for (uint32_t j = 0; j < out_cols; j++) {\n            bfloat16 acc = 0;\n            for (uint32_t ki = 0; ki < KERNEL_SIZE; ki++) {\n                for (uint32_t kj = 0; kj < KERNEL_SIZE; kj++) {\n                    acc += in_buffer[(i * stride + ki) * IN_COLS + (j * stride + kj)] * kernel[ki * KERNEL_SIZE + kj];\n                }\n            }\n            acc += bias;\n            bfloat16 relu = acc > 0.0f ? acc : 0.0f;\n            out_buffer[i * out_cols + j] = relu;\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void conv2d_k4_s2_bias_relu_bfloat16_wrapper(bfloat16 *in_buffer, bfloat16 *kernel, bfloat16 *out_buffer, bfloat16 bias, uint32_t stride) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        conv2d_k4_s2_bias_relu_bfloat16(in_buffer, kernel, out_buffer, bias, stride);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [[1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375], [1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625], [-0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375], [-1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625], [0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375], [-1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125], [0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625], [-0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625], [0.671875, 0.408203125, -0.76953125, 0.5390625, -0.67578125, 0.03173828125, -0.63671875, 0.67578125, 0.578125, -0.2080078125, 0.396484375, -1.09375, -1.4921875, 0.439453125, 0.1669921875, 0.63671875], [2.390625, 0.9453125, -0.9140625, 1.1171875, -1.3125, -0.4609375, -0.068359375, 1.7109375, -0.74609375, -0.828125, -0.0986328125, -0.6640625, 1.125, -1.078125, -1.1484375, -0.4375], [-0.498046875, 1.9296875, 0.94921875, 0.08740234375, -1.2265625, 0.84375, -1.0, -1.546875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.65234375, -1.03125, 0.6796875], [-0.8046875, -0.69140625, -0.455078125, 0.0174560546875, -0.353515625, -1.375, -0.64453125, -2.21875, 0.625, -1.6015625, -1.1015625, 0.05224609375, -0.73828125, 1.546875, -1.2890625, 0.267578125], [-0.039306640625, -1.171875, 0.5234375, -0.171875, 0.7734375, 0.82421875, 2.15625, 1.3359375, -0.369140625, -0.2392578125, 1.1015625, 0.65625, 0.640625, -1.6171875, -0.0242919921875, -0.73828125], [0.279296875, -0.09814453125, 0.91015625, 0.31640625, 0.78515625, -0.466796875, -0.9453125, -0.41015625, -0.0169677734375, 0.37890625, 2.265625, -0.042236328125, -0.95703125, -0.345703125, -0.462890625, 0.482421875], [-1.5390625, 0.0634765625, 0.15625, 0.232421875, -0.59765625, -0.23828125, -1.421875, -0.494140625, -0.54296875, 0.416015625, -1.15625, 0.78125, 1.4921875, -2.0625, 0.42578125, 0.67578125], [-0.63671875, -0.396484375, -0.1328125, -0.296875, -0.30859375, -1.6796875, 1.1484375, 1.078125, -0.8125, -1.46875, 0.51953125, -0.57421875, 0.1416015625, -0.318359375, 0.69140625, 0.6953125]], "dtype": "bfloat16"}, {"kernel": [[-0.7265625, -1.3828125, -1.5859375, 0.609375], [-1.1875, -0.5078125, -0.59765625, -0.052490234375], [-1.9375, 0.1884765625, 0.5234375, 0.08837890625], [-0.310546875, 0.09716796875, 0.3984375, -2.765625]], "dtype": "bfloat16"}], "outputs": [{"out_buffer": [[0.0, 1.96875, 0.03662109375, 0.2177734375, 2.953125, 3.0, 4.0], [13.1875, 0.83984375, 4.875, 0.0, 4.34375, 0.0, 7.5625], [5.53125, 5.875, 0.0, 4.25, 2.265625, 6.28125, 0.0], [0.0, 0.2353515625, 1.25, 8.0625, 2.078125, 3.21875, 1.578125], [2.40625, 6.59375, 14.3125, 8.125, 0.26171875, 1.0859375, 0.33984375], [0.27734375, 6.1875, 5.3125, 0.7890625, 3.484375, 0.0, 3.25], [6.84375, 4.34375, 0.0, 7.1875, 3.1875, 0.87109375, 1.15625]], "dtype": "bfloat16"}], "rtps": [{"bias": 2.953125, "dtype": "bfloat16"}, {"stride": 2, "dtype": "uint32"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "cos_bfloat16", "prompt": "/*\nThis AIE kernel computes the elementwise cosine (cos) function of a bfloat16 input vector. Input and output shapes are (256,) and the result is written as bfloat16.\n>>> cos_bfloat16([0.5859375, 2.578125, 1.234375, 0.5390625, -0.91796875, 1.75, -0.75, 4.6875])\n[0.83203125, -0.84375, 0.330078125, 0.859375, 0.609375, -0.1787109375, 0.73046875, -0.02490234375]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid cos_bfloat16(bfloat16 *input_vector, bfloat16 *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    constexpr float PI = 3.14159265359f;\n    \n    for (uint32_t i = 0; i < vector_size; i++) {\n        float x = (float)input_vector[i];\n        while (x > PI) x -= 2.0f * PI;\n        while (x < -PI) x += 2.0f * PI;\n        float x2 = x * x;\n        float x4 = x2 * x2;\n        float x6 = x4 * x2;\n        float x8 = x6 * x2;\n        float x10 = x8 * x2;\n        float result = 1.0f\n            - x2 * 0.5f\n            + x4 * 0.04166666666667f\n            - x6 * 0.00138888888889f\n            + x8 * 0.00002480158730f\n            - x10 * 0.0000002755731922f;\n        output_vector[i] = (bfloat16)result;\n    }\n}", "program_code": "extern \"C\" {\n    void cos_bfloat16_wrapper(bfloat16 *input_vector, bfloat16 *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        cos_bfloat16(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [0.5859375, 2.578125, 1.234375, 0.5390625, -0.91796875, 1.75, -0.75, 4.6875, 5.5625, -1.3984375, 3.5, 0.34765625, 0.81640625, 5.09375, -5.15625, -4.96875, -5.75, 3.984375, 3.34375, 4.4375, 5.75, 3.59375, -0.462890625, 3.359375, -4.59375, 1.6796875, -4.28125, 5.34375, 0.26171875, -1.0234375, -2.828125, 3.296875, -0.52734375, 0.8203125, -5.78125, 1.4140625, 1.34375, 1.40625, 5.3125, 2.1875, -1.6875, -0.75390625, 2.375, -5.28125, 2.0, 2.046875, -3.46875, -4.4375, -2.21875, -1.6328125, 0.84375, -0.73828125, 5.875, -4.78125, -3.5, -4.0625, 1.8359375, -2.953125, -0.404296875, -3.0625, -4.09375, -4.6875, 1.875, -4.34375, -3.640625, -1.578125, 3.859375, -4.84375, 4.0625, -4.84375, 5.71875, -0.376953125, 5.71875, 1.2578125, 2.875, -5.53125, -2.609375, -4.5625, -2.453125, -4.5625, -2.1875, -1.03125, -5.21875, 2.3125, 0.80078125, -2.8125, 0.279296875, -4.875, 0.91015625, 5.15625, -2.171875, 2.015625, -4.40625, 2.59375, -2.53125, -3.796875, 1.0390625, -5.75, 3.953125, -5.9375, 2.140625, -2.765625, 2.828125, 5.53125, -3.015625, 0.9140625, 1.1015625, 0.8671875, -3.328125, 5.4375, -0.6328125, 4.15625, 2.390625, -2.4375, 3.765625, -1.2421875, 4.5625, 0.9765625, 4.59375, 2.3125, 2.703125, 0.015869140625, 5.46875, 1.7265625, -0.9140625, 1.2734375, -5.78125, -2.375, 1.921875, -2.515625, 1.4140625, -0.85546875, -4.375, -2.421875, 0.83984375, 1.09375, 0.890625, 1.8359375, 1.828125, -0.82421875, 4.75, -1.5859375, -0.76953125, 4.6875, 3.671875, 2.453125, -4.8125, 5.03125, 2.578125, 6.0, -4.21875, 4.40625, -4.0625, 1.3828125, -4.5, 4.1875, 3.6875, 0.828125, -1.1171875, -5.15625, 2.375, -0.55859375, 2.671875, 4.40625, 5.71875, 4.28125, -5.875, -1.6796875, 2.765625, -3.9375, 0.251953125, -5.34375, -3.59375, -5.78125, 3.53125, -3.3125, -1.859375, 5.125, 2.453125, -5.625, -4.03125, 1.4609375, 0.92578125, -3.140625, 5.21875, 1.3671875, 0.427734375, 1.078125, 2.765625, -2.25, -1.21875, -3.484375, -3.765625, 5.34375, 2.875, -0.1142578125, -3.265625, -2.953125, -5.3125, -0.78515625, -2.265625, 2.359375, -1.46875, -3.84375, -5.71875, -5.1875, 2.15625, -0.5546875, 0.439453125, 4.75, 5.875, -3.390625, 1.953125, -2.84375, -5.75, 3.09375, -2.15625, -1.3984375, 1.0625, 3.96875, 1.546875, 4.46875, -2.71875, 3.578125, -3.765625, 5.4375, 2.25, -3.40625, 5.375, 2.765625, -2.953125, -3.4375, 0.21875, -5.6875, -3.515625, -0.90234375, -1.5078125, -0.4375, -2.671875, 1.0390625, 4.375, -4.59375, 0.208984375, -4.40625, 2.609375, -1.25, 0.78515625, -3.796875, -4.25, -0.1435546875, -1.734375, 5.28125, 3.1875, 2.984375, 4.84375, -5.0], "dtype": "bfloat16"}], "outputs": [{"output_vector": [0.83203125, -0.84375, 0.330078125, 0.859375, 0.609375, -0.1787109375, 0.73046875, -0.02490234375, 0.75, 0.171875, -0.9375, 0.94140625, 0.68359375, 0.373046875, 0.4296875, 0.25390625, 0.859375, -0.6640625, -0.98046875, -0.271484375, 0.859375, -0.8984375, 0.89453125, -0.9765625, -0.1181640625, -0.10888671875, -0.41796875, 0.58984375, 0.96484375, 0.51953125, -0.953125, -0.98828125, 0.86328125, 0.68359375, 0.875, 0.15625, 0.2255859375, 0.1640625, 0.56640625, -0.578125, -0.1162109375, 0.73046875, -0.71875, 0.5390625, -0.416015625, -0.458984375, -0.9453125, -0.271484375, -0.60546875, -0.06201171875, 0.6640625, 0.73828125, 0.91796875, 0.06884765625, -0.9375, -0.60546875, -0.26171875, -0.98046875, 0.91796875, -0.99609375, -0.578125, -0.02490234375, -0.298828125, -0.359375, -0.87890625, -0.00732421875, -0.75390625, 0.130859375, -0.60546875, 0.130859375, 0.84375, 0.9296875, 0.84375, 0.30859375, -0.96484375, 0.73046875, -0.86328125, -0.1494140625, -0.7734375, -0.1494140625, -0.578125, 0.515625, 0.484375, -0.67578125, 0.6953125, -0.9453125, 0.9609375, 0.162109375, 0.61328125, 0.4296875, -0.56640625, -0.4296875, -0.30078125, -0.85546875, -0.8203125, -0.79296875, 0.5078125, 0.859375, -0.6875, 0.94140625, -0.5390625, -0.9296875, -0.953125, 0.73046875, -0.9921875, 0.609375, 0.453125, 0.6484375, -0.984375, 0.6640625, 0.8046875, -0.52734375, -0.73046875, -0.76171875, -0.8125, 0.322265625, -0.1494140625, 0.55859375, -0.1181640625, -0.67578125, -0.90625, 1.0, 0.6875, -0.1552734375, 0.609375, 0.29296875, 0.875, -0.71875, -0.34375, -0.80859375, 0.15625, 0.65625, -0.330078125, -0.75390625, 0.66796875, 0.458984375, 0.62890625, -0.26171875, -0.25390625, 0.6796875, 0.03759765625, -0.01513671875, 0.71875, -0.02490234375, -0.86328125, -0.7734375, 0.10009765625, 0.314453125, -0.84375, 0.9609375, -0.474609375, -0.30078125, -0.60546875, 0.1865234375, -0.2109375, -0.5, -0.85546875, 0.67578125, 0.4375, 0.4296875, -0.71875, 0.84765625, -0.890625, -0.30078125, 0.84375, -0.41796875, 0.91796875, -0.10888671875, -0.9296875, -0.69921875, 0.96875, 0.58984375, -0.8984375, 0.875, -0.92578125, -0.984375, -0.28515625, 0.400390625, -0.7734375, 0.79296875, -0.62890625, 0.10986328125, 0.6015625, -1.0, 0.484375, 0.2021484375, 0.91015625, 0.47265625, -0.9296875, -0.62890625, 0.345703125, -0.94140625, -0.8125, 0.58984375, -0.96484375, 0.9921875, -0.9921875, -0.98046875, 0.56640625, 0.70703125, -0.640625, -0.7109375, 0.10205078125, -0.76171875, 0.84375, 0.45703125, -0.55078125, 0.8515625, 0.90625, 0.03759765625, 0.91796875, -0.96875, -0.373046875, -0.95703125, 0.859375, -1.0, -0.55078125, 0.171875, 0.486328125, -0.67578125, 0.02392578125, -0.2412109375, -0.91015625, -0.90625, -0.8125, 0.6640625, -0.62890625, -0.96484375, 0.61328125, -0.9296875, -0.98046875, -0.95703125, 0.9765625, 0.828125, -0.9296875, 0.62109375, 0.06298828125, 0.90625, -0.890625, 0.5078125, -0.330078125, -0.1181640625, 0.9765625, -0.30078125, -0.86328125, 0.314453125, 0.70703125, -0.79296875, -0.4453125, 0.98828125, -0.1630859375, 0.5390625, -1.0, -0.98828125, 0.130859375, 0.283203125], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "cumsum_bfloat16", "prompt": "/*\nThis AIE kernel computes the elementwise cumulative sum (cumsum) of a bfloat16 input vector of length 256. Each output element is the sum of all input elements up to and including that position.\n>>> cumsum_bfloat16([5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125])\n[5.28125, 6.5, 9.4375, 16.125, 21.75, 18.75, 21.625, 21.25]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin size: 256\nout size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid cumsum_bfloat16(bfloat16 *in, bfloat16 *out) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n    float sum = 0.0f;\n    for (int i = 0; i < N; ++i) {\n        sum += float(in[i]);\n        out[i] = bfloat16(sum);\n    }\n}", "program_code": "extern \"C\" {\n    void cumsum_bfloat16_wrapper(bfloat16 *in, bfloat16 *out) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        cumsum_bfloat16(in, out);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in": [5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125, -0.310546875, 1.234375, 0.431640625, 4.375, 2.28125, 0.365234375, 1.328125, 1.0, 4.46875, -0.6171875, 0.9375, -2.5625, -7.65625, 1.9609375, 2.59375, -2.21875, 6.8125, -4.375, 0.1376953125, -0.5625, 4.59375, 4.40625, 0.46484375, 1.1328125, -2.65625, -5.9375, -1.046875, 0.46875, 3.6875, 3.609375, -1.1640625, -0.90625, -3.140625, -4.25, -5.125, 5.84375, -1.53125, -1.3125, -3.765625, 2.328125, -4.84375, -0.63671875, -2.6875, 1.1640625, -1.53125, -3.546875, -0.08447265625, 1.28125, 0.19921875, 0.90625, -1.90625, -1.0859375, -2.015625, -1.078125, -2.4375, -5.1875, 0.53125, -1.203125, -4.875, 1.390625, -2.71875, 0.15625, 2.1875, 0.38671875, 3.421875, -3.703125, 1.203125, -2.046875, -2.609375, -1.734375, -0.93359375, 0.1689453125, -3.5, 2.703125, 1.3984375, -4.59375, 4.46875, 5.6875, 3.53125, -0.5390625, -3.21875, 3.15625, -1.2109375, 3.671875, 0.625, 2.9375, 1.0703125, 2.125, 0.031494140625, 5.34375, 0.380859375, 1.203125, 5.65625, -4.03125, -3.8125, 2.90625, -3.515625, 5.84375, -1.2421875, -2.25, 5.78125, 4.4375, 5.59375, 2.71875, -2.578125, 5.71875, -0.8046875, 2.40625, 2.84375, -0.46484375, 1.84375, 2.765625, 1.1328125, -3.296875, 0.89453125, 3.984375, -2.078125, -0.44921875, -1.3046875, 5.5625, 2.015625, 1.21875, -2.3125, 1.6171875, -2.015625, 0.095703125, -1.90625, 2.03125, 1.7265625, -0.625, 1.1875, -3.28125, -4.46875, 1.3203125, 0.5, 1.90625, 7.15625, 2.828125, -2.734375, 3.34375, -3.953125, -1.3828125, -0.205078125, 5.125, -2.234375, -2.484375, -0.294921875, -1.9921875, 3.375, -3.234375, -3.4375, -1.3125, -1.4921875, 5.78125, 2.84375, 0.26171875, -3.671875, 2.53125, -3.0, -4.625, 3.5625, 0.94921875, 2.765625, 0.95703125, 2.578125, -1.953125, -3.109375, 2.046875, -2.40625, -2.0625, -1.3671875, 0.052490234375, -1.0625, -4.125, -1.9296875, -6.65625, 1.875, -4.8125, -3.3125, 0.15625, -2.21875, 4.625, -3.875, 0.80078125, -0.11767578125, -3.5, 1.5703125, -0.515625, 2.3125, 2.46875, 6.5, 4.0, -1.109375, -0.71875, 3.296875, 1.96875, 1.921875, -4.84375, -0.07275390625, -2.21875, 0.83984375, -0.294921875, 2.734375, 0.953125, 2.359375, -1.3984375, -2.828125, -1.2265625, -0.051025390625, 1.140625, 6.78125, -0.126953125, -2.875, -1.0390625, -1.390625, 1.4453125, -4.625, 0.189453125, 0.46875, 0.6953125, -1.7890625, -0.71484375, -4.28125, -1.4765625, -1.625, 1.25, -3.46875, 2.34375, 4.46875, -6.21875, 1.28125, 2.03125, -1.9140625, -1.1953125, -0.3984375, -0.89453125, -0.92578125, -5.03125, 3.453125, 3.234375, -2.4375, -4.40625, 1.5625, -1.7265625, 0.42578125, -0.95703125, 2.078125, 2.078125], "dtype": "bfloat16"}], "outputs": [{"out": [5.28125, 6.5, 9.4375, 16.125, 21.75, 18.75, 21.625, 21.25, 20.875, 22.125, 22.5, 26.875, 29.25, 29.625, 30.875, 31.875, 36.25, 35.75, 36.75, 34.0, 26.5, 28.375, 31.0, 28.75, 35.5, 31.25, 31.375, 30.75, 35.5, 39.75, 40.25, 41.5, 38.75, 32.75, 31.75, 32.25, 36.0, 39.5, 38.25, 37.5, 34.25, 30.125, 25.0, 30.75, 29.25, 28.0, 24.125, 26.5, 21.625, 21.0, 18.375, 19.5, 18.0, 14.4375, 14.375, 15.625, 15.8125, 16.75, 14.8125, 13.75, 11.75, 10.625, 8.1875, 3.015625, 3.546875, 2.34375, -2.53125, -1.1328125, -3.859375, -3.703125, -1.5078125, -1.125, 2.296875, -1.40625, -0.203125, -2.25, -4.84375, -6.59375, -7.53125, -7.34375, -10.875, -8.125, -6.75, -11.375, -6.875, -1.1953125, 2.34375, 1.796875, -1.421875, 1.734375, 0.5234375, 4.1875, 4.8125, 7.75, 8.8125, 10.9375, 11.0, 16.375, 16.75, 17.875, 23.625, 19.5, 15.75, 18.625, 15.125, 21.0, 19.75, 17.5, 23.25, 27.625, 33.25, 36.0, 33.5, 39.25, 38.25, 40.75, 43.5, 43.0, 45.0, 47.75, 48.75, 45.5, 46.5, 50.5, 48.25, 48.0, 46.5, 52.25, 54.25, 55.5, 53.0, 54.75, 52.75, 52.75, 51.0, 53.0, 54.75, 54.0, 55.25, 52.0, 47.5, 48.75, 49.25, 51.25, 58.25, 61.25, 58.5, 61.75, 57.75, 56.5, 56.25, 61.25, 59.25, 56.75, 56.25, 54.25, 57.75, 54.5, 51.0, 49.75, 48.25, 54.0, 57.0, 57.25, 53.5, 56.0, 53.0, 48.5, 52.0, 53.0, 55.75, 56.5, 59.25, 57.25, 54.25, 56.25, 53.75, 51.75, 50.25, 50.5, 49.25, 45.25, 43.25, 36.5, 38.5, 33.75, 30.375, 30.5, 28.25, 33.0, 29.0, 29.875, 29.75, 26.25, 27.75, 27.25, 29.625, 32.0, 38.5, 42.5, 41.5, 40.75, 44.0, 46.0, 48.0, 43.0, 43.0, 40.75, 41.75, 41.25, 44.0, 45.0, 47.5, 46.0, 43.25, 42.0, 42.0, 43.0, 49.75, 49.75, 46.75, 45.75, 44.5, 45.75, 41.25, 41.5, 41.75, 42.5, 40.75, 40.0, 35.75, 34.25, 32.75, 34.0, 30.5, 32.75, 37.25, 31.0, 32.25, 34.25, 32.5, 31.25, 30.875, 30.0, 29.0, 24.0, 27.5, 30.625, 28.25, 23.875, 25.375, 23.625, 24.125, 23.125, 25.25, 27.25], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.02, "rtol": 0.02}}
{"kernel_name": "cumsum_int16", "prompt": "/*\nThis AIE kernel computes the cumulative sum (cumsum) of a 256-element int16_t input vector. The result is written to the output buffer, with saturation to int16_t range on overflow.\n>>> cumsum_int16([184, -373, 59, 464, 129, 290, -308, -467])\n[184, -189, -130, 334, 463, 753, 445, -22]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 256\nout_buffer size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid cumsum_int16(int16_t *in_buffer, int16_t *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n    int32_t acc = 0;\n    for (int i = 0; i < N; ++i) {\n        acc += static_cast<int32_t>(in_buffer[i]);\n        // Clamp to int16_t range\n        if (acc > 32767) acc = 32767;\n        if (acc < -32768) acc = -32768;\n        out_buffer[i] = static_cast<int16_t>(acc);\n    }\n}", "program_code": "extern \"C\" {\n    void cumsum_int16_wrapper(int16_t *in_buffer, int16_t *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        cumsum_int16(in_buffer, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [184, -373, 59, 464, 129, 290, -308, -467, 335, 90, 263, 430, 207, 393, -141, -271, -491, -384, 223, 429, -223, -155, 254, 114, 304, -495, 99, -457, -430, -425, -28, 144, 100, 190, -104, -40, -186, 53, 205, 84, -14, 186, 51, -413, 369, -326, 235, 100, -137, 349, -359, 177, -257, 37, 21, 345, 59, -428, 107, 277, 90, 416, -6, -385, -199, 476, 81, 255, -206, 209, -236, 321, 347, -69, 197, -52, 202, 350, 146, -401, -182, 484, -351, -323, -236, 255, 47, 297, -182, 159, 476, -353, -41, 410, 83, -77, -377, -212, 477, 461, -245, -235, -322, 197, -99, 139, -31, 44, 64, 43, -93, 214, 296, -256, 51, -349, -183, 175, 453, 10, 447, -41, 64, 382, -334, -317, -302, -472, 379, 302, -112, -372, 169, -372, -293, 432, 262, -447, 41, 401, 93, 50, -322, -12, -266, 256, -5, -227, 252, -165, -91, -112, 284, 117, 151, -458, 315, -58, -492, 43, -259, 388, 493, -243, 268, -179, 163, 499, -138, 437, 374, -443, -431, -209, 189, 370, 320, -381, 442, 279, 460, -70, -25, -418, 443, -409, -243, 396, -456, -102, -309, 111, 422, 65, -216, 408, 322, 133, 4, 438, -30, -416, -428, -297, 107, -176, -238, 274, -119, 464, 43, -453, 297, 139, -124, 159, -369, -169, 472, 215, 368, 318, -320, -256, -285, 346, 32, -357, 364, 160, -111, -273, 158, 454, 426, 291, -322, 219, 147, 409, -435, -127, -312, 353, -495, 60, -192, -195, 363, 81, 333, -331, 95, 175, 291, -52], "dtype": "int16"}], "outputs": [{"out_buffer": [184, -189, -130, 334, 463, 753, 445, -22, 313, 403, 666, 1096, 1303, 1696, 1555, 1284, 793, 409, 632, 1061, 838, 683, 937, 1051, 1355, 860, 959, 502, 72, -353, -381, -237, -137, 53, -51, -91, -277, -224, -19, 65, 51, 237, 288, -125, 244, -82, 153, 253, 116, 465, 106, 283, 26, 63, 84, 429, 488, 60, 167, 444, 534, 950, 944, 559, 360, 836, 917, 1172, 966, 1175, 939, 1260, 1607, 1538, 1735, 1683, 1885, 2235, 2381, 1980, 1798, 2282, 1931, 1608, 1372, 1627, 1674, 1971, 1789, 1948, 2424, 2071, 2030, 2440, 2523, 2446, 2069, 1857, 2334, 2795, 2550, 2315, 1993, 2190, 2091, 2230, 2199, 2243, 2307, 2350, 2257, 2471, 2767, 2511, 2562, 2213, 2030, 2205, 2658, 2668, 3115, 3074, 3138, 3520, 3186, 2869, 2567, 2095, 2474, 2776, 2664, 2292, 2461, 2089, 1796, 2228, 2490, 2043, 2084, 2485, 2578, 2628, 2306, 2294, 2028, 2284, 2279, 2052, 2304, 2139, 2048, 1936, 2220, 2337, 2488, 2030, 2345, 2287, 1795, 1838, 1579, 1967, 2460, 2217, 2485, 2306, 2469, 2968, 2830, 3267, 3641, 3198, 2767, 2558, 2747, 3117, 3437, 3056, 3498, 3777, 4237, 4167, 4142, 3724, 4167, 3758, 3515, 3911, 3455, 3353, 3044, 3155, 3577, 3642, 3426, 3834, 4156, 4289, 4293, 4731, 4701, 4285, 3857, 3560, 3667, 3491, 3253, 3527, 3408, 3872, 3915, 3462, 3759, 3898, 3774, 3933, 3564, 3395, 3867, 4082, 4450, 4768, 4448, 4192, 3907, 4253, 4285, 3928, 4292, 4452, 4341, 4068, 4226, 4680, 5106, 5397, 5075, 5294, 5441, 5850, 5415, 5288, 4976, 5329, 4834, 4894, 4702, 4507, 4870, 4951, 5284, 4953, 5048, 5223, 5514, 5462], "dtype": "int16"}]}}
{"kernel_name": "divide_bfloat16", "prompt": "/*\nThis kernel divides two bfloat16 vectors elementwise, stores the quotient in out. Division by zero returns 0.0 as output for that element.\n>>> divide_bfloat16([8.8125, 2.0, 4.90625, 11.1875, 9.3125, -4.875, 4.75, -0.7578125], [0.0, -6.90625, -7.90625, 3.046875, -5.9375, -2.53125, -2.984375, -0.263671875])\n[0.0, -0.2890625, -0.62109375, 3.671875, -1.5703125, 1.9296875, -1.59375, 2.875]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\na size: 256\nb size: 256\nout size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid divide_bfloat16(bfloat16 *a, bfloat16 *b, bfloat16 *out) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    for (int i = 0; i < vector_size; i++) {\n        if (b[i] == (bfloat16)0.0f) {\n            out[i] = (bfloat16)0.0f;\n        } else {\n            out[i] = (bfloat16)((float)a[i] / (float)b[i]);\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void divide_bfloat16_wrapper(bfloat16 *a, bfloat16 *b, bfloat16 *out) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        divide_bfloat16(a, b, out);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"a": [8.8125, 2.0, 4.90625, 11.1875, 9.3125, -4.875, 4.75, -0.7578125, -0.515625, 2.046875, 0.71875, 7.28125, 3.8125, 0.609375, 2.21875, 1.671875, 7.46875, -1.0234375, 1.5625, -4.28125, -12.75, 3.265625, 4.3125, -3.703125, 11.375, -7.28125, 0.228515625, -0.9375, 7.65625, 7.34375, 0.7734375, 1.890625, -4.4375, -9.875, -1.7421875, 0.78125, 6.15625, 6.0, -1.9375, -1.5078125, -5.25, -7.09375, -8.5625, 9.75, -2.546875, -2.1875, -6.25, 3.890625, -8.0625, -1.0625, -4.46875, 1.9375, -2.546875, -5.90625, -0.140625, 2.140625, 0.33203125, 1.515625, -3.171875, -1.8125, -3.359375, -1.796875, -4.0625, -8.625, 0.88671875, -2.015625, -8.125, 2.3125, -4.53125, 0.259765625, 3.640625, 0.64453125, 5.6875, -6.1875, 2.015625, -3.421875, -4.34375, -2.890625, -1.5546875, 0.28125, -5.8125, 4.5, 2.328125, -7.6875, 7.4375, 9.5, 5.90625, -0.8984375, -5.34375, 5.28125, -2.015625, 6.125, 1.0390625, 4.875, 1.78125, 3.53125, 0.052490234375, 8.9375, 0.6328125, 2.015625, 9.4375, -6.75, -6.34375, 4.84375, -5.875, 9.6875, -2.0625, -3.734375, 9.625, 7.40625, 9.3125, 4.53125, -4.3125, 9.5625, -1.34375, 4.0, 4.75, -0.7734375, 3.078125, 4.625, 1.8828125, -5.5, 1.4921875, 6.625, -3.46875, -0.75, -2.171875, 9.25, 3.359375, 2.03125, -3.84375, 2.703125, -3.375, 0.1591796875, -3.171875, 3.375, 2.890625, -1.0390625, 1.9765625, -5.46875, -7.46875, 2.203125, 0.83203125, 3.171875, 11.9375, 4.71875, -4.5625, 5.59375, -6.59375, -2.3125, -0.341796875, 8.5625, -3.71875, -4.125, -0.4921875, -3.3125, 5.625, -5.40625, -5.75, -2.1875, -2.484375, 9.625, 4.75, 0.4375, -6.125, 4.21875, -5.0, -7.71875, 5.9375, 1.5859375, 4.59375, 1.59375, 4.28125, -3.25, -5.15625, 3.40625, -4.03125, -3.453125, -2.28125, 0.08740234375, -1.7734375, -6.875, -3.21875, -11.125, 3.125, -8.0, -5.53125, 0.26171875, -3.703125, 7.71875, -6.46875, 1.3359375, -0.1962890625, -5.84375, 2.609375, -0.859375, 3.859375, 4.125, 10.8125, 6.6875, -1.84375, -1.1953125, 5.5, 3.28125, 3.203125, -8.0625, -0.12158203125, -3.6875, 1.3984375, -0.490234375, 4.5625, 1.5859375, 3.9375, -2.328125, -4.71875, -2.046875, -0.0849609375, 1.8984375, 11.3125, -0.2109375, -4.78125, -1.7265625, -2.3125, 2.40625, -7.71875, 0.31640625, 0.78125, 1.1640625, -2.984375, -1.1875, -7.125, -2.46875, -2.71875, 2.078125, -5.78125, 3.90625, 7.46875, -10.375, 2.125, 3.390625, -3.1875, -1.984375, -0.6640625, -1.4921875, -1.546875, -8.375, 5.75, 5.40625, -4.0625, -7.34375, 2.609375, -2.875, 0.7109375, -1.59375, 3.453125, 3.46875], "dtype": "bfloat16"}, {"b": [0.0, -6.90625, -7.90625, 3.046875, -5.9375, -2.53125, -2.984375, -0.263671875, -9.6875, 0.9453125, 2.625, 0.44140625, -1.5546875, 0.486328125, 1.9921875, -13.875, 9.75, 1.953125, -3.265625, -1.953125, 2.46875, -0.58203125, -10.125, 10.3125, -0.55078125, 5.09375, -3.453125, 7.6875, 1.4296875, 3.046875, -5.21875, 6.0625, 3.453125, 6.5, -3.140625, -2.40625, 11.5, -5.3125, -0.6796875, 5.6875, 0.48828125, 2.921875, -2.0, 1.8515625, -6.53125, 8.3125, -0.58984375, -3.40625, 3.328125, -2.296875, -6.65625, 0.0, 3.46875, -0.796875, -0.66796875, 5.375, -5.625, -3.65625, -1.921875, 0.47265625, -0.2109375, -1.4375, -0.30859375, -0.53515625, -3.59375, -4.0625, 1.375, -4.46875, -5.78125, -1.5625, -0.7890625, 11.3125, -3.53125, 4.71875, 3.734375, -5.9375, 3.859375, -5.90625, -13.3125, 3.03125, -8.75, 2.25, -3.421875, 8.3125, 5.34375, -2.265625, -3.4375, -6.0625, -2.203125, -1.3984375, -1.8203125, 0.78515625, 2.890625, 1.75, -3.828125, -7.1875, 6.8125, -3.453125, -3.265625, -2.609375, -9.1875, -2.390625, 0.0, 3.109375, 3.5, 0.018798828125, 4.65625, 1.703125, -0.07861328125, 0.8046875, -0.953125, -1.9765625, -1.3359375, -5.625, 1.3984375, -4.96875, 4.21875, -1.25, 0.2470703125, 2.46875, 3.21875, -7.84375, -1.03125, 4.40625, -8.5, 1.9375, -11.25, -5.125, 0.193359375, -8.3125, -4.9375, -7.34375, 8.25, 0.8203125, 2.84375, -1.1171875, -1.765625, -8.0625, -1.4609375, -3.8125, 4.28125, 5.71875, 7.34375, 4.25, -3.0, -5.59375, 3.828125, 1.78125, -8.8125, 1.78125, 4.0625, 0.294921875, -0.92578125, 0.0, -7.21875, 4.0, -1.546875, -1.1640625, 8.6875, 3.421875, 1.8515625, 0.7109375, 7.59375, 8.625, 4.65625, 2.90625, -10.5, 0.6171875, -0.65234375, 0.470703125, 4.71875, -13.6875, -2.84375, 1.3515625, -2.328125, -7.09375, 4.34375, 1.3828125, -4.84375, 1.5703125, 4.09375, 0.0264892578125, 4.0, 0.390625, -1.9765625, -5.8125, -0.4296875, 0.97265625, 4.375, -0.57421875, 2.28125, -4.8125, -3.90625, -0.55078125, -5.28125, 4.09375, 2.3125, 1.3984375, 1.6953125, 10.125, -2.34375, -11.0, 0.99609375, -0.25390625, 0.0, -4.90625, -2.203125, 0.90625, -2.515625, 12.0625, -4.8125, -3.96875, -11.4375, 1.2578125, -10.0625, -2.703125, -1.375, -3.546875, 8.6875, 4.96875, 6.59375, -4.40625, 5.65625, 2.484375, 3.859375, 5.15625, -4.53125, -2.125, 4.3125, -13.25, 7.5625, 2.765625, -0.228515625, 1.1015625, -5.15625, -1.75, 5.5, 6.5, 13.5, -0.369140625, -3.296875, -2.578125, -5.09375, -0.388671875, 1.9140625, -0.1708984375, 5.46875, -1.171875, -1.734375, -2.90625, -8.1875, -7.84375, -5.90625, 6.5, 4.46875, 0.0], "dtype": "bfloat16"}], "outputs": [{"out": [0.0, -0.2890625, -0.62109375, 3.671875, -1.5703125, 1.9296875, -1.59375, 2.875, 0.05322265625, 2.171875, 0.2734375, 16.5, -2.453125, 1.25, 1.1171875, -0.12060546875, 0.765625, -0.5234375, -0.478515625, 2.1875, -5.15625, -5.625, -0.42578125, -0.359375, -20.625, -1.4296875, -0.06640625, -0.1220703125, 5.34375, 2.40625, -0.1484375, 0.3125, -1.28125, -1.515625, 0.5546875, -0.32421875, 0.53515625, -1.1328125, 2.84375, -0.265625, -10.75, -2.421875, 4.28125, 5.28125, 0.390625, -0.263671875, 10.625, -1.140625, -2.421875, 0.462890625, 0.671875, 0.0, -0.734375, 7.40625, 0.2109375, 0.3984375, -0.05908203125, -0.4140625, 1.6484375, -3.828125, 15.9375, 1.25, 13.1875, 16.125, -0.2470703125, 0.49609375, -5.90625, -0.515625, 0.78515625, -0.166015625, -4.625, 0.056884765625, -1.609375, -1.3125, 0.5390625, 0.578125, -1.125, 0.490234375, 0.11669921875, 0.0927734375, 0.6640625, 2.0, -0.6796875, -0.92578125, 1.390625, -4.1875, -1.71875, 0.1484375, 2.421875, -3.78125, 1.109375, 7.8125, 0.359375, 2.78125, -0.46484375, -0.4921875, 0.0076904296875, -2.59375, -0.193359375, -0.7734375, -1.0234375, 2.828125, 0.0, 1.5546875, -1.6796875, 516.0, -0.443359375, -2.1875, -122.5, 9.1875, -9.75, -2.296875, 3.234375, -1.703125, -0.9609375, -0.8046875, 1.125, 0.6171875, 12.4375, 1.875, 0.5859375, 0.703125, -1.4453125, 1.5, 0.408203125, -0.38671875, 0.193359375, -1.8046875, 17.375, -0.244140625, 0.77734375, -0.3671875, -0.408203125, 0.1943359375, -1.1171875, -3.015625, -1.640625, 0.12890625, -1.3515625, 1.4375, -1.7421875, 0.384765625, 0.11328125, 0.74609375, -3.984375, -0.84375, -1.1953125, 3.140625, 0.75, -1.296875, -0.083984375, 29.0, 4.03125, 0.0, 0.068359375, -0.828125, -3.640625, 4.65625, -0.66015625, -0.640625, -1.34375, 13.5625, 0.625, 0.05078125, -1.3125, 1.453125, 0.4765625, -12.5, -9.125, 3.375, 0.97265625, -0.1162109375, -1.5078125, -2.40625, 2.21875, -0.48046875, -0.9296875, -2.5, 0.470703125, 0.0556640625, -0.43359375, -260.0, -0.8046875, -28.5, -1.578125, 1.375, 12.875, 0.26953125, -0.84765625, -13.4375, -2.828125, -0.27734375, 0.05029296875, 10.625, -0.494140625, -0.2099609375, 1.671875, 2.953125, 6.375, 0.66015625, 0.78515625, 0.10888671875, 5.53125, -12.9375, 0.0, 1.640625, 0.05517578125, -4.0625, -0.5546875, -0.04052734375, -0.94921875, -0.400390625, -0.34375, -1.8515625, 0.46875, 0.7578125, 0.061767578125, -0.53515625, 1.3046875, -0.04248046875, -0.7265625, 0.392578125, -0.408203125, 0.96875, -2.0, 0.061279296875, -0.1728515625, -0.546875, -0.69140625, 0.08984375, -0.94140625, -0.89453125, 11.875, 1.8828125, 1.125, -2.234375, 1.359375, -1.59375, 0.1572265625, -9.1875, 0.96875, 0.76953125, 0.1298828125, 3.84375, -0.80859375, 49.0, 1.0546875, -4.625, 2.34375, 2.53125, -0.318359375, 0.3671875, -0.12060546875, -0.2451171875, 0.7734375, 0.0], "dtype": "bfloat16"}]}}
{"kernel_name": "dotproduct_bfloat16", "prompt": "/*\nAn AIE kernel that performs a dot product operation on two bfloat16 input vectors of the same size.\n>>> dotproduct_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875], [0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625], 64)\n[-1.484375]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nvector1 size: 64\nvector2 size: 64\nresult size: 1\nvector_size: 64\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid dotproduct_bfloat16(bfloat16 *vector1, bfloat16 *vector2, bfloat16 *result, uint32_t vector_size) {\n    // Implementation goes here\n}\n", "canonical_solution": "*result = 0;\n    for (uint32_t i = 0; i < vector_size; i++) {\n        *result += vector1[i] * vector2[i];\n    }\n}", "program_code": "extern \"C\" {\n    void dotproduct_bfloat16_wrapper(bfloat16 *vector1, bfloat16 *vector2, bfloat16 *result, uint32_t vector_size) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        dotproduct_bfloat16(vector1, vector2, result, vector_size);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"vector1": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625], "dtype": "bfloat16"}, {"vector2": [0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625], "dtype": "bfloat16"}], "outputs": [{"result": [-17.75], "dtype": "bfloat16"}], "rtps": [{"vector_size": 64, "dtype": "uint32"}]}}
{"kernel_name": "dotproduct_bias_relu_bfloat16", "prompt": "/*\nThis kernel computes the dot product of two bfloat16 vectors of size 64, adds a bfloat16 bias (passed as an RTP), applies a ReLU, and writes the single bfloat16 output.\n>>> dotproduct_bias_relu_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875], [0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625], 0.671875, 64)\n[0.0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin0 size: 64\nin1 size: 64\nout size: 1\nbias: 0.671875\nvector_size: 64\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid dotproduct_bias_relu_bfloat16(bfloat16 *in0, bfloat16 *in1, bfloat16 *out, bfloat16 bias, uint32_t vector_size) {\n    // Implementation goes here\n}\n", "canonical_solution": "bfloat16 acc = 0;\n    for (uint32_t i = 0; i < vector_size; i++) {\n        acc += in0[i] * in1[i];\n    }\n    acc += bias;\n    acc = acc > 0 ? acc : 0;\n    *out = acc;\n}", "program_code": "extern \"C\" {\n    void dotproduct_bias_relu_bfloat16_wrapper(bfloat16 *in0, bfloat16 *in1, bfloat16 *out, bfloat16 bias, uint32_t vector_size) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        dotproduct_bias_relu_bfloat16(in0, in1, out, bias, vector_size);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in0": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625], "dtype": "bfloat16"}, {"in1": [0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625], "dtype": "bfloat16"}], "outputs": [{"out": [0.0], "dtype": "bfloat16"}], "rtps": [{"bias": 0.671875, "dtype": "bfloat16"}, {"vector_size": 64, "dtype": "uint32"}]}}
{"kernel_name": "dotproduct_bias_relu_int8", "prompt": "/*\nThis kernel computes the dot product of two int8 vectors of length 256, adds a scalar int32 bias, applies ReLU, clamps the result to int8_t range, and writes the result to a single-element int8_t output buffer.\n>>> dotproduct_bias_relu_int8([-10, -8, -16, 3, 18, 2, -20, -8], [-3, 2, -11, 0, -12, -9, -12, 11], -10)\n98\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin0 size: 256\nin1 size: 256\nout size: 1\nbias: -10\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid dotproduct_bias_relu_int8(int8_t *in0, int8_t *in1, int8_t *out, int8_t bias) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t N = 256;\n    int32_t acc = 0;\n    for (int i = 0; i < N; i++) {\n        acc += (int32_t)in0[i] * (int32_t)in1[i];\n    }\n    acc += bias;\n    if (acc < 0) acc = 0;\n    if (acc > 127) acc = 127;\n    if (acc < -128) acc = -128;\n    *out = (int8_t)acc;\n}", "program_code": "extern \"C\" {\n    void dotproduct_bias_relu_int8_wrapper(int8_t *in0, int8_t *in1, int8_t *out, int8_t bias) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        dotproduct_bias_relu_int8(in0, in1, out, bias);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in0": [-10, -8, -16, 3, 18, 2, -20, -8, 13, 4, -17, -6, 6, -2, 14, 7, -17, -9, 19, 17, 4, -11, 16, -1, 10, 13, 11, 1, -3, 5, 17, 2, 18, 14, 16, -15, 3, -8, -14, -9, 16, 4, -16, -6, 4, 6, -8, -7, -8, -15, 14, -19, -18, -12, 18, -10, 19, -10, -5, 3, 17, -13, -12, 11, 4, 10, -3, -3, -9, -7, 16, 17, 18, 5, -18, -11, 2, -7, -2, -12, 4, 11, 2, -11, 7, -6, 2, 0, 3, 17, -12, -15, -4, -1, -15, 10, -2, 18, 1, -15, 10, -12, -13, -13, -5, -13, 15, 9, 10, -20, -11, 10, -2, -14, 15, 12, 4, 19, 1, -8, -12, -7, -18, 15, 9, -17, -15, -1, -18, -4, -13, -1, -8, -9, -6, -13, 10, 19, 13, 12, 9, -3, 15, -19, 0, -11, -7, 16, -10, -3, -11, -2, 1, 12, 14, -18, 11, 6, 3, -15, -10, -18, 8, 7, -12, 19, 3, 12, 15, -17, -9, -14, 18, -16, -14, 8, 4, 14, 15, -16, -3, -20, 9, 14, -20, -5, -16, 16, 19, -2, 8, 9, 10, -15, 3, -3, 18, 18, -6, 8, -7, 14, 9, -3, 14, -5, 5, -16, -4, 19, -14, -9, -12, 8, 11, 8, -1, 13, -19, -3, -20, 19, -19, 3, 19, 5, -5, -15, 15, 18, 19, -9, -20, 13, 7, -2, 8, 7, 7, -4, -19, 13, -20, -20, -6, -4, 15, -10, 6, 7, 18, 8, 9, -8, -9, -1], "dtype": "int8"}, {"in1": [-3, 2, -11, 0, -12, -9, -12, 11, 14, -16, -3, -14, -14, -16, 7, 11, 6, -16, 9, 19, -1, 14, -17, 0, -9, -8, -9, 16, 7, 19, 16, 0, 3, -20, -6, -5, 0, -5, 16, 12, 0, -14, -15, 15, -2, 7, 10, 11, 3, -5, -13, 2, -7, -9, -19, 8, -3, 1, -15, 14, -3, 11, 15, -15, 18, -19, -13, -1, 15, 2, 3, -20, -15, 16, 10, 11, 8, 7, -15, 8, -2, 10, -17, -20, 13, 7, 4, 3, 11, -6, -17, 2, 16, 14, 19, 5, 4, 15, -3, 9, -17, -11, -3, 12, 14, -14, -18, -7, -17, -7, -3, -17, -6, 19, 19, 3, 6, 1, -11, 12, -20, 9, -15, -20, -12, -10, -10, -1, -11, 18, -12, -14, -15, 10, -7, -16, 8, 3, 4, -5, -9, 2, 7, -18, 16, 10, 5, -8, 14, 4, 19, -3, 10, 18, 13, 15, 15, -7, 10, -3, -4, -17, 19, -19, -2, 6, -15, -4, 15, -10, -8, -3, 0, 8, 9, -3, -4, -17, -10, -9, -18, 7, 1, -15, -6, 7, -8, 4, -4, -19, -1, 16, 8, -14, 1, -10, 7, 18, 2, -4, 4, -13, -7, -3, 17, -18, -9, 7, -18, 15, 3, -19, 13, -4, 17, 12, 13, 0, 17, 3, -20, -16, 2, -10, 18, 7, -15, -17, -1, 13, 17, 0, 3, 17, 17, 2, -15, -7, -16, 17, -15, -11, 0, -7, 10, 10, -19, 4, 17, 14, -15, -18, -17, -2, -3, -17], "dtype": "int8"}], "outputs": [{"out": 127, "dtype": "int8"}], "rtps": [{"bias": -10, "dtype": "int8"}]}}
{"kernel_name": "dotproduct_int32", "prompt": "/*\nAn AIE kernel that performs a dot product operation on two int32 input vectors of the same size.\n>>> dotproduct_int32([2, 5, -10, -7, -7, -3, -1, 9], [1, 7, -4, -3, 8, 1, 9, 7])\n93\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nvector1 size: 256\nvector2 size: 256\nresult size: 1\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid dotproduct_int32(int32_t *vector1, int32_t *vector2, int32_t *result) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    *result = 0;\n    for (uint32_t i = 0; i < vector_size; i++) {\n        *result += vector1[i] * vector2[i];\n    }\n}", "program_code": "extern \"C\" {\n    void dotproduct_int32_wrapper(int32_t *vector1, int32_t *vector2, int32_t *result) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        dotproduct_int32(vector1, vector2, result);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"vector1": [2, 5, -10, -7, -7, -3, -1, 9, 8, -6, -4, 2, -9, -4, -3, 4, 7, -5, 3, -2, -1, 9, 6, 9, -5, 5, 5, -10, 8, -7, 7, 9, 9, 9, 4, -3, -10, -9, -1, -10, 0, -7, 1, 8, -8, -10, -10, -6, -5, -4, -2, 7, 5, -6, -1, 0, -9, -9, -3, -1, -7, -4, 1, 4, 8, -10, 4, -7, 2, 0, 1, -6, -4, -6, 5, -7, 2, -6, -2, 4, 5, -7, 5, 3, 6, 7, -5, -1, -7, -10, -5, -10, 7, 8, -6, -8, 6, -7, -8, 0, 3, 6, -3, -1, -10, 0, 8, 1, -8, -8, -7, -7, 8, 4, -7, 7, 8, 4, -1, -9, -6, 0, 1, -2, 1, -8, 9, 6, -10, -10, -4, 9, 4, 0, 9, -2, 3, -8, -7, -8, 1, 3, 6, -2, -2, 9, -2, -8, -7, 2, 4, -10, -6, -7, 3, 1, 3, 3, 1, 6, 4, 6, 9, -9, -2, -10, -6, -4, 3, -3, 5, -1, 8, -2, 5, 1, -4, 5, -9, 2, -7, 8, 5, -7, 0, 2, -4, -7, -5, 1, -10, 1, -2, 0, 1, -5, 5, -2, -8, 9, 9, 4, -7, -7, -3, -1, -1, -1, -7, 4, 8, 2, -7, -1, 0, 3, -3, -3, -9, 2, -8, -8, -9, -5, -2, -6, -10, 1, -8, -5, 6, -2, -9, 7, 6, -7, -2, -6, 6, -7, -3, -7, 8, 7, -9, 8, 7, -8, -5, -5, 2, 2, -8, 5, -3, -3], "dtype": "int32"}, {"vector2": [1, 7, -4, -3, 8, 1, 9, 7, -1, 4, -1, 8, -10, -1, 1, 7, -1, -10, 6, 0, -6, -7, 9, -2, 4, -10, 9, -2, -3, 3, 7, -10, 1, -6, -10, 0, 4, 8, -6, -7, 9, -3, -2, 3, -5, -10, -2, 5, 5, 1, -6, -3, 3, 0, 4, 7, 9, -7, -1, 8, -8, 9, 1, 8, 3, -9, -4, 0, 6, 6, -7, 7, 0, -1, 2, 3, -4, -4, -3, -2, 3, -3, 6, 5, -2, -7, -4, 7, -3, -8, 6, 8, 3, -6, -6, 2, 7, -9, -5, -9, 9, 9, -3, -1, 7, -1, -10, 9, -6, 7, 6, -7, 0, -9, -6, -6, 6, 6, 5, 0, 3, -2, 1, -4, -1, 5, -7, 9, 2, 8, 7, 0, -8, -9, 1, -7, 2, -6, -9, 7, -10, -3, -6, -7, -5, -4, -7, -8, -2, -9, -6, -10, 3, 9, -1, -5, -9, -3, -2, -3, -7, 2, -7, -4, -3, 9, -10, -5, 1, -1, 9, -3, -5, -2, 1, 4, -10, -2, 9, -4, 0, 9, -8, -10, 9, 4, -10, 9, -4, -9, 2, 8, 3, -1, -6, 7, -7, -8, 3, 5, -6, -1, -6, 7, 8, 3, 3, -8, -7, -1, 2, 5, -8, 9, -4, 4, 6, 5, -2, -10, 0, 1, 3, -3, -4, 3, 5, -1, -4, 1, 8, -3, -9, -1, -8, 8, 4, -5, -6, 8, 4, 8, -9, 2, -10, -1, 6, -8, -2, 9, 0, 6, -9, -10, -5, -8], "dtype": "int32"}], "outputs": [{"result": 189, "dtype": "int32"}]}}
{"kernel_name": "elementwise_max_bfloat16", "prompt": "/*\nThis AIE kernel takes two bfloat16 input vectors of size 256 and writes their elementwise maximum to an output bfloat16 vector.\n>>> elementwise_max_bfloat16([5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125], [-1.453125, -2.765625, -3.171875, 1.21875, -2.375, -1.015625, -1.1953125, -0.10498046875])\n[5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -1.015625, 2.84375, -0.10498046875]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput0 size: 256\ninput1 size: 256\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid elementwise_max_bfloat16(bfloat16 *input0, bfloat16 *input1, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t VECTOR_SIZE = 256;\n    for (int i = 0; i < VECTOR_SIZE; i++) {\n        float a = float(input0[i]);\n        float b = float(input1[i]);\n        output[i] = bfloat16(a > b ? a : b);\n    }\n}", "program_code": "extern \"C\" {\n    void elementwise_max_bfloat16_wrapper(bfloat16 *input0, bfloat16 *input1, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        elementwise_max_bfloat16(input0, input1, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input0": [5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125, -0.310546875, 1.234375, 0.431640625, 4.375, 2.28125, 0.365234375, 1.328125, 1.0, 4.46875, -0.6171875, 0.9375, -2.5625, -7.65625, 1.9609375, 2.59375, -2.21875, 6.8125, -4.375, 0.1376953125, -0.5625, 4.59375, 4.40625, 0.46484375, 1.1328125, -2.65625, -5.9375, -1.046875, 0.46875, 3.6875, 3.609375, -1.1640625, -0.90625, -3.140625, -4.25, -5.125, 5.84375, -1.53125, -1.3125, -3.765625, 2.328125, -4.84375, -0.63671875, -2.6875, 1.1640625, -1.53125, -3.546875, -0.08447265625, 1.28125, 0.19921875, 0.90625, -1.90625, -1.0859375, -2.015625, -1.078125, -2.4375, -5.1875, 0.53125, -1.203125, -4.875, 1.390625, -2.71875, 0.15625, 2.1875, 0.38671875, 3.421875, -3.703125, 1.203125, -2.046875, -2.609375, -1.734375, -0.93359375, 0.1689453125, -3.5, 2.703125, 1.3984375, -4.59375, 4.46875, 5.6875, 3.53125, -0.5390625, -3.21875, 3.15625, -1.2109375, 3.671875, 0.625, 2.9375, 1.0703125, 2.125, 0.031494140625, 5.34375, 0.380859375, 1.203125, 5.65625, -4.03125, -3.8125, 2.90625, -3.515625, 5.84375, -1.2421875, -2.25, 5.78125, 4.4375, 5.59375, 2.71875, -2.578125, 5.71875, -0.8046875, 2.40625, 2.84375, -0.46484375, 1.84375, 2.765625, 1.1328125, -3.296875, 0.89453125, 3.984375, -2.078125, -0.44921875, -1.3046875, 5.5625, 2.015625, 1.21875, -2.3125, 1.6171875, -2.015625, 0.095703125, -1.90625, 2.03125, 1.7265625, -0.625, 1.1875, -3.28125, -4.46875, 1.3203125, 0.5, 1.90625, 7.15625, 2.828125, -2.734375, 3.34375, -3.953125, -1.3828125, -0.205078125, 5.125, -2.234375, -2.484375, -0.294921875, -1.9921875, 3.375, -3.234375, -3.4375, -1.3125, -1.4921875, 5.78125, 2.84375, 0.26171875, -3.671875, 2.53125, -3.0, -4.625, 3.5625, 0.94921875, 2.765625, 0.95703125, 2.578125, -1.953125, -3.109375, 2.046875, -2.40625, -2.0625, -1.3671875, 0.052490234375, -1.0625, -4.125, -1.9296875, -6.65625, 1.875, -4.8125, -3.3125, 0.15625, -2.21875, 4.625, -3.875, 0.80078125, -0.11767578125, -3.5, 1.5703125, -0.515625, 2.3125, 2.46875, 6.5, 4.0, -1.109375, -0.71875, 3.296875, 1.96875, 1.921875, -4.84375, -0.07275390625, -2.21875, 0.83984375, -0.294921875, 2.734375, 0.953125, 2.359375, -1.3984375, -2.828125, -1.2265625, -0.051025390625, 1.140625, 6.78125, -0.126953125, -2.875, -1.0390625, -1.390625, 1.4453125, -4.625, 0.189453125, 0.46875, 0.6953125, -1.7890625, -0.71484375, -4.28125, -1.4765625, -1.625, 1.25, -3.46875, 2.34375, 4.46875, -6.21875, 1.28125, 2.03125, -1.9140625, -1.1953125, -0.3984375, -0.89453125, -0.92578125, -5.03125, 3.453125, 3.234375, -2.4375, -4.40625, 1.5625, -1.7265625, 0.42578125, -0.95703125, 2.078125, 2.078125], "dtype": "bfloat16"}, {"input1": [-1.453125, -2.765625, -3.171875, 1.21875, -2.375, -1.015625, -1.1953125, -0.10498046875, -3.875, 0.376953125, 1.046875, 0.1767578125, -0.62109375, 0.1943359375, 0.796875, -5.53125, 3.90625, 0.78125, -1.3046875, -0.78125, 0.98828125, -0.232421875, -4.0625, 4.125, -0.220703125, 2.046875, -1.3828125, 3.078125, 0.57421875, 1.21875, -2.09375, 2.421875, 1.3828125, 2.609375, -1.2578125, -0.9609375, 4.59375, -2.125, -0.271484375, 2.28125, 0.1953125, 1.1640625, -0.80078125, 0.73828125, -2.609375, 3.3125, -0.236328125, -1.359375, 1.3359375, -0.921875, -2.671875, -2.6875, 1.390625, -0.318359375, -0.267578125, 2.15625, -2.25, -1.4609375, -0.76953125, 0.1884765625, -0.08447265625, -0.57421875, -0.123046875, -0.21484375, -1.4375, -1.625, 0.55078125, -1.78125, -2.3125, -0.625, -0.314453125, 4.5, -1.40625, 1.8828125, 1.4921875, -2.375, 1.546875, -2.375, -5.3125, 1.2109375, -3.515625, 0.90234375, -1.3671875, 3.3125, 2.140625, -0.90625, -1.375, -2.421875, -0.8828125, -0.5625, -0.73046875, 0.3125, 1.15625, 0.69921875, -1.53125, -2.875, 2.734375, -1.375, -1.3046875, -1.0390625, -3.6875, -0.95703125, -0.9609375, 1.2421875, 1.3984375, 0.007537841796875, 1.8671875, 0.6796875, -0.03125, 0.322265625, -0.380859375, -0.7890625, -0.53515625, -2.25, 0.5625, -1.984375, 1.6796875, -0.498046875, 0.09912109375, 0.98828125, 1.2890625, -3.140625, -0.4140625, 1.7578125, -3.390625, 0.7734375, -4.5, -2.046875, 0.0771484375, -3.3125, -1.96875, -2.9375, 3.296875, 0.328125, 1.1328125, -0.4453125, -0.70703125, -3.234375, -0.58203125, -1.5234375, 1.71875, 2.28125, 2.9375, 1.703125, -1.1953125, -2.234375, 1.53125, 0.7109375, -3.53125, 0.7109375, 1.6328125, 0.11767578125, -0.369140625, -1.6171875, -2.890625, 1.6015625, -0.6171875, -0.466796875, 3.46875, 1.3671875, 0.7421875, 0.283203125, 3.046875, 3.4375, 1.859375, 1.1640625, -4.1875, 0.2470703125, -0.259765625, 0.1875, 1.8828125, -5.46875, -1.140625, 0.5390625, -0.93359375, -2.828125, 1.734375, 0.5546875, -1.9453125, 0.62890625, 1.640625, 0.01055908203125, 1.6015625, 0.15625, -0.7890625, -2.3125, -0.171875, 0.388671875, 1.75, -0.23046875, 0.9140625, -1.9296875, -1.5625, -0.220703125, -2.109375, 1.640625, 0.92578125, 0.55859375, 0.6796875, 4.03125, -0.9375, -4.40625, 0.3984375, -0.10107421875, -1.03125, -1.9609375, -0.87890625, 0.36328125, -1.0078125, 4.8125, -1.921875, -1.5859375, -4.5625, 0.50390625, -4.03125, -1.078125, -0.55078125, -1.421875, 3.484375, 1.9921875, 2.640625, -1.765625, 2.25, 0.9921875, 1.5390625, 2.0625, -1.8203125, -0.84765625, 1.7265625, -5.3125, 3.03125, 1.109375, -0.09130859375, 0.44140625, -2.0625, -0.69921875, 2.203125, 2.59375, 5.40625, -0.1474609375, -1.3203125, -1.03125, -2.03125, -0.1552734375, 0.765625, -0.068359375, 2.1875, -0.46875, -0.6953125, -1.1640625, -3.265625, -3.140625, -2.359375, 2.609375, 1.7890625, 2.75], "dtype": "bfloat16"}], "outputs": [{"output": [5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -1.015625, 2.84375, -0.10498046875, -0.310546875, 1.234375, 1.046875, 4.375, 2.28125, 0.365234375, 1.328125, 1.0, 4.46875, 0.78125, 0.9375, -0.78125, 0.98828125, 1.9609375, 2.59375, 4.125, 6.8125, 2.046875, 0.1376953125, 3.078125, 4.59375, 4.40625, 0.46484375, 2.421875, 1.3828125, 2.609375, -1.046875, 0.46875, 4.59375, 3.609375, -0.271484375, 2.28125, 0.1953125, 1.1640625, -0.80078125, 5.84375, -1.53125, 3.3125, -0.236328125, 2.328125, 1.3359375, -0.63671875, -2.671875, 1.1640625, 1.390625, -0.318359375, -0.08447265625, 2.15625, 0.19921875, 0.90625, -0.76953125, 0.1884765625, -0.08447265625, -0.57421875, -0.123046875, -0.21484375, 0.53125, -1.203125, 0.55078125, 1.390625, -2.3125, 0.15625, 2.1875, 4.5, 3.421875, 1.8828125, 1.4921875, -2.046875, 1.546875, -1.734375, -0.93359375, 1.2109375, -3.5, 2.703125, 1.3984375, 3.3125, 4.46875, 5.6875, 3.53125, -0.5390625, -0.8828125, 3.15625, -0.73046875, 3.671875, 1.15625, 2.9375, 1.0703125, 2.125, 2.734375, 5.34375, 0.380859375, 1.203125, 5.65625, -0.95703125, -0.9609375, 2.90625, 1.3984375, 5.84375, 1.8671875, 0.6796875, 5.78125, 4.4375, 5.59375, 2.71875, -0.53515625, 5.71875, 0.5625, 2.40625, 2.84375, -0.46484375, 1.84375, 2.765625, 1.2890625, -3.140625, 0.89453125, 3.984375, -2.078125, 0.7734375, -1.3046875, 5.5625, 2.015625, 1.21875, -1.96875, 1.6171875, 3.296875, 0.328125, 1.1328125, 2.03125, 1.7265625, -0.625, 1.1875, -1.5234375, 1.71875, 2.28125, 2.9375, 1.90625, 7.15625, 2.828125, 1.53125, 3.34375, -3.53125, 0.7109375, 1.6328125, 5.125, -0.369140625, -1.6171875, -0.294921875, 1.6015625, 3.375, -0.466796875, 3.46875, 1.3671875, 0.7421875, 5.78125, 3.046875, 3.4375, 1.859375, 2.53125, -3.0, 0.2470703125, 3.5625, 0.94921875, 2.765625, 0.95703125, 2.578125, 0.5390625, -0.93359375, 2.046875, 1.734375, 0.5546875, -1.3671875, 0.62890625, 1.640625, 0.01055908203125, 1.6015625, 0.15625, 1.875, -2.3125, -0.171875, 0.388671875, 1.75, 4.625, 0.9140625, 0.80078125, -0.11767578125, -0.220703125, 1.5703125, 1.640625, 2.3125, 2.46875, 6.5, 4.03125, -0.9375, -0.71875, 3.296875, 1.96875, 1.921875, -1.9609375, -0.07275390625, 0.36328125, 0.83984375, 4.8125, 2.734375, 0.953125, 2.359375, 0.50390625, -2.828125, -1.078125, -0.051025390625, 1.140625, 6.78125, 1.9921875, 2.640625, -1.0390625, 2.25, 1.4453125, 1.5390625, 2.0625, 0.46875, 0.6953125, 1.7265625, -0.71484375, 3.03125, 1.109375, -0.09130859375, 1.25, -2.0625, 2.34375, 4.46875, 2.59375, 5.40625, 2.03125, -1.3203125, -1.03125, -0.3984375, -0.1552734375, 0.765625, -0.068359375, 3.453125, 3.234375, -0.6953125, -1.1640625, 1.5625, -1.7265625, 0.42578125, 2.609375, 2.078125, 2.75], "dtype": "bfloat16"}]}}
{"kernel_name": "elementwise_max_int8", "prompt": "/*\nThis AIE kernel computes the elementwise maximum between two int8 vectors of length 512 and places the result in the output buffer.\n>>> elementwise_max_int8([44, -118, -1, 12, -81, 42, 68, 23], [41, -72, -45, -78, 35, -106, -105, 115])\n[44, -72, -1, 12, 35, 42, 68, 115]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer1 size: 512\nin_buffer2 size: 512\nout_buffer size: 512\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid elementwise_max_int8(int8_t *in_buffer1, int8_t *in_buffer2, int8_t *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t VECTOR_SIZE = 512;\n    for (int i = 0; i < VECTOR_SIZE; i++) {\n        int8_t a = in_buffer1[i];\n        int8_t b = in_buffer2[i];\n        out_buffer[i] = (a > b) ? a : b;\n    }\n}", "program_code": "extern \"C\" {\n    void elementwise_max_int8_wrapper(int8_t *in_buffer1, int8_t *in_buffer2, int8_t *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        elementwise_max_int8(in_buffer1, in_buffer2, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer1": [44, -118, -1, 12, -81, 42, 68, 23, -11, 38, -106, 55, 64, 76, -95, 88, -61, 51, -50, 26, 123, -46, 34, 91, 67, -10, -3, 11, -25, -3, 101, 88, -119, 36, -12, -20, 83, 94, 33, 31, -107, -47, -39, 37, 114, 86, -26, -30, -92, 55, -123, -16, -41, -70, -85, -52, -58, -68, -53, 100, 88, 61, 4, -114, -40, 26, 50, 118, 12, 77, 76, -59, -70, -71, -87, -30, 65, -62, -56, -6, 102, -3, 46, 74, -89, -54, 106, 79, -41, 40, -27, 7, 46, 72, 95, -6, -40, -34, -21, 17, -47, 11, 13, -28, 37, 102, 115, 108, -103, -62, -119, 86, -51, -21, -81, -110, -56, 24, -33, -42, -119, -101, -50, -106, 20, 23, 110, 37, -13, -120, -83, -123, 80, -109, -59, -34, 115, 18, -90, 85, 69, -98, -120, 117, 126, -57, -75, 71, -49, -121, 110, -93, 47, -99, 57, 94, 64, -119, 62, 94, -46, 59, 6, 122, -29, -32, -66, -7, 88, 39, 21, 76, 49, -4, -120, 77, 115, 2, -93, -10, -99, -125, -66, 5, 19, 66, 80, 71, 19, -116, 75, 45, 14, -69, -57, -98, 39, -31, -5, 56, -96, 93, 81, 35, 65, -65, 127, 20, -119, 77, 50, -92, 57, -54, 17, 9, -1, 82, 85, 113, -96, 34, -76, 66, -97, 90, 23, 5, 74, 66, -100, -101, 116, -56, -89, -22, 23, 96, -67, -7, 35, 106, 57, -61, 126, -7, 51, -81, 75, -83, -76, 70, -14, 43, 38, 60, 55, -60, 70, -12, -100, 88, -17, -73, -94, 99, 4, 17, 0, 40, 29, -94, 0, -24, 79, -124, 36, 103, 122, -46, -75, -36, -99, 30, 5, -105, -47, -90, -90, -50, 50, 28, 104, -115, 106, -72, 116, -30, 111, 29, -111, 113, 112, -30, -49, -7, 25, 113, 4, 49, -112, 103, -23, 70, 11, 46, -86, 108, -81, -13, 58, 53, -120, -36, -97, 58, 113, 28, -8, -45, 97, -17, -127, -47, -128, 103, -63, 117, 23, 50, 103, -17, -22, -103, 41, 111, -22, -113, -71, -24, -59, 120, -93, -71, 49, 42, -26, -81, -76, 39, -9, 108, 46, 43, -117, 59, 64, -85, 46, 33, 91, -75, -46, 92, 47, -37, -37, -48, -127, -95, 0, 119, -84, 64, 14, 105, 63, -48, -29, 74, 26, 27, -75, -90, -100, -35, 12, -53, -74, -45, -7, -22, 120, 17, 42, -65, 86, -119, -44, -80, -56, -16, 75, 72, -33, 34, -60, -111, -122, 125, -122, 51, -3, 117, 68, 27, -97, -102, -81, -60, -99, 39, -1, 114, -8, -75, 116, -73, 19, 34, 3, 20, -53, -87, 76, 115, 75, 126, -28, -101, -78, 39, 52, -92, 116, 20, 104, 55, 87, -64, -50, -113, -108, -22, 15, -92, -32, -9, 20, 70, 5, -7, 99, 44, 18, -66, 58, -37, 30, 31, -105, -69, 50, -88, 79, 42, 7, -42, 13, 11, -63, -100, -11, 17, 60, 44, -43, -73, -123, 40, -80, -94, -76, -47, -79, 117, -33, -93, -59, 38, -63, 71], "dtype": "int8"}, {"in_buffer2": [41, -72, -45, -78, 35, -106, -105, 115, 64, 69, -28, -34, -33, -36, 27, 41, 69, 28, -84, 82, -34, -18, -7, -125, -128, 33, 91, -104, -15, 87, -14, 31, 50, 14, 3, 86, -92, 117, -12, 44, 34, 103, 25, -104, -80, -29, 81, 120, -35, -65, 121, 121, 3, -55, 81, 96, -30, 6, 121, -9, -86, 62, -10, 2, 77, -125, -115, 122, -16, -47, -61, -114, 103, -89, 87, 26, 21, -85, -1, -13, 73, -32, -64, 61, -1, 105, -99, -123, -128, -74, -120, -118, 10, 119, -109, -15, -14, -119, -26, -56, -85, -78, 70, 122, 58, -77, 69, -98, -1, 13, -124, -36, -105, 88, 79, -53, 59, 86, -101, -5, 2, 112, -28, -98, -7, -103, -52, 48, -30, -40, -25, -47, -66, 94, -26, 97, 35, -93, -115, -22, 94, -6, -111, 107, -5, 120, -21, -112, 67, 39, 1, -73, -46, 90, -59, 49, 46, -73, 48, 16, 99, 74, -116, 17, 20, -36, -9, 93, 81, 16, 112, -61, -78, 74, -53, 2, 27, 21, 115, 5, -114, -37, 46, 106, -87, -4, -116, -104, -70, 124, 80, 107, 65, -70, -15, 19, -92, 92, -58, -107, -118, -37, 102, 109, -42, 16, -104, -57, -85, 60, 13, -47, -24, -77, -27, -126, -117, -24, 91, 42, -126, 59, 35, 87, -77, 1, 61, -95, -48, -76, 45, 37, -96, -72, -31, 55, 54, -108, -27, 87, 0, 4, -106, -54, -90, -37, 69, -61, -109, 33, 101, -82, 46, 20, 87, -27, -86, 54, -91, 22, -13, 53, 5, 13, 56, 68, -91, -123, 60, 9, -71, -86, 104, -23, -75, 84, -51, 62, 43, -34, -98, 57, -77, -127, -104, -75, -3, -91, -3, -30, 5, 45, -126, 3, 82, 17, -125, -66, -97, -59, -34, -96, -88, 52, 98, 44, -75, 60, -21, 23, 89, -55, -115, 125, -47, 118, -16, 119, 107, -18, -88, -55, 46, -65, -56, -75, 16, 65, -109, -116, -1, 19, -33, 50, -26, -27, -56, -113, 16, 23, 26, 69, -30, 101, 66, -103, -1, 18, 120, -44, 16, 35, 52, 96, -101, -71, -61, 105, -68, 100, 108, -37, 103, 115, -67, -97, -104, 46, -114, 79, -10, -14, -32, 31, 126, -14, -124, -67, 46, 88, 67, 31, 3, 122, 109, -110, -111, 51, 11, -24, 63, -99, 124, 83, -92, -52, -42, 42, -37, 68, 77, -115, -43, 80, -7, -117, -19, -23, -19, -26, 1, -27, -53, 19, 105, 44, 56, 122, 15, 97, -112, 38, 114, -65, 24, -52, 78, 20, 29, -109, -81, -48, 21, -24, 57, 97, -18, 4, -91, 119, -103, 64, -55, 49, 80, 37, 37, 22, 60, -61, 42, 57, -7, -121, 96, 40, -10, 75, -42, 0, -11, -76, 0, 8, 61, 101, 65, 116, -45, -74, -124, -69, 33, 10, 92, 36, -24, -89, -106, -27, 32, 67, 1, -20, 100, -68, -22, 30, 123, 21, -68, 27, 123, 106, 16, -7, -7, 88, 105, -124, -58, 21, -38, -8, 85, -127, -76, -51, -97, 41, -48, 55], "dtype": "int8"}], "outputs": [{"out_buffer": [44, -72, -1, 12, 35, 42, 68, 115, 64, 69, -28, 55, 64, 76, 27, 88, 69, 51, -50, 82, 123, -18, 34, 91, 67, 33, 91, 11, -15, 87, 101, 88, 50, 36, 3, 86, 83, 117, 33, 44, 34, 103, 25, 37, 114, 86, 81, 120, -35, 55, 121, 121, 3, -55, 81, 96, -30, 6, 121, 100, 88, 62, 4, 2, 77, 26, 50, 122, 12, 77, 76, -59, 103, -71, 87, 26, 65, -62, -1, -6, 102, -3, 46, 74, -1, 105, 106, 79, -41, 40, -27, 7, 46, 119, 95, -6, -14, -34, -21, 17, -47, 11, 70, 122, 58, 102, 115, 108, -1, 13, -119, 86, -51, 88, 79, -53, 59, 86, -33, -5, 2, 112, -28, -98, 20, 23, 110, 48, -13, -40, -25, -47, 80, 94, -26, 97, 115, 18, -90, 85, 94, -6, -111, 117, 126, 120, -21, 71, 67, 39, 110, -73, 47, 90, 57, 94, 64, -73, 62, 94, 99, 74, 6, 122, 20, -32, -9, 93, 88, 39, 112, 76, 49, 74, -53, 77, 115, 21, 115, 5, -99, -37, 46, 106, 19, 66, 80, 71, 19, 124, 80, 107, 65, -69, -15, 19, 39, 92, -5, 56, -96, 93, 102, 109, 65, 16, 127, 20, -85, 77, 50, -47, 57, -54, 17, 9, -1, 82, 91, 113, -96, 59, 35, 87, -77, 90, 61, 5, 74, 66, 45, 37, 116, -56, -31, 55, 54, 96, -27, 87, 35, 106, 57, -54, 126, -7, 69, -61, 75, 33, 101, 70, 46, 43, 87, 60, 55, 54, 70, 22, -13, 88, 5, 13, 56, 99, 4, 17, 60, 40, 29, -86, 104, -23, 79, 84, 36, 103, 122, -34, -75, 57, -77, 30, 5, -75, -3, -90, -3, -30, 50, 45, 104, 3, 106, 17, 116, -30, 111, 29, -34, 113, 112, 52, 98, 44, 25, 113, 4, 49, 89, 103, -23, 125, 11, 118, -16, 119, 107, -13, 58, 53, 46, -36, -56, 58, 113, 65, -8, -45, 97, 19, -33, 50, -26, 103, -56, 117, 23, 50, 103, 69, -22, 101, 66, 111, -1, 18, 120, -24, 16, 120, 52, 96, 49, 42, -26, 105, -68, 100, 108, 108, 103, 115, -67, 59, 64, 46, 46, 79, 91, -14, -32, 92, 126, -14, -37, -48, 46, 88, 67, 119, 3, 122, 109, 105, 63, 51, 11, 74, 63, 27, 124, 83, -92, -35, 12, 42, -37, 68, 77, -22, 120, 80, 42, -65, 86, -23, -19, -26, 1, -16, 75, 72, 105, 44, 56, 122, 15, 125, -112, 51, 114, 117, 68, 27, 78, 20, 29, -60, -81, 39, 21, 114, 57, 97, 116, 4, 19, 119, 3, 64, -53, 49, 80, 115, 75, 126, 60, -61, 42, 57, 52, -92, 116, 40, 104, 75, 87, 0, -11, -76, 0, 8, 61, 101, 65, 116, 20, 70, 5, -7, 99, 44, 92, 36, 58, -37, 30, 31, 32, 67, 50, -20, 100, 42, 7, 30, 123, 21, -63, 27, 123, 106, 60, 44, -7, 88, 105, 40, -58, 21, -38, -8, 85, 117, -33, -51, -59, 41, -48, 71], "dtype": "int8"}]}}
{"kernel_name": "elementwise_min_bfloat16", "prompt": "/*\nThis AIE kernel performs an elementwise minimum operation between two input bfloat16 vectors, writing the minimum of each pair to the output buffer.\n>>> elementwise_min_bfloat16([5.65625, 1.28125, 3.125, 7.15625, 5.96875, -3.125, 3.046875, -0.484375], [-2.328125, -4.4375, -5.0625, 1.953125, -3.796875, -1.625, -1.90625, -0.16796875])\n[-2.328125, -4.4375, -5.0625, 1.953125, -3.796875, -3.125, -1.90625, -0.484375]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer_a size: 256\nin_buffer_b size: 256\nout_buffer size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid elementwise_min_bfloat16(bfloat16 *in_buffer_a, bfloat16 *in_buffer_b, bfloat16 *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t VEC_SIZE = 256;\n    for (int i = 0; i < VEC_SIZE; ++i) {\n        float a = (float)in_buffer_a[i];\n        float b = (float)in_buffer_b[i];\n        out_buffer[i] = (a < b) ? in_buffer_a[i] : in_buffer_b[i];\n    }\n}", "program_code": "extern \"C\" {\n    void elementwise_min_bfloat16_wrapper(bfloat16 *in_buffer_a, bfloat16 *in_buffer_b, bfloat16 *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        elementwise_min_bfloat16(in_buffer_a, in_buffer_b, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer_a": [5.65625, 1.28125, 3.125, 7.15625, 5.96875, -3.125, 3.046875, -0.484375, -0.330078125, 1.3125, 0.4609375, 4.65625, 2.4375, 0.388671875, 1.421875, 1.0703125, 4.78125, -0.65625, 1.0, -2.734375, -8.1875, 2.09375, 2.765625, -2.375, 7.25, -4.65625, 0.146484375, -0.59765625, 4.90625, 4.6875, 0.49609375, 1.2109375, -2.84375, -6.34375, -1.1171875, 0.5, 3.9375, 3.84375, -1.2421875, -0.96875, -3.359375, -4.53125, -5.46875, 6.25, -1.6328125, -1.3984375, -4.0, 2.484375, -5.15625, -0.6796875, -2.859375, 1.234375, -1.6328125, -3.78125, -0.09033203125, 1.3671875, 0.212890625, 0.96875, -2.03125, -1.1640625, -2.15625, -1.1484375, -2.609375, -5.53125, 0.56640625, -1.2890625, -5.21875, 1.484375, -2.90625, 0.166015625, 2.328125, 0.412109375, 3.640625, -3.953125, 1.2890625, -2.1875, -2.78125, -1.8515625, -0.99609375, 0.1796875, -3.734375, 2.875, 1.4921875, -4.90625, 4.75, 6.0625, 3.765625, -0.57421875, -3.421875, 3.375, -1.2890625, 3.90625, 0.66796875, 3.125, 1.140625, 2.265625, 0.03369140625, 5.71875, 0.40625, 1.2890625, 6.03125, -4.3125, -4.0625, 3.109375, -3.75, 6.21875, -1.3203125, -2.390625, 6.15625, 4.75, 5.96875, 2.90625, -2.75, 6.125, -0.859375, 2.5625, 3.03125, -0.49609375, 1.96875, 2.953125, 1.203125, -3.515625, 0.953125, 4.25, -2.21875, -0.478515625, -1.390625, 5.90625, 2.15625, 1.3046875, -2.46875, 1.7265625, -2.15625, 0.10205078125, -2.03125, 2.171875, 1.84375, -0.66796875, 1.265625, -3.5, -4.78125, 1.40625, 0.53515625, 2.03125, 7.625, 3.015625, -2.921875, 3.578125, -4.21875, -1.4765625, -0.21875, 5.46875, -2.390625, -2.640625, -0.314453125, -2.125, 3.609375, -3.453125, -3.671875, -1.3984375, -1.59375, 6.1875, 3.03125, 0.279296875, -3.921875, 2.703125, -3.203125, -4.9375, 3.796875, 1.015625, 2.953125, 1.0234375, 2.734375, -2.078125, -3.3125, 2.1875, -2.578125, -2.203125, -1.4609375, 0.055908203125, -1.1328125, -4.40625, -2.0625, -7.125, 2.0, -5.125, -3.53125, 0.1669921875, -2.359375, 4.9375, -4.125, 0.85546875, -0.1259765625, -3.734375, 1.671875, -0.55078125, 2.46875, 2.640625, 6.9375, 4.28125, -1.1796875, -0.765625, 3.515625, 2.09375, 2.046875, -5.1875, -0.07763671875, -2.359375, 0.89453125, -0.314453125, 2.90625, 1.015625, 2.515625, -1.4921875, -3.015625, -1.3125, -0.054443359375, 1.2109375, 7.21875, -0.134765625, -3.0625, -1.109375, -1.484375, 1.5390625, -4.9375, 0.2021484375, 0.5, 0.7421875, -1.9140625, -0.76171875, -4.5625, -1.578125, -1.734375, 1.328125, -3.703125, 2.5, 4.78125, -6.625, 1.3671875, 2.171875, -2.046875, -1.2734375, -0.42578125, -0.953125, -0.98828125, -5.375, 3.6875, 3.453125, -2.609375, -4.6875, 1.6640625, -1.84375, 0.455078125, -1.0234375, 2.21875, 2.21875], "dtype": "bfloat16"}, {"in_buffer_b": [-2.328125, -4.4375, -5.0625, 1.953125, -3.796875, -1.625, -1.90625, -0.16796875, -6.1875, 0.60546875, 1.6796875, 0.283203125, -0.99609375, 0.3125, 1.2734375, -8.875, 6.25, 1.25, -2.09375, -1.25, 1.578125, -0.37109375, -6.5, 6.59375, -0.353515625, 3.265625, -2.21875, 4.90625, 0.91796875, 1.9453125, -3.34375, 3.875, 2.203125, 4.15625, -2.015625, -1.5390625, 7.375, -3.390625, -0.435546875, 3.640625, 0.3125, 1.8671875, -1.28125, 1.1875, -4.1875, 5.3125, -0.37890625, -2.171875, 2.125, -1.4765625, -4.28125, -4.3125, 2.21875, -0.51171875, -0.427734375, 3.453125, -3.609375, -2.34375, -1.234375, 0.302734375, -0.134765625, -0.91796875, -0.197265625, -0.34375, -2.296875, -2.609375, 0.87890625, -2.84375, -3.703125, -1.0, -0.50390625, 7.21875, -2.25, 3.015625, 2.390625, -3.796875, 2.46875, -3.78125, -8.5, 1.9375, -5.625, 1.4453125, -2.1875, 5.3125, 3.421875, -1.453125, -2.203125, -3.890625, -1.4140625, -0.8984375, -1.1640625, 0.5, 1.8515625, 1.1171875, -2.4375, -4.59375, 4.375, -2.203125, -2.09375, -1.6640625, -5.90625, -1.53125, -1.53125, 1.984375, 2.234375, 0.0120849609375, 2.984375, 1.0859375, -0.05029296875, 0.515625, -0.609375, -1.265625, -0.85546875, -3.609375, 0.8984375, -3.171875, 2.6875, -0.796875, 0.158203125, 1.578125, 2.0625, -5.03125, -0.66015625, 2.8125, -5.4375, 1.2421875, -7.21875, -3.265625, 0.12353515625, -5.3125, -3.15625, -4.71875, 5.28125, 0.52734375, 1.8125, -0.7109375, -1.1328125, -5.1875, -0.93359375, -2.4375, 2.75, 3.65625, 4.6875, 2.734375, -1.9140625, -3.578125, 2.453125, 1.140625, -5.65625, 1.140625, 2.609375, 0.1884765625, -0.59375, -2.578125, -4.625, 2.5625, -0.98828125, -0.74609375, 5.53125, 2.1875, 1.1875, 0.455078125, 4.875, 5.5, 2.96875, 1.859375, -6.6875, 0.396484375, -0.416015625, 0.30078125, 3.015625, -8.75, -1.8203125, 0.86328125, -1.4921875, -4.53125, 2.78125, 0.88671875, -3.109375, 1.0078125, 2.625, 0.0169677734375, 2.5625, 0.25, -1.265625, -3.703125, -0.275390625, 0.62109375, 2.796875, -0.369140625, 1.4609375, -3.09375, -2.5, -0.353515625, -3.375, 2.625, 1.484375, 0.89453125, 1.0859375, 6.46875, -1.5, -7.03125, 0.63671875, -0.162109375, -1.65625, -3.125, -1.40625, 0.58203125, -1.609375, 7.71875, -3.078125, -2.53125, -7.3125, 0.8046875, -6.4375, -1.7265625, -0.8828125, -2.265625, 5.5625, 3.1875, 4.21875, -2.828125, 3.609375, 1.5859375, 2.46875, 3.296875, -2.90625, -1.359375, 2.765625, -8.5, 4.84375, 1.7734375, -0.146484375, 0.70703125, -3.296875, -1.1171875, 3.515625, 4.15625, 8.625, -0.236328125, -2.109375, -1.6484375, -3.25, -0.2490234375, 1.2265625, -0.109375, 3.515625, -0.75, -1.109375, -1.859375, -5.21875, -5.03125, -3.765625, 4.15625, 2.859375, 4.40625], "dtype": "bfloat16"}], "outputs": [{"out_buffer": [-2.328125, -4.4375, -5.0625, 1.953125, -3.796875, -3.125, -1.90625, -0.484375, -6.1875, 0.60546875, 0.4609375, 0.283203125, -0.99609375, 0.3125, 1.2734375, -8.875, 4.78125, -0.65625, -2.09375, -2.734375, -8.1875, -0.37109375, -6.5, -2.375, -0.353515625, -4.65625, -2.21875, -0.59765625, 0.91796875, 1.9453125, -3.34375, 1.2109375, -2.84375, -6.34375, -2.015625, -1.5390625, 3.9375, -3.390625, -1.2421875, -0.96875, -3.359375, -4.53125, -5.46875, 1.1875, -4.1875, -1.3984375, -4.0, -2.171875, -5.15625, -1.4765625, -4.28125, -4.3125, -1.6328125, -3.78125, -0.427734375, 1.3671875, -3.609375, -2.34375, -2.03125, -1.1640625, -2.15625, -1.1484375, -2.609375, -5.53125, -2.296875, -2.609375, -5.21875, -2.84375, -3.703125, -1.0, -0.50390625, 0.412109375, -2.25, -3.953125, 1.2890625, -3.796875, -2.78125, -3.78125, -8.5, 0.1796875, -5.625, 1.4453125, -2.1875, -4.90625, 3.421875, -1.453125, -2.203125, -3.890625, -3.421875, -0.8984375, -1.2890625, 0.5, 0.66796875, 1.1171875, -2.4375, -4.59375, 0.03369140625, -2.203125, -2.09375, -1.6640625, -5.90625, -4.3125, -4.0625, 1.984375, -3.75, 0.0120849609375, -1.3203125, -2.390625, -0.05029296875, 0.515625, -0.609375, -1.265625, -2.75, -3.609375, -0.859375, -3.171875, 2.6875, -0.796875, 0.158203125, 1.578125, 1.203125, -5.03125, -0.66015625, 2.8125, -5.4375, -0.478515625, -7.21875, -3.265625, 0.12353515625, -5.3125, -3.15625, -4.71875, -2.15625, 0.10205078125, -2.03125, -0.7109375, -1.1328125, -5.1875, -0.93359375, -3.5, -4.78125, 1.40625, 0.53515625, 2.03125, -1.9140625, -3.578125, -2.921875, 1.140625, -5.65625, -1.4765625, -0.21875, 0.1884765625, -2.390625, -2.640625, -4.625, -2.125, -0.98828125, -3.453125, -3.671875, -1.3984375, -1.59375, 0.455078125, 3.03125, 0.279296875, -3.921875, 1.859375, -6.6875, -4.9375, -0.416015625, 0.30078125, 2.953125, -8.75, -1.8203125, -2.078125, -3.3125, -4.53125, -2.578125, -2.203125, -3.109375, 0.055908203125, -1.1328125, -4.40625, -2.0625, -7.125, -1.265625, -5.125, -3.53125, 0.1669921875, -2.359375, -0.369140625, -4.125, -3.09375, -2.5, -3.734375, -3.375, -0.55078125, 1.484375, 0.89453125, 1.0859375, 4.28125, -1.5, -7.03125, 0.63671875, -0.162109375, -1.65625, -5.1875, -1.40625, -2.359375, -1.609375, -0.314453125, -3.078125, -2.53125, -7.3125, -1.4921875, -6.4375, -1.7265625, -0.8828125, -2.265625, 5.5625, -0.134765625, -3.0625, -2.828125, -1.484375, 1.5390625, -4.9375, 0.2021484375, -2.90625, -1.359375, -1.9140625, -8.5, -4.5625, -1.578125, -1.734375, 0.70703125, -3.703125, -1.1171875, 3.515625, -6.625, 1.3671875, -0.236328125, -2.109375, -1.6484375, -3.25, -0.953125, -0.98828125, -5.375, 3.515625, -0.75, -2.609375, -4.6875, -5.21875, -5.03125, -3.765625, -1.0234375, 2.21875, 2.21875], "dtype": "bfloat16"}]}}
{"kernel_name": "elementwise_min_int8", "prompt": "/*\nThis AIE kernel computes the elementwise minimum of two int8 input vectors of size 256 and writes the results to the output buffer.\n>>> elementwise_min_int8([44, -118, -1, 12, -81, 42, 68, 23], [-100, 88, -17, -73, -94, 99, 4, 17])\n[-100, -118, -17, -73, -94, 42, 4, 17]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput1 size: 256\ninput2 size: 256\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid elementwise_min_int8(int8_t *input1, int8_t *input2, int8_t *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t N = 256;\n    for (int i = 0; i < N; ++i) {\n        output[i] = (input1[i] < input2[i]) ? input1[i] : input2[i];\n    }\n}", "program_code": "extern \"C\" {\n    void elementwise_min_int8_wrapper(int8_t *input1, int8_t *input2, int8_t *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        elementwise_min_int8(input1, input2, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input1": [44, -118, -1, 12, -81, 42, 68, 23, -11, 38, -106, 55, 64, 76, -95, 88, -61, 51, -50, 26, 123, -46, 34, 91, 67, -10, -3, 11, -25, -3, 101, 88, -119, 36, -12, -20, 83, 94, 33, 31, -107, -47, -39, 37, 114, 86, -26, -30, -92, 55, -123, -16, -41, -70, -85, -52, -58, -68, -53, 100, 88, 61, 4, -114, -40, 26, 50, 118, 12, 77, 76, -59, -70, -71, -87, -30, 65, -62, -56, -6, 102, -3, 46, 74, -89, -54, 106, 79, -41, 40, -27, 7, 46, 72, 95, -6, -40, -34, -21, 17, -47, 11, 13, -28, 37, 102, 115, 108, -103, -62, -119, 86, -51, -21, -81, -110, -56, 24, -33, -42, -119, -101, -50, -106, 20, 23, 110, 37, -13, -120, -83, -123, 80, -109, -59, -34, 115, 18, -90, 85, 69, -98, -120, 117, 126, -57, -75, 71, -49, -121, 110, -93, 47, -99, 57, 94, 64, -119, 62, 94, -46, 59, 6, 122, -29, -32, -66, -7, 88, 39, 21, 76, 49, -4, -120, 77, 115, 2, -93, -10, -99, -125, -66, 5, 19, 66, 80, 71, 19, -116, 75, 45, 14, -69, -57, -98, 39, -31, -5, 56, -96, 93, 81, 35, 65, -65, 20, -119, 77, 50, -92, 57, -54, 17, 9, -1, 82, 85, 113, -96, 34, -76, 66, -97, 90, 23, 5, 74, 66, -100, -101, 116, -56, -89, -22, 23, 96, -67, -7, 35, 106, 57, -61, 126, -7, 51, -81, 75, -83, -76, 70, -14, 43, 38, 60, 55], "dtype": "int8"}, {"input2": [-100, 88, -17, -73, -94, 99, 4, 17, 0, 40, 29, -94, 0, -24, 79, -124, 36, 103, 122, -46, -75, -36, -99, 30, 5, -105, -47, -90, -90, -50, 50, 28, 104, -115, 106, -72, 116, -30, 111, 29, -111, 113, 112, -30, -49, -7, 25, 113, 4, 49, -112, 103, -23, 70, 11, 46, -86, 108, -81, -13, 58, 53, -120, -36, -97, 58, 113, 28, -8, -45, 97, -17, -127, -47, -128, 103, -63, 117, 23, 50, 103, -17, -22, -103, 41, 111, -22, -113, -71, -24, -59, 120, -93, -71, 49, 42, -26, -81, -76, 39, -9, 108, 46, 43, -117, 59, 64, -85, 46, 33, 91, -75, -46, 92, 47, -37, -37, -48, -127, -95, 0, 119, -84, 64, 14, 105, 63, -48, -29, 74, 26, 27, -75, -90, -100, -35, 12, -53, -74, -45, -7, -22, 120, 17, 42, -65, 86, -119, -44, -80, -56, -16, 75, 72, -33, 34, -60, -111, -122, 125, -122, 51, -3, 117, 68, 27, -97, -102, -81, -60, -99, 39, -1, 114, -8, -75, 116, -73, 19, 34, 3, 20, -53, -87, 76, 115, 75, 126, -28, -101, -78, 39, 52, -92, 116, 20, 104, 55, 87, -64, -50, -113, -108, -22, 15, -92, -32, -9, 20, 70, 5, -7, 99, 44, 18, -66, 58, -37, 30, 31, -105, -69, 50, -88, 79, 42, 7, -42, 13, 11, -63, -100, -11, 17, 60, 44, -43, -73, -123, 40, -80, -94, -76, -47, -79, 117, -33, -93, -59, 38, -63, 71, 41, -72, -45, -78], "dtype": "int8"}], "outputs": [{"output": [-100, -118, -17, -73, -94, 42, 4, 17, -11, 38, -106, -94, 0, -24, -95, -124, -61, 51, -50, -46, -75, -46, -99, 30, 5, -105, -47, -90, -90, -50, 50, 28, -119, -115, -12, -72, 83, -30, 33, 29, -111, -47, -39, -30, -49, -7, -26, -30, -92, 49, -123, -16, -41, -70, -85, -52, -86, -68, -81, -13, 58, 53, -120, -114, -97, 26, 50, 28, -8, -45, 76, -59, -127, -71, -128, -30, -63, -62, -56, -6, 102, -17, -22, -103, -89, -54, -22, -113, -71, -24, -59, 7, -93, -71, 49, -6, -40, -81, -76, 17, -47, 11, 13, -28, -117, 59, 64, -85, -103, -62, -119, -75, -51, -21, -81, -110, -56, -48, -127, -95, -119, -101, -84, -106, 14, 23, 63, -48, -29, -120, -83, -123, -75, -109, -100, -35, 12, -53, -90, -45, -7, -98, -120, 17, 42, -65, -75, -119, -49, -121, -56, -93, 47, -99, -33, 34, -60, -119, -122, 94, -122, 51, -3, 117, -29, -32, -97, -102, -81, -60, -99, 39, -1, -4, -120, -75, 115, -73, -93, -10, -99, -125, -66, -87, 19, 66, 75, 71, -28, -116, -78, 39, 14, -92, -57, -98, 39, -31, -5, -64, -96, -113, -108, -22, 15, -92, -32, -119, 20, 50, -92, -7, -54, 17, 9, -66, 58, -37, 30, -96, -105, -76, 50, -97, 79, 23, 5, -42, 13, -100, -101, -100, -56, -89, -22, 23, -43, -73, -123, 35, -80, -94, -76, -47, -79, 51, -81, -93, -83, -76, -63, -14, 41, -72, -45, -78], "dtype": "int8"}]}}
{"kernel_name": "euclidean_dist_bfloat16", "prompt": "/*\nThis AIE kernel computes the Euclidean (L2) distance between two bfloat16 input vectors of length 256. The result is written as a single bfloat16 to the output buffer.\n>>> euclidean_dist_bfloat16([5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125], [-2.171875, -4.15625, -4.75, 1.828125, -3.5625, -1.5234375, -1.7890625, -0.1572265625])\n[16.625]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_a size: 256\ninput_b size: 256\noutput size: 1\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid euclidean_dist_bfloat16(bfloat16 *input_a, bfloat16 *input_b, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t N = 256;\n\n    float acc = 0.0f;\n    for (int i = 0; i < N; ++i) {\n        float da = float(input_a[i]);\n        float db = float(input_b[i]);\n        float diff = da - db;\n        acc += diff * diff;\n    }\n\n    float y;\n    if (acc <= 0.0f) {\n        y = 0.0f;\n    } else {\n        union { uint32_t u; float f; } fu { .f = acc };\n        union { uint32_t u; float f; } gu { .u = (fu.u >> 1) + 0x1F800000u };\n        y = gu.f;\n        y = 0.5f * (y + acc / y);\n        y = 0.5f * (y + acc / y);\n    }\n\n    *output = bfloat16(y);\n}", "program_code": "extern \"C\" {\n    void euclidean_dist_bfloat16_wrapper(bfloat16 *input_a, bfloat16 *input_b, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        euclidean_dist_bfloat16(input_a, input_b, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_a": [5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125, -0.310546875, 1.234375, 0.431640625, 4.375, 2.28125, 0.365234375, 1.328125, 1.0, 4.46875, -0.6171875, 0.9375, -2.5625, -7.65625, 1.9609375, 2.59375, -2.21875, 6.8125, -4.375, 0.1376953125, -0.5625, 4.59375, 4.40625, 0.46484375, 1.1328125, -2.65625, -5.9375, -1.046875, 0.46875, 3.6875, 3.609375, -1.1640625, -0.90625, -3.140625, -4.25, -5.125, 5.84375, -1.53125, -1.3125, -3.765625, 2.328125, -4.84375, -0.63671875, -2.6875, 1.1640625, -1.53125, -3.546875, -0.08447265625, 1.28125, 0.19921875, 0.90625, -1.90625, -1.0859375, -2.015625, -1.078125, -2.4375, -5.1875, 0.53125, -1.203125, -4.875, 1.390625, -2.71875, 0.15625, 2.1875, 0.38671875, 3.421875, -3.703125, 1.203125, -2.046875, -2.609375, -1.734375, -0.93359375, 0.1689453125, -3.5, 2.703125, 1.3984375, -4.59375, 4.46875, 5.6875, 3.53125, -0.5390625, -3.21875, 3.15625, -1.2109375, 3.671875, 0.625, 2.9375, 1.0703125, 2.125, 0.031494140625, 5.34375, 0.380859375, 1.203125, 5.65625, -4.03125, -3.8125, 2.90625, -3.515625, 5.84375, -1.2421875, -2.25, 5.78125, 4.4375, 5.59375, 2.71875, -2.578125, 5.71875, -0.8046875, 2.40625, 2.84375, -0.46484375, 1.84375, 2.765625, 1.1328125, -3.296875, 0.89453125, 3.984375, -2.078125, -0.44921875, -1.3046875, 5.5625, 2.015625, 1.21875, -2.3125, 1.6171875, -2.015625, 0.095703125, -1.90625, 2.03125, 1.7265625, -0.625, 1.1875, -3.28125, -4.46875, 1.3203125, 0.5, 1.90625, 7.15625, 2.828125, -2.734375, 3.34375, -3.953125, -1.3828125, -0.205078125, 5.125, -2.234375, -2.484375, -0.294921875, -1.9921875, 3.375, -3.234375, -3.4375, -1.3125, -1.4921875, 5.78125, 2.84375, 0.26171875, -3.671875, 2.53125, -3.0, -4.625, 3.5625, 0.94921875, 2.765625, 0.95703125, 2.578125, -1.953125, -3.109375, 2.046875, -2.40625, -2.0625, -1.3671875, 0.052490234375, -1.0625, -4.125, -1.9296875, -6.65625, 1.875, -4.8125, -3.3125, 0.15625, -2.21875, 4.625, -3.875, 0.80078125, -0.11767578125, -3.5, 1.5703125, -0.515625, 2.3125, 2.46875, 6.5, 4.0, -1.109375, -0.71875, 3.296875, 1.96875, 1.921875, -4.84375, -0.07275390625, -2.21875, 0.83984375, -0.294921875, 2.734375, 0.953125, 2.359375, -1.3984375, -2.828125, -1.2265625, -0.051025390625, 1.140625, 6.78125, -0.126953125, -2.875, -1.0390625, -1.390625, 1.4453125, -4.625, 0.189453125, 0.46875, 0.6953125, -1.7890625, -0.71484375, -4.28125, -1.4765625, -1.625, 1.25, -3.46875, 2.34375, 4.46875, -6.21875, 1.28125, 2.03125, -1.9140625, -1.1953125, -0.3984375, -0.89453125, -0.92578125, -5.03125, 3.453125, 3.234375, -2.4375, -4.40625, 1.5625, -1.7265625, 0.42578125, -0.95703125, 2.078125, 2.078125], "dtype": "bfloat16"}, {"input_b": [-2.171875, -4.15625, -4.75, 1.828125, -3.5625, -1.5234375, -1.7890625, -0.1572265625, -5.8125, 0.56640625, 1.5703125, 0.265625, -0.93359375, 0.29296875, 1.1953125, -8.3125, 5.875, 1.171875, -1.9609375, -1.171875, 1.484375, -0.34765625, -6.09375, 6.1875, -0.33203125, 3.0625, -2.078125, 4.59375, 0.859375, 1.828125, -3.140625, 3.640625, 2.0625, 3.90625, -1.8828125, -1.4453125, 6.90625, -3.1875, -0.408203125, 3.40625, 0.29296875, 1.75, -1.1953125, 1.109375, -3.921875, 4.96875, -0.353515625, -2.046875, 2.0, -1.3828125, -4.0, -4.03125, 2.078125, -0.478515625, -0.400390625, 3.234375, -3.375, -2.1875, -1.15625, 0.283203125, -0.126953125, -0.859375, -0.1845703125, -0.322265625, -2.15625, -2.4375, 0.82421875, -2.671875, -3.46875, -0.9375, -0.47265625, 6.78125, -2.109375, 2.828125, 2.234375, -3.5625, 2.3125, -3.546875, -7.96875, 1.8203125, -5.28125, 1.3515625, -2.046875, 4.96875, 3.203125, -1.359375, -2.0625, -3.640625, -1.3203125, -0.83984375, -1.09375, 0.470703125, 1.734375, 1.046875, -2.296875, -4.3125, 4.09375, -2.0625, -1.953125, -1.5625, -5.53125, -1.4375, -1.4375, 1.859375, 2.09375, 0.01129150390625, 2.796875, 1.0234375, -0.047119140625, 0.482421875, -0.5703125, -1.1875, -0.8046875, -3.390625, 0.83984375, -2.984375, 2.53125, -0.75, 0.1484375, 1.484375, 1.9296875, -4.71875, -0.62109375, 2.640625, -5.09375, 1.1640625, -6.78125, -3.0625, 0.11572265625, -4.96875, -2.953125, -4.40625, 4.9375, 0.4921875, 1.703125, -0.66796875, -1.0625, -4.84375, -0.875, -2.28125, 2.578125, 3.421875, 4.40625, 2.5625, -1.796875, -3.34375, 2.296875, 1.0703125, -5.3125, 1.0703125, 2.4375, 0.1767578125, -0.5546875, -2.421875, -4.34375, 2.40625, -0.92578125, -0.69921875, 5.1875, 2.046875, 1.109375, 0.42578125, 4.5625, 5.15625, 2.78125, 1.75, -6.28125, 0.37109375, -0.390625, 0.28125, 2.828125, -8.25, -1.7109375, 0.80859375, -1.3984375, -4.25, 2.609375, 0.83203125, -2.90625, 0.9453125, 2.46875, 0.015869140625, 2.40625, 0.234375, -1.1875, -3.484375, -0.2578125, 0.58203125, 2.625, -0.345703125, 1.375, -2.890625, -2.34375, -0.33203125, -3.15625, 2.453125, 1.390625, 0.8359375, 1.015625, 6.0625, -1.40625, -6.59375, 0.59765625, -0.1513671875, -1.5546875, -2.9375, -1.3203125, 0.54296875, -1.5078125, 7.25, -2.875, -2.375, -6.875, 0.75390625, -6.0625, -1.6171875, -0.828125, -2.125, 5.21875, 2.984375, 3.953125, -2.640625, 3.390625, 1.484375, 2.3125, 3.09375, -2.71875, -1.2734375, 2.59375, -7.96875, 4.53125, 1.65625, -0.13671875, 0.66015625, -3.09375, -1.046875, 3.296875, 3.890625, 8.0625, -0.2216796875, -1.9765625, -1.5390625, -3.046875, -0.2333984375, 1.1484375, -0.1025390625, 3.28125, -0.703125, -1.0390625, -1.7421875, -4.90625, -4.71875, -3.53125, 3.90625, 2.6875, 4.125], "dtype": "bfloat16"}], "outputs": [{"output": [69.0], "dtype": "bfloat16"}]}}
{"kernel_name": "exp_bfloat16", "prompt": "/*\nThis AIE kernel implements the exponential function on a bfloat16 vector\n>>> exp_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875])\n[5.84375, 1.4921875, 2.671875, 9.3125, 6.46875, 0.376953125, 2.578125, 0.859375]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 64\noutput_vector size: 64\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid exp_bfloat16(bfloat16 *input_vector, bfloat16 *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr float log2e = 1.442695040888963f;\n    constexpr float ln2 = 0.6931471805599453f;\n    constexpr float c1 = ln2;\n    constexpr float c2 = 0.2401598148889220f;\n    constexpr float c3 = 0.0558801115849865f;\n    constexpr int32_t vector_size = 64;\n    for (uint32_t i = 0; i < vector_size; i++) {\n        float x = (float)input_vector[i];\n        int32_t ix = (int32_t)(x * log2e);\n        float fx = x * log2e - ix;\n        ix = (ix + 127) << 23;\n        float pow2_ix;\n        memcpy(&pow2_ix, &ix, sizeof(float));\n        float fx2 = fx * fx;\n        float fx3 = fx2 * fx;\n        float pow2_fx = 1.0f +\n                        c1 * fx +\n                        c2 * fx2 +\n                        c3 * fx3;\n        float result = pow2_ix * pow2_fx;\n        output_vector[i] = (bfloat16)result;\n    }\n}", "program_code": "extern \"C\" {\n    void exp_bfloat16_wrapper(bfloat16 *input_vector, bfloat16 *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        exp_bfloat16(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625], "dtype": "bfloat16"}], "outputs": [{"output_vector": [5.84375, 1.4921875, 2.671875, 9.3125, 6.46875, 0.376953125, 2.578125, 0.859375, 0.90234375, 1.5078125, 1.15625, 4.28125, 2.140625, 1.1328125, 1.5546875, 1.3984375, 4.4375, 0.81640625, 1.3671875, 0.42578125, 0.078125, 1.921875, 2.375, 0.4765625, 9.625, 0.2333984375, 1.046875, 0.828125, 4.625, 4.34375, 1.171875, 1.4609375, 0.412109375, 0.1376953125, 0.70703125, 1.171875, 3.40625, 3.328125, 0.6796875, 0.73828125, 0.3515625, 0.2412109375, 0.181640625, 7.0625, 0.6015625, 0.64453125, 0.287109375, 2.171875, 0.1982421875, 0.80859375, 0.408203125, 1.46875, 0.59765625, 0.306640625, 0.97265625, 1.53125, 1.0703125, 1.3515625, 0.53125, 0.6953125, 0.51171875, 0.69921875, 0.443359375, 0.177734375], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "floor_bfloat16", "prompt": "/*\nThis AIE kernel implements floor operation on a bfloat16 vector, rounding each element down to the nearest integer\n>>> floor_bfloat16([17.625, 4.0, 9.8125, 22.375, 18.625, -9.75, 9.5, -1.515625])\n[17.0, 4.0, 9.0, 22.0, 18.0, -10.0, 9.0, -2.0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid floor_bfloat16(bfloat16 *input_vector, bfloat16 *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    for (uint32_t i = 0; i < vector_size; i++) {\n        float val = (float)input_vector[i];\n        int32_t int_part = (int32_t)val;\n        if (val == (float)int_part || val > 0.0f) {\n            output_vector[i] = (bfloat16)int_part;\n        } else {\n            output_vector[i] = (bfloat16)(int_part - 1);\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void floor_bfloat16_wrapper(bfloat16 *input_vector, bfloat16 *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        floor_bfloat16(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [17.625, 4.0, 9.8125, 22.375, 18.625, -9.75, 9.5, -1.515625, -1.03125, 4.09375, 1.4375, 14.5625, 7.625, 1.21875, 4.4375, 3.34375, 14.9375, -2.046875, 3.125, -8.5625, -25.5, 6.53125, 8.625, -7.40625, 22.75, -14.5625, 0.45703125, -1.875, 15.3125, 14.6875, 1.546875, 3.78125, -8.875, -19.75, -3.484375, 1.5625, 12.3125, 12.0, -3.875, -3.015625, -10.5, -14.1875, -17.125, 19.5, -5.09375, -4.375, -12.5, 7.78125, -16.125, -2.125, -8.9375, 3.875, -5.09375, -11.8125, -0.28125, 4.28125, 0.6640625, 3.03125, -6.34375, -3.625, -6.71875, -3.59375, -8.125, -17.25, 1.7734375, -4.03125, -16.25, 4.625, -9.0625, 0.51953125, 7.28125, 1.2890625, 11.375, -12.375, 4.03125, -6.84375, -8.6875, -5.78125, -3.109375, 0.5625, -11.625, 9.0, 4.65625, -15.375, 14.875, 19.0, 11.8125, -1.796875, -10.6875, 10.5625, -4.03125, 12.25, 2.078125, 9.75, 3.5625, 7.0625, 0.10498046875, 17.875, 1.265625, 4.03125, 18.875, -13.5, -12.6875, 9.6875, -11.75, 19.375, -4.125, -7.46875, 19.25, 14.8125, 18.625, 9.0625, -8.625, 19.125, -2.6875, 8.0, 9.5, -1.546875, 6.15625, 9.25, 3.765625, -11.0, 2.984375, 13.25, -6.9375, -1.5, -4.34375, 18.5, 6.71875, 4.0625, -7.6875, 5.40625, -6.75, 0.318359375, -6.34375, 6.75, 5.78125, -2.078125, 3.953125, -10.9375, -14.9375, 4.40625, 1.6640625, 6.34375, 23.875, 9.4375, -9.125, 11.1875, -13.1875, -4.625, -0.68359375, 17.125, -7.4375, -8.25, -0.984375, -6.625, 11.25, -10.8125, -11.5, -4.375, -4.96875, 19.25, 9.5, 0.875, -12.25, 8.4375, -10.0, -15.4375, 11.875, 3.171875, 9.1875, 3.1875, 8.5625, -6.5, -10.3125, 6.8125, -8.0625, -6.90625, -4.5625, 0.1748046875, -3.546875, -13.75, -6.4375, -22.25, 6.25, -16.0, -11.0625, 0.5234375, -7.40625, 15.4375, -12.9375, 2.671875, -0.392578125, -11.6875, 5.21875, -1.71875, 7.71875, 8.25, 21.625, 13.375, -3.6875, -2.390625, 11.0, 6.5625, 6.40625, -16.125, -0.2431640625, -7.375, 2.796875, -0.98046875, 9.125, 3.171875, 7.875, -4.65625, -9.4375, -4.09375, -0.169921875, 3.796875, 22.625, -0.421875, -9.5625, -3.453125, -4.625, 4.8125, -15.4375, 0.6328125, 1.5625, 2.328125, -5.96875, -2.375, -14.25, -4.9375, -5.4375, 4.15625, -11.5625, 7.8125, 14.9375, -20.75, 4.25, 6.78125, -6.375, -3.96875, -1.328125, -2.984375, -3.09375, -16.75, 11.5, 10.8125, -8.125, -14.6875, 5.21875, -5.75, 1.421875, -3.1875, 6.90625, 6.9375], "dtype": "bfloat16"}], "outputs": [{"output_vector": [17.0, 4.0, 9.0, 22.0, 18.0, -10.0, 9.0, -2.0, -2.0, 4.0, 1.0, 14.0, 7.0, 1.0, 4.0, 3.0, 14.0, -3.0, 3.0, -9.0, -26.0, 6.0, 8.0, -8.0, 22.0, -15.0, 0.0, -2.0, 15.0, 14.0, 1.0, 3.0, -9.0, -20.0, -4.0, 1.0, 12.0, 12.0, -4.0, -4.0, -11.0, -15.0, -18.0, 19.0, -6.0, -5.0, -13.0, 7.0, -17.0, -3.0, -9.0, 3.0, -6.0, -12.0, -1.0, 4.0, 0.0, 3.0, -7.0, -4.0, -7.0, -4.0, -9.0, -18.0, 1.0, -5.0, -17.0, 4.0, -10.0, 0.0, 7.0, 1.0, 11.0, -13.0, 4.0, -7.0, -9.0, -6.0, -4.0, 0.0, -12.0, 9.0, 4.0, -16.0, 14.0, 19.0, 11.0, -2.0, -11.0, 10.0, -5.0, 12.0, 2.0, 9.0, 3.0, 7.0, 0.0, 17.0, 1.0, 4.0, 18.0, -14.0, -13.0, 9.0, -12.0, 19.0, -5.0, -8.0, 19.0, 14.0, 18.0, 9.0, -9.0, 19.0, -3.0, 8.0, 9.0, -2.0, 6.0, 9.0, 3.0, -11.0, 2.0, 13.0, -7.0, -2.0, -5.0, 18.0, 6.0, 4.0, -8.0, 5.0, -7.0, 0.0, -7.0, 6.0, 5.0, -3.0, 3.0, -11.0, -15.0, 4.0, 1.0, 6.0, 23.0, 9.0, -10.0, 11.0, -14.0, -5.0, -1.0, 17.0, -8.0, -9.0, -1.0, -7.0, 11.0, -11.0, -12.0, -5.0, -5.0, 19.0, 9.0, 0.0, -13.0, 8.0, -10.0, -16.0, 11.0, 3.0, 9.0, 3.0, 8.0, -7.0, -11.0, 6.0, -9.0, -7.0, -5.0, 0.0, -4.0, -14.0, -7.0, -23.0, 6.0, -16.0, -12.0, 0.0, -8.0, 15.0, -13.0, 2.0, -1.0, -12.0, 5.0, -2.0, 7.0, 8.0, 21.0, 13.0, -4.0, -3.0, 11.0, 6.0, 6.0, -17.0, -1.0, -8.0, 2.0, -1.0, 9.0, 3.0, 7.0, -5.0, -10.0, -5.0, -1.0, 3.0, 22.0, -1.0, -10.0, -4.0, -5.0, 4.0, -16.0, 0.0, 1.0, 2.0, -6.0, -3.0, -15.0, -5.0, -6.0, 4.0, -12.0, 7.0, 14.0, -21.0, 4.0, 6.0, -7.0, -4.0, -2.0, -3.0, -4.0, -17.0, 11.0, 10.0, -9.0, -15.0, 5.0, -6.0, 1.0, -4.0, 6.0, 6.0], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.02, "rtol": 0.02}}
{"kernel_name": "gather_bfloat16_int32idx", "prompt": "/*\nThis AIE kernel implements a gather operation: for each idx in the int32 indices buffer, output_data[i] = input_data[indices[i]], all with bfloat16 inputs/outputs and int32 indices. Vectors are length 256.\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_data size: 256\nindices size: 256\noutput_data size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid gather_bfloat16_int32idx(bfloat16 *input_data, int32_t *indices, bfloat16 *output_data) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t GATHER_N = 256;\n    for (int i = 0; i < GATHER_N; i++) {\n        int32_t idx = indices[i];\n        output_data[i] = input_data[idx];\n    }\n}", "program_code": "extern \"C\" {\n    void gather_bfloat16_int32idx_wrapper(bfloat16 *input_data, int32_t *indices, bfloat16 *output_data) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        gather_bfloat16_int32idx(input_data, indices, output_data);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_data": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625, 0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625, 0.671875, 0.408203125, -0.76953125, 0.5390625, -0.67578125, 0.03173828125, -0.63671875, 0.67578125, 0.578125, -0.2080078125, 0.396484375, -1.09375, -1.4921875, 0.439453125, 0.1669921875, 0.63671875, 2.390625, 0.9453125, -0.9140625, 1.1171875, -1.3125, -0.4609375, -0.068359375, 1.7109375, -0.74609375, -0.828125, -0.0986328125, -0.6640625, 1.125, -1.078125, -1.1484375, -0.4375, -0.498046875, 1.9296875, 0.94921875, 0.08740234375, -1.2265625, 0.84375, -1.0, -1.546875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.65234375, -1.03125, 0.6796875, -0.8046875, -0.69140625, -0.455078125, 0.0174560546875, -0.353515625, -1.375, -0.64453125, -2.21875, 0.625, -1.6015625, -1.1015625, 0.05224609375, -0.73828125, 1.546875, -1.2890625, 0.267578125, -0.039306640625, -1.171875, 0.5234375, -0.171875, 0.7734375, 0.82421875, 2.15625, 1.3359375, -0.369140625, -0.2392578125, 1.1015625, 0.65625, 0.640625, -1.6171875, -0.0242919921875, -0.73828125, 0.279296875, -0.09814453125, 0.91015625, 0.31640625, 0.78515625, -0.466796875, -0.9453125, -0.41015625, -0.0169677734375, 0.37890625, 2.265625, -0.042236328125, -0.95703125, -0.345703125, -0.462890625, 0.482421875, -1.5390625, 0.0634765625, 0.15625, 0.232421875, -0.59765625, -0.23828125, -1.421875, -0.494140625, -0.54296875, 0.416015625, -1.15625, 0.78125, 1.4921875, -2.0625, 0.42578125, 0.67578125, -0.63671875, -0.396484375, -0.1328125, -0.296875, -0.30859375, -1.6796875, 1.1484375, 1.078125, -0.8125, -1.46875, 0.51953125, -0.57421875, 0.1416015625, -0.318359375, 0.69140625, 0.6953125], "dtype": "bfloat16"}, {"indices": [107, 158, 201, 211, 7, 149, 229, 220, 136, 171, 46, 0, 104, 179, 38, 89, 74, 243, 226, 123, 87, 96, 83, 26, 206, 32, 115, 198, 97, 172, 59, 57, 178, 173, 233, 132, 185, 93, 91, 145, 163, 194, 148, 173, 185, 207, 119, 164, 105, 190, 4, 241, 242, 205, 158, 109, 87, 226, 163, 73, 218, 183, 26, 118, 22, 204, 207, 98, 90, 51, 230, 46, 208, 61, 188, 47, 250, 104, 128, 138, 203, 141, 71, 94, 6, 173, 245, 158, 15, 169, 166, 53, 171, 82, 135, 220, 65, 169, 66, 114, 92, 78, 229, 219, 246, 100, 159, 221, 178, 252, 174, 93, 114, 161, 12, 224, 233, 80, 66, 200, 243, 125, 138, 112, 218, 155, 184, 120, 65, 192, 197, 88, 34, 207, 3, 188, 238, 165, 171, 211, 88, 70, 148, 134, 28, 115, 134, 66, 92, 220, 102, 101, 123, 197, 109, 73, 100, 182, 77, 149, 251, 159, 81, 35, 237, 243, 250, 136, 254, 25, 21, 173, 229, 214, 144, 153, 238, 119, 165, 127, 129, 133, 198, 140, 90, 74, 251, 182, 78, 62, 72, 199, 45, 133, 47, 187, 170, 195, 138, 242, 57, 219, 89, 131, 125, 206, 82, 197, 186, 132, 17, 197, 191, 94, 152, 131, 69, 168, 164, 58, 177, 183, 152, 161, 146, 97, 206, 241, 135, 181, 235, 46, 240, 244, 127, 161, 81, 157, 12, 118, 46, 118, 32, 34, 115, 87, 124, 153, 174, 242, 107, 52, 233, 110, 64, 76], "dtype": "int32"}], "outputs": [{"output_data": [-0.74609375, -1.1484375, -0.2392578125, 0.31640625, -0.1513671875, -0.4609375, -0.23828125, -0.95703125, 0.578125, 0.318359375, -1.25, 1.765625, -1.171875, 0.0174560546875, -0.38671875, 1.0546875, 0.40234375, -0.296875, 0.15625, 1.328125, -0.1796875, 0.010498046875, -1.5390625, 0.045654296875, -0.0242919921875, -0.88671875, 0.80078125, 2.15625, 1.7890625, 0.85546875, -0.36328125, 0.302734375, -0.455078125, -0.65234375, 0.416015625, -0.67578125, -1.6015625, 0.9765625, 1.21875, 0.9453125, 0.08740234375, 0.5234375, -1.3125, -0.65234375, -1.6015625, -0.73828125, 0.921875, -1.2265625, 1.9453125, -1.2890625, 1.8671875, -0.396484375, -0.1328125, -1.6171875, -1.1484375, 1.484375, -0.1796875, 0.15625, 0.08740234375, -1.234375, 2.265625, -2.21875, 0.045654296875, 0.61328125, 0.86328125, 0.640625, -0.73828125, 0.126953125, -0.40234375, 0.38671875, -1.421875, -1.25, 0.279296875, -0.359375, -0.73828125, 0.77734375, 0.51953125, -1.171875, 0.671875, 0.396484375, 0.65625, 0.439453125, 0.12890625, 0.35546875, 0.94921875, -0.65234375, -1.6796875, -1.1484375, 0.333984375, 0.31640625, -1.0, -1.1796875, 0.318359375, 0.46484375, 0.67578125, -0.95703125, -0.40234375, 0.31640625, -1.6328125, -0.267578125, 0.2080078125, -0.3125, -0.23828125, -0.042236328125, 1.1484375, 1.8828125, -0.4375, -0.345703125, -0.455078125, 0.1416015625, -1.03125, 0.9765625, -0.267578125, 1.9296875, 0.76171875, -1.5390625, 0.416015625, -1.1640625, -1.6328125, -0.369140625, -0.296875, -0.1494140625, 0.396484375, -0.859375, 2.265625, -0.6640625, 0.625, 0.376953125, -0.40234375, -0.039306640625, 0.82421875, -1.0703125, -0.34765625, -0.73828125, 2.234375, -0.73828125, 0.42578125, 0.84375, 0.318359375, 0.31640625, -1.0703125, 0.73046875, -1.3125, -0.63671875, 1.53125, 0.80078125, -0.63671875, -1.6328125, 0.2080078125, -0.95703125, -1.2734375, -1.3515625, 1.328125, 0.82421875, 1.484375, -1.234375, 1.8828125, -0.64453125, -0.578125, -0.4609375, -0.57421875, -0.4375, 0.90234375, 0.15625, -2.0625, -0.296875, 0.51953125, 0.578125, 0.69140625, -1.453125, 0.65234375, -0.65234375, -0.23828125, -0.9453125, 2.390625, -0.828125, 0.42578125, 0.921875, 0.84375, 1.8515625, 0.408203125, 0.03173828125, 2.15625, -1.4921875, -0.40234375, 0.40234375, -0.57421875, -0.64453125, -0.3125, -0.8125, 1.140625, 1.3359375, -0.4375, 0.03173828125, 0.77734375, 0.05224609375, 0.921875, -0.171875, 0.396484375, -0.1328125, 0.302734375, -0.042236328125, 1.0546875, 0.5390625, -0.1494140625, -0.0242919921875, 0.46484375, 0.82421875, -1.1015625, -0.67578125, -0.205078125, 0.82421875, 0.267578125, 0.35546875, -0.74609375, 0.5390625, 0.052001953125, 1.1875, -1.2265625, -0.6328125, -0.69140625, -2.21875, -0.74609375, 1.9296875, -0.9140625, 1.7890625, -0.0242919921875, -0.396484375, 0.67578125, -1.375, 0.78125, -1.25, -0.63671875, -0.30859375, 1.8515625, 1.9296875, 0.90234375, -1.078125, 0.76171875, 0.61328125, -1.25, 0.61328125, -0.88671875, -0.34765625, 0.80078125, -0.1796875, -0.6953125, -0.828125, -1.03125, -0.1328125, -0.74609375, -0.51171875, 0.416015625, 1.8671875, 0.177734375, -0.87109375], "dtype": "bfloat16"}]}}
{"kernel_name": "gelu_bfloat16", "prompt": "/*\nThis AIE kernel implements the GELU activation function using the approximation formula\n>>> gelu_bfloat16([3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375])\n[3.53125, 0.6328125, 1.9140625, 4.46875, 3.734375, -0.049560546875, 1.84375, -0.115234375]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid gelu_bfloat16(bfloat16 *input_vector, bfloat16 *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    constexpr float sqrt_2_over_pi = 0.7978845608028654f;\n    constexpr float coeff = 0.044715f;\n    \n    for (uint32_t i = 0; i < vector_size; i++) {\n        float x = (float)input_vector[i];\n        float x_cubed = x * x * x;\n        float inner = sqrt_2_over_pi * (x + coeff * x_cubed);\n\n        float inner_squared = inner * inner;\n        float tanh_num = inner * (135135.0f + inner_squared * (17325.0f + inner_squared * (378.0f + inner_squared)));\n        float tanh_den = 135135.0f + inner_squared * (62370.0f + inner_squared * (3150.0f + inner_squared * 28.0f));\n        float tanh_approx = tanh_num / tanh_den;\n\n        float cdf = 0.5f * (1.0f + tanh_approx);\n        output_vector[i] = (bfloat16)(x * cdf);\n    }\n}", "program_code": "extern \"C\" {\n    void gelu_bfloat16_wrapper(bfloat16 *input_vector, bfloat16 *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        gelu_bfloat16(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375, -0.2060546875, 0.8203125, 0.2890625, 2.90625, 1.5234375, 0.2431640625, 0.88671875, 0.66796875, 2.984375, -0.41015625, 0.625, -1.7109375, -5.09375, 1.3046875, 1.7265625, -1.484375, 4.53125, -2.90625, 0.09130859375, -0.375, 3.0625, 2.9375, 0.310546875, 0.7578125, -1.7734375, -3.96875, -0.6953125, 0.3125, 2.453125, 2.40625, -0.7734375, -0.60546875, -2.09375, -2.84375, -3.40625, 3.90625, -1.015625, -0.875, -2.5, 1.5546875, -3.234375, -0.42578125, -1.7890625, 0.7734375, -1.0234375, -2.359375, -0.056396484375, 0.85546875, 0.1328125, 0.60546875, -1.265625, -0.7265625, -1.34375, -0.71875, -1.625, -3.453125, 0.35546875, -0.8046875, -3.265625, 0.92578125, -1.8125, 0.10400390625, 1.4609375, 0.2578125, 2.28125, -2.46875, 0.8046875, -1.3671875, -1.7421875, -1.15625, -0.625, 0.1123046875, -2.328125, 1.8046875, 0.9296875, -3.078125, 2.96875, 3.796875, 2.359375, -0.359375, -2.140625, 2.109375, -0.8046875, 2.4375, 0.416015625, 1.953125, 0.7109375, 1.4140625, 0.02099609375, 3.578125, 0.25390625, 0.8046875, 3.765625, -2.703125, -2.546875, 1.9375, -2.34375, 3.890625, -0.828125, -1.4921875, 3.84375, 2.96875, 3.734375, 1.8125, -1.71875, 3.8125, -0.53515625, 1.6015625, 1.890625, -0.310546875, 1.2265625, 1.84375, 0.75390625, -2.203125, 0.59765625, 2.65625, -1.390625, -0.298828125, -0.87109375, 3.703125, 1.34375, 0.81640625, -1.5390625, 1.078125, -1.3515625, 0.0634765625, -1.2734375, 1.3515625, 1.15625, -0.416015625, 0.79296875, -2.1875, -2.984375, 0.87890625, 0.333984375, 1.2734375, 4.78125, 1.890625, -1.828125, 2.234375, -2.625, -0.921875, -0.13671875, 3.421875, -1.4921875, -1.65625, -0.197265625, -1.328125, 2.25, -2.15625, -2.296875, -0.875, -0.99609375, 3.859375, 1.8984375, 0.1748046875, -2.453125, 1.6875, -2.0, -3.09375, 2.375, 0.6328125, 1.84375, 0.63671875, 1.7109375, -1.3046875, -2.0625, 1.359375, -1.609375, -1.3828125, -0.91015625, 0.034912109375, -0.70703125, -2.75, -1.2890625, -4.4375, 1.25, -3.203125, -2.203125, 0.1044921875, -1.4765625, 3.09375, -2.578125, 0.53515625, -0.07861328125, -2.34375, 1.046875, -0.34375, 1.546875, 1.6484375, 4.3125, 2.671875, -0.73828125, -0.478515625, 2.203125, 1.3125, 1.28125, -3.234375, -0.048583984375, -1.4765625, 0.55859375, -0.1962890625, 1.8203125, 0.6328125, 1.5703125, -0.93359375, -1.890625, -0.8203125, -0.033935546875, 0.7578125, 4.53125, -0.08447265625, -1.9140625, -0.69140625, -0.92578125, 0.96484375, -3.078125, 0.126953125, 0.3125, 0.46484375, -1.1953125, -0.4765625, -2.84375, -0.98828125, -1.0859375, 0.83203125, -2.3125, 1.5625, 2.984375, -4.125, 0.8515625, 1.3515625, -1.2734375, -0.79296875, -0.265625, -0.59375, -0.6171875, -3.359375, 2.296875, 2.15625, -1.625, -2.9375, 1.0390625, -1.1484375, 0.283203125, -0.63671875, 1.3828125, 1.390625], "dtype": "bfloat16"}], "outputs": [{"output_vector": [3.53125, 0.6328125, 1.9140625, 4.46875, 3.734375, -0.049560546875, 1.84375, -0.115234375, -0.08642578125, 0.65234375, 0.177734375, 2.90625, 1.4296875, 0.14453125, 0.71875, 0.5, 2.984375, -0.1396484375, 0.458984375, -0.07470703125, -1.51805579662323e-07, 1.1796875, 1.65625, -0.1025390625, 4.53125, -0.0048828125, 0.049072265625, -0.1328125, 3.0625, 2.9375, 0.193359375, 0.5859375, -0.06787109375, -8.153915405273438e-05, -0.1689453125, 0.1943359375, 2.4375, 2.390625, -0.169921875, -0.1650390625, -0.037841796875, -0.005889892578125, -0.000885009765625, 3.90625, -0.1572265625, -0.1669921875, -0.01507568359375, 1.4609375, -0.00167083740234375, -0.142578125, -0.06591796875, 0.6015625, -0.1572265625, -0.021240234375, -0.0269775390625, 0.6875, 0.0732421875, 0.44140625, -0.1298828125, -0.169921875, -0.12060546875, -0.169921875, -0.0849609375, -0.000736236572265625, 0.2275390625, -0.169921875, -0.001495361328125, 0.76171875, -0.0634765625, 0.056396484375, 1.359375, 0.1552734375, 2.25, -0.0162353515625, 0.63671875, -0.11767578125, -0.0712890625, -0.1435546875, -0.166015625, 0.061279296875, -0.0228271484375, 1.7421875, 0.765625, -0.002838134765625, 2.96875, 3.796875, 2.34375, -0.12890625, -0.034423828125, 2.078125, -0.169921875, 2.421875, 0.275390625, 1.90625, 0.54296875, 1.3046875, 0.01068115234375, 3.578125, 0.15234375, 0.63671875, 3.765625, -0.0087890625, -0.013427734375, 1.8828125, -0.02197265625, 3.890625, -0.1689453125, -0.1015625, 3.84375, 2.96875, 3.734375, 1.75, -0.07373046875, 3.8125, -0.158203125, 1.515625, 1.8359375, -0.1171875, 1.09375, 1.78125, 0.58203125, -0.0301513671875, 0.43359375, 2.640625, -0.11474609375, -0.1142578125, -0.1669921875, 3.703125, 1.2265625, 0.6484375, -0.095703125, 0.92578125, -0.11962890625, 0.033447265625, -0.1298828125, 1.234375, 1.015625, -0.140625, 0.625, -0.03125, -0.003814697265625, 0.7109375, 0.2109375, 1.140625, 4.78125, 1.8359375, -0.061767578125, 2.203125, -0.0108642578125, -0.1640625, -0.06103515625, 3.421875, -0.1015625, -0.0810546875, -0.0830078125, -0.12255859375, 2.21875, -0.033203125, -0.0245361328125, -0.1669921875, -0.1591796875, 3.859375, 1.84375, 0.099609375, -0.0169677734375, 1.609375, -0.04541015625, -0.002685546875, 2.359375, 0.466796875, 1.78125, 0.470703125, 1.6328125, -0.1259765625, -0.040283203125, 1.2421875, -0.0869140625, -0.11572265625, -0.1650390625, 0.0179443359375, -0.169921875, -0.00775146484375, -0.1279296875, -7.271766662597656e-06, 1.1171875, -0.001861572265625, -0.0301513671875, 0.056640625, -0.103515625, 3.09375, -0.0123291015625, 0.376953125, -0.036865234375, -0.02197265625, 0.890625, -0.1259765625, 1.453125, 1.5625, 4.3125, 2.65625, -0.169921875, -0.1513671875, 2.171875, 1.1875, 1.15625, -0.00167083740234375, -0.0233154296875, -0.103515625, 0.3984375, -0.0830078125, 1.7578125, 0.466796875, 1.4765625, -0.1640625, -0.055419921875, -0.1689453125, -0.0164794921875, 0.5859375, 4.53125, -0.039306640625, -0.05322265625, -0.1689453125, -0.1640625, 0.8046875, -0.002838134765625, 0.06982421875, 0.1943359375, 0.31640625, -0.138671875, -0.1513671875, -0.005889892578125, -0.16015625, -0.150390625, 0.6640625, -0.023681640625, 1.46875, 2.984375, -3.8623809814453125e-05, 0.68359375, 1.234375, -0.1298828125, -0.169921875, -0.10498046875, -0.1640625, -0.166015625, -0.00104522705078125, 2.265625, 2.125, -0.0849609375, -0.004425048828125, 0.8828125, -0.14453125, 0.1728515625, -0.1669921875, 1.265625, 1.2734375], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "hardsigmoid_bfloat16", "prompt": "/*\nThis AIE kernel performs a hard sigmoid activation on a bfloat16 input vector.\n>>> hardsigmoid_bfloat16([17.625, 4.0, 9.8125, 22.375, 18.625, -9.75, 9.5, -1.515625])\n[1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.197265625]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 256\nout_buffer size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid hardsigmoid_bfloat16(bfloat16 *in_buffer, bfloat16 *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t num_elements = 256;\n    bfloat16 zero_value = 0.0f;\n    bfloat16 one_value = 1.0f;\n    bfloat16 slope_value = 0.2f;\n    bfloat16 offset_value = 0.5f;\n\n    for (uint32_t i = 0; i < num_elements; i++) {\n        bfloat16 input_value = *in_buffer;\n        in_buffer++;\n\n        bfloat16 result = input_value * slope_value + offset_value;\n\n        if (result > one_value) {\n            result = one_value;\n        }\n        if (result < zero_value) {\n            result = zero_value;\n        }\n\n        out_buffer[i] = result;\n    }\n}", "program_code": "extern \"C\" {\n    void hardsigmoid_bfloat16_wrapper(bfloat16 *in_buffer, bfloat16 *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        hardsigmoid_bfloat16(in_buffer, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [17.625, 4.0, 9.8125, 22.375, 18.625, -9.75, 9.5, -1.515625, -1.03125, 4.09375, 1.4375, 14.5625, 7.625, 1.21875, 4.4375, 3.34375, 14.9375, -2.046875, 3.125, -8.5625, -25.5, 6.53125, 8.625, -7.40625, 22.75, -14.5625, 0.45703125, -1.875, 15.3125, 14.6875, 1.546875, 3.78125, -8.875, -19.75, -3.484375, 1.5625, 12.3125, 12.0, -3.875, -3.015625, -10.5, -14.1875, -17.125, 19.5, -5.09375, -4.375, -12.5, 7.78125, -16.125, -2.125, -8.9375, 3.875, -5.09375, -11.8125, -0.28125, 4.28125, 0.6640625, 3.03125, -6.34375, -3.625, -6.71875, -3.59375, -8.125, -17.25, 1.7734375, -4.03125, -16.25, 4.625, -9.0625, 0.51953125, 7.28125, 1.2890625, 11.375, -12.375, 4.03125, -6.84375, -8.6875, -5.78125, -3.109375, 0.5625, -11.625, 9.0, 4.65625, -15.375, 14.875, 19.0, 11.8125, -1.796875, -10.6875, 10.5625, -4.03125, 12.25, 2.078125, 9.75, 3.5625, 7.0625, 0.10498046875, 17.875, 1.265625, 4.03125, 18.875, -13.5, -12.6875, 9.6875, -11.75, 19.375, -4.125, -7.46875, 19.25, 14.8125, 18.625, 9.0625, -8.625, 19.125, -2.6875, 8.0, 9.5, -1.546875, 6.15625, 9.25, 3.765625, -11.0, 2.984375, 13.25, -6.9375, -1.5, -4.34375, 18.5, 6.71875, 4.0625, -7.6875, 5.40625, -6.75, 0.318359375, -6.34375, 6.75, 5.78125, -2.078125, 3.953125, -10.9375, -14.9375, 4.40625, 1.6640625, 6.34375, 23.875, 9.4375, -9.125, 11.1875, -13.1875, -4.625, -0.68359375, 17.125, -7.4375, -8.25, -0.984375, -6.625, 11.25, -10.8125, -11.5, -4.375, -4.96875, 19.25, 9.5, 0.875, -12.25, 8.4375, -10.0, -15.4375, 11.875, 3.171875, 9.1875, 3.1875, 8.5625, -6.5, -10.3125, 6.8125, -8.0625, -6.90625, -4.5625, 0.1748046875, -3.546875, -13.75, -6.4375, -22.25, 6.25, -16.0, -11.0625, 0.5234375, -7.40625, 15.4375, -12.9375, 2.671875, -0.392578125, -11.6875, 5.21875, -1.71875, 7.71875, 8.25, 21.625, 13.375, -3.6875, -2.390625, 11.0, 6.5625, 6.40625, -16.125, -0.2431640625, -7.375, 2.796875, -0.98046875, 9.125, 3.171875, 7.875, -4.65625, -9.4375, -4.09375, -0.169921875, 3.796875, 22.625, -0.421875, -9.5625, -3.453125, -4.625, 4.8125, -15.4375, 0.6328125, 1.5625, 2.328125, -5.96875, -2.375, -14.25, -4.9375, -5.4375, 4.15625, -11.5625, 7.8125, 14.9375, -20.75, 4.25, 6.78125, -6.375, -3.96875, -1.328125, -2.984375, -3.09375, -16.75, 11.5, 10.8125, -8.125, -14.6875, 5.21875, -5.75, 1.421875, -3.1875, 6.90625, 6.9375], "dtype": "bfloat16"}], "outputs": [{"out_buffer": [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.197265625, 0.29296875, 1.0, 0.7890625, 1.0, 1.0, 0.7421875, 1.0, 1.0, 1.0, 0.08984375, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.58984375, 0.125, 1.0, 1.0, 0.8125, 1.0, 0.0, 0.0, 0.0, 0.8125, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.07421875, 0.0, 1.0, 0.0, 0.0, 0.443359375, 1.0, 0.6328125, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.85546875, 0.0, 0.0, 1.0, 0.0, 0.60546875, 1.0, 0.7578125, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.61328125, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.140625, 0.0, 1.0, 0.0, 1.0, 0.9140625, 1.0, 1.0, 1.0, 0.51953125, 1.0, 0.75390625, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.189453125, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.19921875, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.5625, 0.0, 1.0, 1.0, 0.083984375, 1.0, 0.0, 0.0, 1.0, 0.8359375, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.36328125, 1.0, 0.0, 0.0, 0.302734375, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.67578125, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.53515625, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.60546875, 0.0, 1.0, 0.0, 1.0, 0.421875, 0.0, 1.0, 0.15625, 1.0, 1.0, 1.0, 1.0, 0.0, 0.021484375, 1.0, 1.0, 1.0, 0.0, 0.451171875, 0.0, 1.0, 0.3046875, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.466796875, 1.0, 1.0, 0.416015625, 0.0, 0.0, 0.0, 1.0, 0.0, 0.625, 0.8125, 0.96875, 0.0, 0.025390625, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.234375, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.78515625, 0.0, 1.0, 1.0], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "hardsigmoid_int8", "prompt": "/*\nThis AIE kernel applies the hardsigmoid activation function on a vector of int8 values. The hardsigmoid is computed as: y = max(0, min(1, x/6 + 0.5)), and the result is rescaled and quantized into int8 output with the range [0,127].\n>>> hardsigmoid_int8([44, -118, -1, 12, -81, 42, 68, 23])\n[127, 0, 42, 127, 0, 127, 127, 127]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid hardsigmoid_int8(const int8_t *input_vector, int8_t *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t VECTOR_SIZE = 256;\n    for (int i = 0; i < VECTOR_SIZE; i++) {\n        float x = (float)input_vector[i];\n        float y = (x / 6.0f) + 0.5f;\n        if (y < 0.0f) y = 0.0f;\n        if (y > 1.0f) y = 1.0f;\n        int32_t out = (int32_t)(y * 127.0f + 0.5f);\n        if (out > 127) out = 127;\n        if (out < 0) out = 0;\n        output_vector[i] = (int8_t)out;\n    }\n}", "program_code": "extern \"C\" {\n    void hardsigmoid_int8_wrapper(const int8_t *input_vector, int8_t *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        hardsigmoid_int8(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [44, -118, -1, 12, -81, 42, 68, 23, -11, 38, -106, 55, 64, 76, -95, 88, -61, 51, -50, 26, 123, -46, 34, 91, 67, -10, -3, 11, -25, -3, 101, 88, -119, 36, -12, -20, 83, 94, 33, 31, -107, -47, -39, 37, 114, 86, -26, -30, -92, 55, -123, -16, -41, -70, -85, -52, -58, -68, -53, 100, 88, 61, 4, -114, -40, 26, 50, 118, 12, 77, 76, -59, -70, -71, -87, -30, 65, -62, -56, -6, 102, -3, 46, 74, -89, -54, 106, 79, -41, 40, -27, 7, 46, 72, 95, -6, -40, -34, -21, 17, -47, 11, 13, -28, 37, 102, 115, 108, -103, -62, -119, 86, -51, -21, -81, -110, -56, 24, -33, -42, -119, -101, -50, -106, 20, 23, 110, 37, -13, -120, -83, -123, 80, -109, -59, -34, 115, 18, -90, 85, 69, -98, -120, 117, 126, -57, -75, 71, -49, -121, 110, -93, 47, -99, 57, 94, 64, -119, 62, 94, -46, 59, 6, 122, -29, -32, -66, -7, 88, 39, 21, 76, 49, -4, -120, 77, 115, 2, -93, -10, -99, -125, -66, 5, 19, 66, 80, 71, 19, -116, 75, 45, 14, -69, -57, -98, 39, -31, -5, 56, -96, 93, 81, 35, 65, -65, 127, 20, -119, 77, 50, -92, 57, -54, 17, 9, -1, 82, 85, 113, -96, 34, -76, 66, -97, 90, 23, 5, 74, 66, -100, -101, 116, -56, -89, -22, 23, 96, -67, -7, 35, 106, 57, -61, 126, -7, 51, -81, 75, -83, -76, 70, -14, 43, 38, 60], "dtype": "int8"}], "outputs": [{"output_vector": [127, 0, 42, 127, 0, 127, 127, 127, 0, 127, 0, 127, 127, 127, 0, 127, 0, 127, 0, 127, 127, 0, 127, 127, 127, 0, 0, 127, 0, 0, 127, 127, 0, 127, 0, 0, 127, 127, 127, 127, 0, 0, 0, 127, 127, 127, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 127, 127, 0, 0, 127, 127, 127, 127, 127, 127, 0, 0, 0, 0, 0, 127, 0, 0, 0, 127, 0, 127, 127, 0, 0, 127, 127, 0, 127, 0, 127, 127, 127, 127, 0, 0, 0, 0, 127, 0, 127, 127, 0, 127, 127, 127, 127, 0, 0, 0, 127, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 127, 127, 127, 127, 0, 0, 0, 0, 127, 0, 0, 0, 127, 127, 0, 127, 127, 0, 0, 127, 127, 0, 0, 127, 0, 0, 127, 0, 127, 0, 127, 127, 127, 0, 127, 127, 0, 127, 127, 127, 0, 0, 0, 0, 127, 127, 127, 127, 127, 0, 0, 127, 127, 106, 0, 0, 0, 0, 0, 127, 127, 127, 127, 127, 127, 0, 127, 127, 127, 0, 0, 0, 127, 0, 0, 127, 0, 127, 127, 127, 127, 0, 127, 127, 0, 127, 127, 0, 127, 0, 127, 127, 42, 127, 127, 127, 0, 127, 0, 127, 0, 127, 127, 127, 127, 127, 0, 0, 127, 0, 0, 0, 127, 127, 0, 0, 127, 127, 127, 0, 127, 0, 127, 0, 127, 0, 0, 127, 0, 127, 127, 127], "dtype": "int8"}]}}
{"kernel_name": "hardswish_bfloat16", "prompt": "/*\nThis AIE kernel implements the hard swish activation function on a bfloat16 vector\n>>> hardswish_bfloat16([3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375])\n[3.546875, 0.5078125, 1.625, 4.46875, 3.734375, -0.341796875, 1.5546875, -0.1357421875]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid hardswish_bfloat16(bfloat16 *input_vector, bfloat16 *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    bfloat16 zero_value = 0.0f;\n    bfloat16 three_value = 3.0f;\n    bfloat16 six_value = 6.0f;\n\n    for (uint32_t i = 0; i < vector_size; i++) {\n        bfloat16 x = *input_vector;\n        input_vector++;\n        if (x < -three_value) {\n            output_vector[i] = zero_value;\n        } else if (x > three_value) {\n            output_vector[i] = x;\n        } else {\n            output_vector[i] = x * (x + three_value) / six_value;\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void hardswish_bfloat16_wrapper(bfloat16 *input_vector, bfloat16 *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        hardswish_bfloat16(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375, -0.2060546875, 0.8203125, 0.2890625, 2.90625, 1.5234375, 0.2431640625, 0.88671875, 0.66796875, 2.984375, -0.41015625, 0.625, -1.7109375, -5.09375, 1.3046875, 1.7265625, -1.484375, 4.53125, -2.90625, 0.09130859375, -0.375, 3.0625, 2.9375, 0.310546875, 0.7578125, -1.7734375, -3.96875, -0.6953125, 0.3125, 2.453125, 2.40625, -0.7734375, -0.60546875, -2.09375, -2.84375, -3.40625, 3.90625, -1.015625, -0.875, -2.5, 1.5546875, -3.234375, -0.42578125, -1.7890625, 0.7734375, -1.0234375, -2.359375, -0.056396484375, 0.85546875, 0.1328125, 0.60546875, -1.265625, -0.7265625, -1.34375, -0.71875, -1.625, -3.453125, 0.35546875, -0.8046875, -3.265625, 0.92578125, -1.8125, 0.10400390625, 1.4609375, 0.2578125, 2.28125, -2.46875, 0.8046875, -1.3671875, -1.7421875, -1.15625, -0.625, 0.1123046875, -2.328125, 1.8046875, 0.9296875, -3.078125, 2.96875, 3.796875, 2.359375, -0.359375, -2.140625, 2.109375, -0.8046875, 2.4375, 0.416015625, 1.953125, 0.7109375, 1.4140625, 0.02099609375, 3.578125, 0.25390625, 0.8046875, 3.765625, -2.703125, -2.546875, 1.9375, -2.34375, 3.890625, -0.828125, -1.4921875, 3.84375, 2.96875, 3.734375, 1.8125, -1.71875, 3.8125, -0.53515625, 1.6015625, 1.890625, -0.310546875, 1.2265625, 1.84375, 0.75390625, -2.203125, 0.59765625, 2.65625, -1.390625, -0.298828125, -0.87109375, 3.703125, 1.34375, 0.81640625, -1.5390625, 1.078125, -1.3515625, 0.0634765625, -1.2734375, 1.3515625, 1.15625, -0.416015625, 0.79296875, -2.1875, -2.984375, 0.87890625, 0.333984375, 1.2734375, 4.78125, 1.890625, -1.828125, 2.234375, -2.625, -0.921875, -0.13671875, 3.421875, -1.4921875, -1.65625, -0.197265625, -1.328125, 2.25, -2.15625, -2.296875, -0.875, -0.99609375, 3.859375, 1.8984375, 0.1748046875, -2.453125, 1.6875, -2.0, -3.09375, 2.375, 0.6328125, 1.84375, 0.63671875, 1.7109375, -1.3046875, -2.0625, 1.359375, -1.609375, -1.3828125, -0.91015625, 0.034912109375, -0.70703125, -2.75, -1.2890625, -4.4375, 1.25, -3.203125, -2.203125, 0.1044921875, -1.4765625, 3.09375, -2.578125, 0.53515625, -0.07861328125, -2.34375, 1.046875, -0.34375, 1.546875, 1.6484375, 4.3125, 2.671875, -0.73828125, -0.478515625, 2.203125, 1.3125, 1.28125, -3.234375, -0.048583984375, -1.4765625, 0.55859375, -0.1962890625, 1.8203125, 0.6328125, 1.5703125, -0.93359375, -1.890625, -0.8203125, -0.033935546875, 0.7578125, 4.53125, -0.08447265625, -1.9140625, -0.69140625, -0.92578125, 0.96484375, -3.078125, 0.126953125, 0.3125, 0.46484375, -1.1953125, -0.4765625, -2.84375, -0.98828125, -1.0859375, 0.83203125, -2.3125, 1.5625, 2.984375, -4.125, 0.8515625, 1.3515625, -1.2734375, -0.79296875, -0.265625, -0.59375, -0.6171875, -3.359375, 2.296875, 2.15625, -1.625, -2.9375, 1.0390625, -1.1484375, 0.283203125, -0.63671875, 1.3828125, 1.390625], "dtype": "bfloat16"}], "outputs": [{"output_vector": [3.546875, 0.5078125, 1.625, 4.46875, 3.734375, -0.341796875, 1.5546875, -0.1357421875, -0.09619140625, 0.51953125, 0.158203125, 2.859375, 1.1484375, 0.1318359375, 0.57421875, 0.408203125, 2.984375, -0.1767578125, 0.376953125, -0.3671875, -0.0, 0.9375, 1.3515625, -0.375, 4.53125, -0.045654296875, 0.047119140625, -0.1640625, 3.0625, 2.921875, 0.171875, 0.474609375, -0.361328125, -0.0, -0.267578125, 0.171875, 2.21875, 2.171875, -0.287109375, -0.2412109375, -0.31640625, -0.07421875, -0.0, 3.921875, -0.3359375, -0.310546875, -0.2080078125, 1.1796875, -0.0, -0.18359375, -0.361328125, 0.486328125, -0.3359375, -0.251953125, -0.0277099609375, 0.55078125, 0.06884765625, 0.365234375, -0.365234375, -0.275390625, -0.369140625, -0.2734375, -0.373046875, -0.0, 0.19921875, -0.29296875, -0.0, 0.60546875, -0.359375, 0.053955078125, 1.0859375, 0.1396484375, 2.015625, -0.21875, 0.51171875, -0.373046875, -0.365234375, -0.353515625, -0.2470703125, 0.058349609375, -0.259765625, 1.4453125, 0.609375, -0.0, 2.953125, 3.796875, 2.109375, -0.158203125, -0.306640625, 1.8046875, -0.29296875, 2.203125, 0.2373046875, 1.6015625, 0.439453125, 1.0390625, 0.01055908203125, 3.578125, 0.1376953125, 0.51171875, 3.765625, -0.1337890625, -0.1923828125, 1.59375, -0.255859375, 3.890625, -0.298828125, -0.375, 3.828125, 2.953125, 3.734375, 1.4609375, -0.3671875, 3.8125, -0.2197265625, 1.2265625, 1.53125, -0.1396484375, 0.86328125, 1.4921875, 0.470703125, -0.29296875, 0.357421875, 2.5, -0.373046875, -0.134765625, -0.30859375, 3.703125, 0.97265625, 0.51953125, -0.375, 0.73046875, -0.373046875, 0.032470703125, -0.3671875, 0.98046875, 0.80078125, -0.1787109375, 0.50390625, -0.296875, -0.007781982421875, 0.56640625, 0.1845703125, 0.90625, 4.78125, 1.53125, -0.357421875, 1.9609375, -0.1640625, -0.318359375, -0.06494140625, 3.421875, -0.375, -0.369140625, -0.091796875, -0.369140625, 1.96875, -0.302734375, -0.26953125, -0.310546875, -0.33203125, 3.859375, 1.5546875, 0.09228515625, -0.2236328125, 1.3203125, -0.333984375, -0.0, 2.125, 0.3828125, 1.4921875, 0.384765625, 1.34375, -0.369140625, -0.322265625, 0.98828125, -0.373046875, -0.373046875, -0.318359375, 0.0177001953125, -0.271484375, -0.11474609375, -0.3671875, -0.0, 0.88671875, -0.0, -0.29296875, 0.053955078125, -0.375, 3.078125, -0.1806640625, 0.314453125, -0.038330078125, -0.255859375, 0.70703125, -0.15234375, 1.1796875, 1.28125, 4.3125, 2.53125, -0.279296875, -0.2001953125, 1.90625, 0.94140625, 0.91796875, -0.0, -0.02392578125, -0.375, 0.33203125, -0.091796875, 1.4609375, 0.3828125, 1.1953125, -0.3203125, -0.349609375, -0.298828125, -0.0167236328125, 0.474609375, 4.53125, -0.041259765625, -0.345703125, -0.267578125, -0.3203125, 0.63671875, -0.0, 0.06591796875, 0.171875, 0.267578125, -0.359375, -0.2001953125, -0.07421875, -0.33203125, -0.345703125, 0.53125, -0.265625, 1.1875, 2.984375, -0.0, 0.54296875, 0.98046875, -0.3671875, -0.291015625, -0.12109375, -0.23828125, -0.2451171875, -0.0, 2.03125, 1.8515625, -0.373046875, -0.0306396484375, 0.69921875, -0.353515625, 0.1552734375, -0.25, 1.0078125, 1.015625], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "hingeloss_bfloat16", "prompt": "/*\nAn AIE kernel that computes the element-wise hinge loss for two bfloat16 arrays of length 256. For each index i, output[i] = max(0, 1 - label[i] * pred[i]), where label is typically +1 or -1.\n>>> hingeloss_bfloat16([0.1953125, 0.859375, 0.41015625, 0.1796875, -0.3046875, 0.58203125, -0.25, 1.5703125], [-1.0, 1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0])\n[1.1953125, 0.140625, 1.40625, 1.1796875, 0.6953125, 0.41796875, 0.75, 0.0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\npred size: 256\nlabel size: 256\nout size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid hingeloss_bfloat16(bfloat16 *pred, bfloat16 *label, bfloat16 *out) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n    for (int i = 0; i < N; ++i) {\n        float y = float(label[i]);\n        float p = float(pred[i]);\n        float t = 1.0f - y * p;\n        float h = t > 0.0f ? t : 0.0f;\n        out[i] = (bfloat16)h;\n    }\n}", "program_code": "extern \"C\" {\n    void hingeloss_bfloat16_wrapper(bfloat16 *pred, bfloat16 *label, bfloat16 *out) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        hingeloss_bfloat16(pred, label, out);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"pred": [0.1953125, 0.859375, 0.41015625, 0.1796875, -0.3046875, 0.58203125, -0.25, 1.5703125, 1.8515625, -0.466796875, 1.1640625, 0.11572265625, 0.271484375, 1.703125, -1.71875, -1.6484375, -1.921875, 1.328125, 1.109375, 1.4765625, 1.9140625, 1.1953125, -0.154296875, 1.125, -1.5234375, 0.55859375, -1.4296875, 1.78125, 0.08740234375, -0.341796875, -0.94140625, 1.09375, -0.17578125, 0.2734375, -1.921875, 0.470703125, 0.44921875, 0.466796875, 1.7734375, 0.7265625, -0.5625, -0.251953125, 0.7890625, -1.7578125, 0.66796875, 0.68359375, -1.15625, -1.484375, -0.73828125, -0.546875, 0.28125, -0.2451171875, 1.953125, -1.59375, -1.1640625, -1.3515625, 0.61328125, -0.98828125, -0.134765625, -1.0234375, -1.3671875, -1.5546875, 0.625, -1.4453125, -1.2109375, -0.5234375, 1.28125, -1.609375, 1.3515625, -1.6171875, 1.90625, -0.125, 1.90625, 0.419921875, 0.95703125, -1.84375, -0.8671875, -1.515625, -0.81640625, -1.5234375, -0.7265625, -0.34375, -1.7421875, 0.76953125, 0.265625, -0.9375, 0.0927734375, -1.625, 0.3046875, 1.71875, -0.7265625, 0.66796875, -1.4765625, 0.8671875, -0.84375, -1.265625, 0.345703125, -1.921875, 1.3125, -1.984375, 0.7109375, -0.921875, 0.94140625, 1.8515625, -1.0078125, 0.3046875, 0.369140625, 0.2890625, -1.109375, 1.8125, -0.2119140625, 1.3828125, 0.796875, -0.80859375, 1.2578125, -0.4140625, 1.5234375, 0.32421875, 1.5234375, 0.76953125, 0.90234375, 0.00531005859375, 1.828125, 0.57421875, -0.3046875, 0.42578125, -1.921875, -0.79296875, 0.640625, -0.83984375, 0.47265625, -0.28515625, -1.4609375, -0.80859375, 0.279296875, 0.36328125, 0.296875, 0.61328125, 0.609375, -0.2734375, 1.5859375, -0.53125, -0.255859375, 1.5703125, 1.2265625, 0.81640625, -1.6015625, 1.6796875, 0.85546875, 1.9921875, -1.3984375, 1.46875, -1.3515625, 0.462890625, -1.5078125, 1.390625, 1.2265625, 0.27734375, -0.37109375, -1.7265625, 0.7890625, -0.185546875, 0.88671875, 1.46875, 1.8984375, 1.421875, -1.953125, -0.55859375, 0.921875, -1.3125, 0.083984375, -1.78125, -1.203125, -1.9296875, 1.171875, -1.1015625, -0.6171875, 1.7109375, 0.81640625, -1.875, -1.34375, 0.486328125, 0.30859375, -1.046875, 1.734375, 0.455078125, 0.142578125, 0.359375, 0.921875, -0.75390625, -0.40625, -1.1640625, -1.2578125, 1.78125, 0.95703125, -0.0380859375, -1.09375, -0.984375, -1.765625, -0.26171875, -0.75390625, 0.78515625, -0.48828125, -1.28125, -1.8984375, -1.734375, 0.71875, -0.185546875, 0.146484375, 1.5859375, 1.9609375, -1.1328125, 0.65234375, -0.9453125, -1.9140625, 1.03125, -0.71875, -0.466796875, 0.353515625, 1.3203125, 0.515625, 1.4921875, -0.90625, 1.1953125, -1.2578125, 1.8125, 0.75, -1.140625, 1.7890625, 0.921875, -0.984375, -1.1484375, 0.07275390625, -1.8984375, -1.171875, -0.30078125, -0.50390625, -0.1455078125, -0.890625, 0.34765625, 1.453125, -1.53125, 0.0693359375, -1.46875, 0.8671875, -0.416015625, 0.26171875, -1.265625, -1.421875, -0.0478515625, -0.578125, 1.765625, 1.0625, 0.99609375, 1.6171875, -1.6640625], "dtype": "bfloat16"}, {"label": [-1.0, 1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0], "dtype": "bfloat16"}], "outputs": [{"out": [1.1953125, 0.140625, 1.40625, 1.1796875, 0.6953125, 0.41796875, 0.75, 0.0, 2.84375, 1.46875, 2.15625, 0.8828125, 0.7265625, 2.703125, 0.0, 2.65625, 0.0, 0.0, 2.109375, 0.0, 2.90625, 2.1875, 0.84375, 2.125, 2.53125, 0.44140625, 0.0, 0.0, 1.0859375, 1.34375, 1.9375, 2.09375, 1.171875, 1.2734375, 0.0, 1.46875, 1.453125, 1.46875, 0.0, 0.2734375, 0.4375, 0.75, 1.7890625, 0.0, 0.33203125, 0.31640625, 0.0, 0.0, 1.734375, 0.453125, 0.71875, 1.2421875, 0.0, 2.59375, 2.15625, 2.34375, 0.38671875, 1.984375, 1.1328125, 2.03125, 2.375, 0.0, 1.625, 2.4375, 2.21875, 1.5234375, 0.0, 0.0, 2.34375, 2.625, 2.90625, 0.875, 0.0, 1.421875, 0.04296875, 0.0, 1.8671875, 0.0, 0.18359375, 2.53125, 0.2734375, 0.65625, 0.0, 1.765625, 1.265625, 1.9375, 1.09375, 2.625, 1.3046875, 2.71875, 1.7265625, 0.33203125, 2.46875, 0.1328125, 0.15625, 0.0, 0.65625, 0.0, 0.0, 2.984375, 0.2890625, 1.921875, 1.9375, 2.84375, 2.0, 1.3046875, 1.3671875, 0.7109375, 2.109375, 0.0, 0.7890625, 2.375, 1.796875, 1.8125, 0.0, 0.5859375, 0.0, 1.328125, 2.53125, 1.765625, 0.09765625, 0.99609375, 2.828125, 0.42578125, 0.6953125, 0.57421875, 0.0, 0.20703125, 0.359375, 0.16015625, 1.46875, 0.71484375, 0.0, 0.19140625, 0.71875, 0.63671875, 0.703125, 0.38671875, 0.390625, 1.2734375, 0.0, 1.53125, 0.7421875, 2.5625, 2.21875, 1.8125, 2.59375, 0.0, 0.14453125, 0.0, 0.0, 0.0, 0.0, 1.4609375, 2.5, 0.0, 0.0, 1.28125, 1.375, 2.71875, 0.2109375, 0.8125, 0.11328125, 0.0, 0.0, 0.0, 2.953125, 0.44140625, 1.921875, 2.3125, 1.0859375, 0.0, 0.0, 2.9375, 2.171875, 2.09375, 0.3828125, 0.0, 1.8125, 2.875, 2.34375, 1.484375, 0.69140625, 0.0, 2.734375, 1.453125, 0.859375, 1.359375, 0.078125, 0.24609375, 1.40625, 2.15625, 0.0, 0.0, 0.04296875, 0.9609375, 2.09375, 1.984375, 2.765625, 1.265625, 1.75, 1.78125, 0.51171875, 2.28125, 2.90625, 2.734375, 0.28125, 0.8125, 0.8515625, 2.59375, 2.96875, 2.125, 1.65625, 1.9453125, 0.0, 0.0, 1.71875, 0.53125, 0.6484375, 0.0, 1.515625, 0.0, 0.09375, 2.1875, 0.0, 2.8125, 0.25, 0.0, 2.78125, 0.078125, 0.015625, 0.0, 1.0703125, 2.90625, 0.0, 1.296875, 0.49609375, 0.85546875, 0.109375, 1.34375, 0.0, 2.53125, 0.9296875, 0.0, 1.8671875, 1.4140625, 0.73828125, 0.0, 2.421875, 1.046875, 0.421875, 0.0, 0.0, 2.0, 0.0, 0.0], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "inverse_uint8", "prompt": "/*\nThis AIE kernel inverts all input values of a buffer containing a uint8 array.\n>>> inverse_uint8([172, 10, 127, 140, 47, 170, 196, 151])\n[83, 245, 128, 115, 208, 85, 59, 104]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 1024\nout_buffer size: 1024\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid inverse_uint8(uint8_t *in_buffer, uint8_t *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr uint32_t nbytes = 1024;\n    constexpr uint32_t num_elements = nbytes / sizeof(uint8_t);\n\n    for (uint32_t i = 0; i < num_elements; i++) {\n        out_buffer[i] = 255 - in_buffer[i];\n    }\n}", "program_code": "extern \"C\" {\n    void inverse_uint8_wrapper(uint8_t *in_buffer, uint8_t *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        inverse_uint8(in_buffer, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [172, 10, 127, 140, 47, 170, 196, 151, 117, 166, 22, 183, 192, 204, 33, 216, 67, 179, 78, 154, 251, 82, 162, 219, 195, 118, 125, 139, 103, 125, 229, 216, 9, 164, 116, 108, 211, 222, 161, 159, 21, 81, 89, 165, 242, 214, 102, 98, 36, 183, 5, 112, 87, 58, 43, 76, 70, 60, 75, 228, 216, 189, 132, 14, 88, 154, 178, 246, 140, 205, 204, 69, 58, 57, 41, 98, 193, 66, 72, 122, 230, 125, 174, 202, 39, 74, 234, 207, 87, 168, 101, 135, 174, 200, 223, 122, 88, 94, 107, 145, 81, 139, 141, 100, 165, 230, 243, 236, 25, 66, 9, 214, 77, 107, 47, 18, 72, 152, 95, 86, 9, 27, 78, 22, 148, 151, 238, 165, 115, 8, 45, 5, 208, 19, 69, 94, 243, 146, 38, 213, 197, 30, 8, 245, 254, 71, 53, 199, 79, 7, 238, 35, 175, 29, 185, 222, 192, 9, 190, 222, 82, 187, 134, 250, 99, 96, 62, 121, 216, 167, 149, 204, 177, 124, 8, 205, 243, 130, 35, 118, 29, 3, 62, 133, 147, 194, 208, 199, 147, 12, 203, 173, 142, 59, 71, 30, 167, 97, 123, 184, 32, 221, 209, 163, 193, 63, 148, 9, 205, 178, 36, 185, 74, 145, 137, 127, 210, 213, 241, 32, 162, 52, 194, 31, 218, 151, 133, 202, 194, 28, 27, 244, 72, 39, 106, 151, 224, 61, 121, 163, 234, 185, 67, 254, 121, 179, 47, 203, 45, 52, 198, 114, 171, 166, 188, 183, 68, 198, 116, 28, 216, 111, 55, 34, 227, 132, 145, 128, 168, 157, 34, 128, 104, 207, 4, 164, 231, 250, 82, 53, 92, 29, 158, 133, 23, 81, 38, 38, 78, 178, 156, 232, 13, 234, 56, 244, 98, 239, 157, 17, 241, 240, 98, 79, 121, 153, 241, 132, 177, 16, 231, 105, 198, 139, 174, 42, 236, 47, 115, 186, 181, 8, 92, 31, 186, 241, 156, 120, 83, 225, 111, 1, 81, 0, 231, 65, 245, 151, 178, 231, 111, 106, 25, 169, 239, 106, 15, 57, 104, 69, 248, 35, 57, 177, 170, 102, 47, 52, 167, 119, 236, 174, 171, 11, 187, 192, 43, 174, 161, 219, 53, 82, 220, 175, 91, 91, 80, 1, 33, 128, 247, 44, 192, 142, 233, 191, 80, 99, 202, 154, 155, 53, 38, 28, 93, 140, 75, 54, 83, 121, 106, 248, 145, 170, 63, 214, 9, 84, 48, 72, 112, 203, 200, 95, 162, 68, 17, 6, 253, 6, 179, 125, 245, 196, 155, 31, 26, 47, 68, 29, 167, 127, 242, 120, 53, 244, 55, 147, 162, 131, 148, 75, 41, 204, 243, 203, 254, 100, 27, 50, 167, 180, 36, 244, 148, 232, 183, 215, 64, 78, 15, 20, 106, 143, 36, 96, 119, 148, 198, 133, 121, 227, 172, 146, 62, 186, 91, 158, 159, 23, 59, 178, 40, 207, 170, 135, 86, 141, 139, 65, 28, 117, 145, 188, 172, 85, 55, 5, 168, 48, 34, 52, 81, 49, 245, 95, 35, 69, 166, 65, 199, 169, 56, 83, 50, 163, 22, 23, 243, 192, 197, 100, 94, 95, 92, 155, 169, 197, 156, 44, 210, 94, 110, 121, 3, 0, 161, 219, 24, 113, 215, 114, 159, 178, 142, 131, 214, 36, 245, 116, 172, 162, 231, 153, 24, 48, 99, 209, 248, 93, 63, 249, 249, 131, 73, 209, 224, 98, 134, 249, 119, 42, 190, 118, 130, 205, 3, 13, 250, 112, 81, 67, 14, 231, 39, 215, 154, 149, 43, 127, 115, 201, 96, 64, 189, 127, 233, 29, 5, 0, 54, 8, 10, 138, 247, 19, 113, 114, 9, 102, 72, 43, 50, 198, 250, 186, 51, 197, 30, 127, 141, 4, 92, 23, 216, 207, 75, 187, 214, 27, 123, 130, 240, 100, 30, 121, 25, 76, 176, 98, 88, 103, 81, 62, 222, 102, 225, 163, 35, 13, 106, 222, 122, 17, 235, 123, 248, 107, 16, 195, 167, 129, 55, 82, 218, 69, 177, 174, 55, 176, 144, 227, 202, 12, 145, 148, 92, 119, 221, 209, 144, 240, 67, 50, 202, 75, 130, 155, 149, 243, 133, 14, 91, 174, 234, 41, 124, 12, 24, 58, 252, 208, 235, 193, 58, 113, 147, 36, 220, 70, 21, 10, 91, 230, 237, 86, 144, 24, 71, 43, 188, 141, 81, 104, 51, 101, 2, 11, 104, 219, 170, 2, 187, 163, 215, 51, 129, 189, 33, 80, 52, 173, 165, 32, 56, 97, 183, 182, 20, 101, 215, 128, 132, 22, 74, 38, 91, 197, 67, 19, 161, 229, 46, 174, 148, 215, 101, 42, 182, 37, 150, 115, 181, 133, 141, 184, 196, 37, 5, 188, 137, 57, 42, 232, 105, 53, 212, 77, 190, 171, 94, 30, 185, 51, 1, 24, 53, 125, 37, 125, 98, 133, 173, 2, 131, 210, 145, 3, 62, 31, 69, 94, 32, 40, 180, 226, 172, 53, 188, 107, 151, 217, 73, 13, 253, 81, 246, 112, 247, 235, 110, 40, 73, 174, 63, 72, 53, 144, 193, 19, 12, 127, 147, 95, 178, 102, 101, 72, 15, 144, 151, 154, 197, 98, 229, 194, 25, 127, 146, 248, 84, 144, 163, 180, 224, 27, 57, 67, 233, 60, 228, 236, 91, 231, 243, 61, 31, 24, 174, 14, 207, 118, 114, 96, 159, 254, 114, 4, 61, 174, 216, 195, 159, 131, 250, 237, 18, 17, 179, 139, 104, 191, 29, 252, 211, 36, 76, 86, 170, 91, 196, 205, 13, 85, 208, 121, 11, 109, 105, 109, 102, 129, 101, 75, 147, 233, 172, 184, 250, 143, 225, 16, 166, 242, 63, 152, 76, 206, 148, 157, 19, 47, 80, 149, 104, 185, 225, 110, 132, 37, 247, 25, 192, 73, 177, 208, 165, 165, 150, 188, 67, 170, 185, 121, 7, 224, 168, 118, 203, 86, 128, 117, 52, 128, 136, 189, 229, 193, 244, 83, 54, 4, 59, 161, 138, 220, 164, 104, 39, 22, 101, 160, 195, 129, 108, 228, 60, 106, 158, 251, 149, 60, 155, 251, 234, 144, 121, 121, 216, 233, 4, 70, 149, 90, 120, 213, 1, 52, 77, 31, 169, 80, 183, 13], "dtype": "uint8"}], "outputs": [{"out_buffer": [83, 245, 128, 115, 208, 85, 59, 104, 138, 89, 233, 72, 63, 51, 222, 39, 188, 76, 177, 101, 4, 173, 93, 36, 60, 137, 130, 116, 152, 130, 26, 39, 246, 91, 139, 147, 44, 33, 94, 96, 234, 174, 166, 90, 13, 41, 153, 157, 219, 72, 250, 143, 168, 197, 212, 179, 185, 195, 180, 27, 39, 66, 123, 241, 167, 101, 77, 9, 115, 50, 51, 186, 197, 198, 214, 157, 62, 189, 183, 133, 25, 130, 81, 53, 216, 181, 21, 48, 168, 87, 154, 120, 81, 55, 32, 133, 167, 161, 148, 110, 174, 116, 114, 155, 90, 25, 12, 19, 230, 189, 246, 41, 178, 148, 208, 237, 183, 103, 160, 169, 246, 228, 177, 233, 107, 104, 17, 90, 140, 247, 210, 250, 47, 236, 186, 161, 12, 109, 217, 42, 58, 225, 247, 10, 1, 184, 202, 56, 176, 248, 17, 220, 80, 226, 70, 33, 63, 246, 65, 33, 173, 68, 121, 5, 156, 159, 193, 134, 39, 88, 106, 51, 78, 131, 247, 50, 12, 125, 220, 137, 226, 252, 193, 122, 108, 61, 47, 56, 108, 243, 52, 82, 113, 196, 184, 225, 88, 158, 132, 71, 223, 34, 46, 92, 62, 192, 107, 246, 50, 77, 219, 70, 181, 110, 118, 128, 45, 42, 14, 223, 93, 203, 61, 224, 37, 104, 122, 53, 61, 227, 228, 11, 183, 216, 149, 104, 31, 194, 134, 92, 21, 70, 188, 1, 134, 76, 208, 52, 210, 203, 57, 141, 84, 89, 67, 72, 187, 57, 139, 227, 39, 144, 200, 221, 28, 123, 110, 127, 87, 98, 221, 127, 151, 48, 251, 91, 24, 5, 173, 202, 163, 226, 97, 122, 232, 174, 217, 217, 177, 77, 99, 23, 242, 21, 199, 11, 157, 16, 98, 238, 14, 15, 157, 176, 134, 102, 14, 123, 78, 239, 24, 150, 57, 116, 81, 213, 19, 208, 140, 69, 74, 247, 163, 224, 69, 14, 99, 135, 172, 30, 144, 254, 174, 255, 24, 190, 10, 104, 77, 24, 144, 149, 230, 86, 16, 149, 240, 198, 151, 186, 7, 220, 198, 78, 85, 153, 208, 203, 88, 136, 19, 81, 84, 244, 68, 63, 212, 81, 94, 36, 202, 173, 35, 80, 164, 164, 175, 254, 222, 127, 8, 211, 63, 113, 22, 64, 175, 156, 53, 101, 100, 202, 217, 227, 162, 115, 180, 201, 172, 134, 149, 7, 110, 85, 192, 41, 246, 171, 207, 183, 143, 52, 55, 160, 93, 187, 238, 249, 2, 249, 76, 130, 10, 59, 100, 224, 229, 208, 187, 226, 88, 128, 13, 135, 202, 11, 200, 108, 93, 124, 107, 180, 214, 51, 12, 52, 1, 155, 228, 205, 88, 75, 219, 11, 107, 23, 72, 40, 191, 177, 240, 235, 149, 112, 219, 159, 136, 107, 57, 122, 134, 28, 83, 109, 193, 69, 164, 97, 96, 232, 196, 77, 215, 48, 85, 120, 169, 114, 116, 190, 227, 138, 110, 67, 83, 170, 200, 250, 87, 207, 221, 203, 174, 206, 10, 160, 220, 186, 89, 190, 56, 86, 199, 172, 205, 92, 233, 232, 12, 63, 58, 155, 161, 160, 163, 100, 86, 58, 99, 211, 45, 161, 145, 134, 252, 255, 94, 36, 231, 142, 40, 141, 96, 77, 113, 124, 41, 219, 10, 139, 83, 93, 24, 102, 231, 207, 156, 46, 7, 162, 192, 6, 6, 124, 182, 46, 31, 157, 121, 6, 136, 213, 65, 137, 125, 50, 252, 242, 5, 143, 174, 188, 241, 24, 216, 40, 101, 106, 212, 128, 140, 54, 159, 191, 66, 128, 22, 226, 250, 255, 201, 247, 245, 117, 8, 236, 142, 141, 246, 153, 183, 212, 205, 57, 5, 69, 204, 58, 225, 128, 114, 251, 163, 232, 39, 48, 180, 68, 41, 228, 132, 125, 15, 155, 225, 134, 230, 179, 79, 157, 167, 152, 174, 193, 33, 153, 30, 92, 220, 242, 149, 33, 133, 238, 20, 132, 7, 148, 239, 60, 88, 126, 200, 173, 37, 186, 78, 81, 200, 79, 111, 28, 53, 243, 110, 107, 163, 136, 34, 46, 111, 15, 188, 205, 53, 180, 125, 100, 106, 12, 122, 241, 164, 81, 21, 214, 131, 243, 231, 197, 3, 47, 20, 62, 197, 142, 108, 219, 35, 185, 234, 245, 164, 25, 18, 169, 111, 231, 184, 212, 67, 114, 174, 151, 204, 154, 253, 244, 151, 36, 85, 253, 68, 92, 40, 204, 126, 66, 222, 175, 203, 82, 90, 223, 199, 158, 72, 73, 235, 154, 40, 127, 123, 233, 181, 217, 164, 58, 188, 236, 94, 26, 209, 81, 107, 40, 154, 213, 73, 218, 105, 140, 74, 122, 114, 71, 59, 218, 250, 67, 118, 198, 213, 23, 150, 202, 43, 178, 65, 84, 161, 225, 70, 204, 254, 231, 202, 130, 218, 130, 157, 122, 82, 253, 124, 45, 110, 252, 193, 224, 186, 161, 223, 215, 75, 29, 83, 202, 67, 148, 104, 38, 182, 242, 2, 174, 9, 143, 8, 20, 145, 215, 182, 81, 192, 183, 202, 111, 62, 236, 243, 128, 108, 160, 77, 153, 154, 183, 240, 111, 104, 101, 58, 157, 26, 61, 230, 128, 109, 7, 171, 111, 92, 75, 31, 228, 198, 188, 22, 195, 27, 19, 164, 24, 12, 194, 224, 231, 81, 241, 48, 137, 141, 159, 96, 1, 141, 251, 194, 81, 39, 60, 96, 124, 5, 18, 237, 238, 76, 116, 151, 64, 226, 3, 44, 219, 179, 169, 85, 164, 59, 50, 242, 170, 47, 134, 244, 146, 150, 146, 153, 126, 154, 180, 108, 22, 83, 71, 5, 112, 30, 239, 89, 13, 192, 103, 179, 49, 107, 98, 236, 208, 175, 106, 151, 70, 30, 145, 123, 218, 8, 230, 63, 182, 78, 47, 90, 90, 105, 67, 188, 85, 70, 134, 248, 31, 87, 137, 52, 169, 127, 138, 203, 127, 119, 66, 26, 62, 11, 172, 201, 251, 196, 94, 117, 35, 91, 151, 216, 233, 154, 95, 60, 126, 147, 27, 195, 149, 97, 4, 106, 195, 100, 4, 21, 111, 134, 134, 39, 22, 251, 185, 106, 165, 135, 42, 254, 203, 178, 224, 86, 175, 72, 242], "dtype": "uint8"}]}}
{"kernel_name": "l1_norm_bfloat16", "prompt": "/*\nThis AIE kernel computes the L1 norm (sum of absolute values) of a bfloat16 input vector of length 256. The result is placed in the output buffer (bfloat16).\n>>> l1_norm_bfloat16([5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125])\n[28.125]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 256\nout_buffer size: 1\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid l1_norm_bfloat16(bfloat16 *in_buffer, bfloat16 *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t N = 256;\n    bfloat16 sum = 0;\n    for (int i = 0; i < N; ++i) {\n        bfloat16 val = in_buffer[i];\n        sum += (val >= 0.0f) ? val : -val;\n    }\n    *out_buffer = sum;\n}", "program_code": "extern \"C\" {\n    void l1_norm_bfloat16_wrapper(bfloat16 *in_buffer, bfloat16 *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        l1_norm_bfloat16(in_buffer, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125, -0.310546875, 1.234375, 0.431640625, 4.375, 2.28125, 0.365234375, 1.328125, 1.0, 4.46875, -0.6171875, 0.9375, -2.5625, -7.65625, 1.9609375, 2.59375, -2.21875, 6.8125, -4.375, 0.1376953125, -0.5625, 4.59375, 4.40625, 0.46484375, 1.1328125, -2.65625, -5.9375, -1.046875, 0.46875, 3.6875, 3.609375, -1.1640625, -0.90625, -3.140625, -4.25, -5.125, 5.84375, -1.53125, -1.3125, -3.765625, 2.328125, -4.84375, -0.63671875, -2.6875, 1.1640625, -1.53125, -3.546875, -0.08447265625, 1.28125, 0.19921875, 0.90625, -1.90625, -1.0859375, -2.015625, -1.078125, -2.4375, -5.1875, 0.53125, -1.203125, -4.875, 1.390625, -2.71875, 0.15625, 2.1875, 0.38671875, 3.421875, -3.703125, 1.203125, -2.046875, -2.609375, -1.734375, -0.93359375, 0.1689453125, -3.5, 2.703125, 1.3984375, -4.59375, 4.46875, 5.6875, 3.53125, -0.5390625, -3.21875, 3.15625, -1.2109375, 3.671875, 0.625, 2.9375, 1.0703125, 2.125, 0.031494140625, 5.34375, 0.380859375, 1.203125, 5.65625, -4.03125, -3.8125, 2.90625, -3.515625, 5.84375, -1.2421875, -2.25, 5.78125, 4.4375, 5.59375, 2.71875, -2.578125, 5.71875, -0.8046875, 2.40625, 2.84375, -0.46484375, 1.84375, 2.765625, 1.1328125, -3.296875, 0.89453125, 3.984375, -2.078125, -0.44921875, -1.3046875, 5.5625, 2.015625, 1.21875, -2.3125, 1.6171875, -2.015625, 0.095703125, -1.90625, 2.03125, 1.7265625, -0.625, 1.1875, -3.28125, -4.46875, 1.3203125, 0.5, 1.90625, 7.15625, 2.828125, -2.734375, 3.34375, -3.953125, -1.3828125, -0.205078125, 5.125, -2.234375, -2.484375, -0.294921875, -1.9921875, 3.375, -3.234375, -3.4375, -1.3125, -1.4921875, 5.78125, 2.84375, 0.26171875, -3.671875, 2.53125, -3.0, -4.625, 3.5625, 0.94921875, 2.765625, 0.95703125, 2.578125, -1.953125, -3.109375, 2.046875, -2.40625, -2.0625, -1.3671875, 0.052490234375, -1.0625, -4.125, -1.9296875, -6.65625, 1.875, -4.8125, -3.3125, 0.15625, -2.21875, 4.625, -3.875, 0.80078125, -0.11767578125, -3.5, 1.5703125, -0.515625, 2.3125, 2.46875, 6.5, 4.0, -1.109375, -0.71875, 3.296875, 1.96875, 1.921875, -4.84375, -0.07275390625, -2.21875, 0.83984375, -0.294921875, 2.734375, 0.953125, 2.359375, -1.3984375, -2.828125, -1.2265625, -0.051025390625, 1.140625, 6.78125, -0.126953125, -2.875, -1.0390625, -1.390625, 1.4453125, -4.625, 0.189453125, 0.46875, 0.6953125, -1.7890625, -0.71484375, -4.28125, -1.4765625, -1.625, 1.25, -3.46875, 2.34375, 4.46875, -6.21875, 1.28125, 2.03125, -1.9140625, -1.1953125, -0.3984375, -0.89453125, -0.92578125, -5.03125, 3.453125, 3.234375, -2.4375, -4.40625, 1.5625, -1.7265625, 0.42578125, -0.95703125, 2.078125, 2.078125], "dtype": "bfloat16"}], "outputs": [{"out_buffer": [604.0], "dtype": "bfloat16"}]}}
{"kernel_name": "leaky_relu_bfloat16", "prompt": "/*\nThis AIE kernel performs a Leaky ReLU activation with an alpha value of 0.01 on a bfloat16 input vector of size num_elements.\n>>> leaky_relu_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875])\n[1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.009765625, 0.94921875, -0.00151824951171875]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 256\nout_buffer size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid leaky_relu_bfloat16(bfloat16 *in_buffer, bfloat16 *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t num_elements = 256;\n    bfloat16 zero_value = 0.0f;\n    bfloat16 alpha_value = 0.01f;\n\n    for (uint32_t i = 0; i < num_elements; ++i) {\n        bfloat16 input_value = *in_buffer;\n        in_buffer++;\n\n        bfloat16 relu_out = input_value > zero_value ? input_value : zero_value;\n        bfloat16 leaky_out = input_value < zero_value ? input_value * alpha_value : input_value;\n        bfloat16 output_value = input_value < zero_value ? leaky_out : relu_out;\n\n        *out_buffer = output_value;\n        out_buffer++;\n    }\n}", "program_code": "extern \"C\" {\n    void leaky_relu_bfloat16_wrapper(bfloat16 *in_buffer, bfloat16 *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        leaky_relu_bfloat16(in_buffer, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625, 0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625, 0.671875, 0.408203125, -0.76953125, 0.5390625, -0.67578125, 0.03173828125, -0.63671875, 0.67578125, 0.578125, -0.2080078125, 0.396484375, -1.09375, -1.4921875, 0.439453125, 0.1669921875, 0.63671875, 2.390625, 0.9453125, -0.9140625, 1.1171875, -1.3125, -0.4609375, -0.068359375, 1.7109375, -0.74609375, -0.828125, -0.0986328125, -0.6640625, 1.125, -1.078125, -1.1484375, -0.4375, -0.498046875, 1.9296875, 0.94921875, 0.08740234375, -1.2265625, 0.84375, -1.0, -1.546875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.65234375, -1.03125, 0.6796875, -0.8046875, -0.69140625, -0.455078125, 0.0174560546875, -0.353515625, -1.375, -0.64453125, -2.21875, 0.625, -1.6015625, -1.1015625, 0.05224609375, -0.73828125, 1.546875, -1.2890625, 0.267578125, -0.039306640625, -1.171875, 0.5234375, -0.171875, 0.7734375, 0.82421875, 2.15625, 1.3359375, -0.369140625, -0.2392578125, 1.1015625, 0.65625, 0.640625, -1.6171875, -0.0242919921875, -0.73828125, 0.279296875, -0.09814453125, 0.91015625, 0.31640625, 0.78515625, -0.466796875, -0.9453125, -0.41015625, -0.0169677734375, 0.37890625, 2.265625, -0.042236328125, -0.95703125, -0.345703125, -0.462890625, 0.482421875, -1.5390625, 0.0634765625, 0.15625, 0.232421875, -0.59765625, -0.23828125, -1.421875, -0.494140625, -0.54296875, 0.416015625, -1.15625, 0.78125, 1.4921875, -2.0625, 0.42578125, 0.67578125, -0.63671875, -0.396484375, -0.1328125, -0.296875, -0.30859375, -1.6796875, 1.1484375, 1.078125, -0.8125, -1.46875, 0.51953125, -0.57421875, 0.1416015625, -0.318359375, 0.69140625, 0.6953125], "dtype": "bfloat16"}], "outputs": [{"out_buffer": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.009765625, 0.94921875, -0.00151824951171875, -0.00102996826171875, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.0020599365234375, 0.3125, -0.008544921875, -0.0255126953125, 0.65234375, 0.86328125, -0.007415771484375, 2.265625, -0.0145263671875, 0.045654296875, -0.0018768310546875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.00885009765625, -0.0198974609375, -0.00347900390625, 0.15625, 1.2265625, 1.203125, -0.003875732421875, -0.0030364990234375, -0.010498046875, -0.01422119140625, -0.01708984375, 1.953125, -0.005096435546875, -0.00439453125, -0.01251220703125, 0.77734375, -0.0162353515625, -0.00213623046875, -0.00897216796875, 0.38671875, -0.005126953125, -0.01177978515625, -0.00028228759765625, 0.427734375, 0.06640625, 0.302734375, -0.00634765625, -0.003631591796875, -0.0067138671875, -0.00360107421875, -0.00811767578125, -0.017333984375, 0.177734375, -0.0040283203125, -0.016357421875, 0.462890625, -0.00909423828125, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -0.0123291015625, 0.40234375, -0.0068359375, -0.00872802734375, -0.00579833984375, -0.0031280517578125, 0.05615234375, -0.01165771484375, 0.90234375, 0.46484375, -0.015380859375, 1.484375, 1.8984375, 1.1796875, -0.001800537109375, -0.0107421875, 1.0546875, -0.0040283203125, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -0.0135498046875, -0.01275634765625, 0.96875, -0.01171875, 1.9453125, -0.004150390625, -0.007476806640625, 1.921875, 1.484375, 1.8671875, 0.90625, -0.00860595703125, 1.90625, -0.002685546875, 0.80078125, 0.9453125, -0.001556396484375, 0.61328125, 0.921875, 0.376953125, -0.01104736328125, 0.298828125, 1.328125, -0.0069580078125, -0.001495361328125, -0.004364013671875, 1.8515625, 0.671875, 0.408203125, -0.0076904296875, 0.5390625, -0.00677490234375, 0.03173828125, -0.006378173828125, 0.67578125, 0.578125, -0.0020751953125, 0.396484375, -0.01092529296875, -0.01495361328125, 0.439453125, 0.1669921875, 0.63671875, 2.390625, 0.9453125, -0.0091552734375, 1.1171875, -0.01312255859375, -0.004608154296875, -0.000682830810546875, 1.7109375, -0.007476806640625, -0.00830078125, -0.00098419189453125, -0.00665283203125, 1.125, -0.01080322265625, -0.011474609375, -0.00439453125, -0.004974365234375, 1.9296875, 0.94921875, 0.08740234375, -0.01226806640625, 0.84375, -0.010009765625, -0.0155029296875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.00653076171875, -0.01031494140625, 0.6796875, -0.008056640625, -0.006927490234375, -0.004547119140625, 0.0174560546875, -0.0035400390625, -0.0137939453125, -0.006439208984375, -0.022216796875, 0.625, -0.0159912109375, -0.01104736328125, 0.05224609375, -0.00738525390625, 1.546875, -0.01287841796875, 0.267578125, -0.000392913818359375, -0.01171875, 0.5234375, -0.0017242431640625, 0.7734375, 0.82421875, 2.15625, 1.3359375, -0.003692626953125, -0.0023956298828125, 1.1015625, 0.65625, 0.640625, -0.0162353515625, -0.00024318695068359375, -0.00738525390625, 0.279296875, -0.00098419189453125, 0.91015625, 0.31640625, 0.78515625, -0.004669189453125, -0.00946044921875, -0.004119873046875, -0.0001697540283203125, 0.37890625, 2.265625, -0.000423431396484375, -0.00958251953125, -0.0034637451171875, -0.004638671875, 0.482421875, -0.015380859375, 0.0634765625, 0.15625, 0.232421875, -0.0059814453125, -0.00238037109375, -0.01422119140625, -0.00494384765625, -0.00543212890625, 0.416015625, -0.0115966796875, 0.78125, 1.4921875, -0.0206298828125, 0.42578125, 0.67578125, -0.006378173828125, -0.00396728515625, -0.0013275146484375, -0.0029754638671875, -0.003082275390625, -0.016845703125, 1.1484375, 1.078125, -0.00811767578125, -0.01470947265625, 0.51953125, -0.0057373046875, 0.1416015625, -0.0031890869140625, 0.69140625, 0.6953125], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "log10_bfloat16", "prompt": "/*\nThis AIE kernel computes the base-10 logarithm (log10) elementwise for a bfloat16 input vector; negative and zero inputs should return -infinity.\n>>> log10_bfloat16([55.0, 71.5, 60.25, 54.5, 42.25, 64.5, 43.75, 89.0])\n[1.7421875, 1.8515625, 1.78125, 1.734375, 1.625, 1.8125, 1.640625, 1.953125]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid log10_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n    static const float LUT[17] = {\n        0.00000000f, 0.02632894f, 0.05115252f, 0.07463362f,\n        0.09691001f, 0.11809931f, 0.13830270f, 0.15760785f,\n        0.17609126f, 0.19382003f, 0.21085337f, 0.22724378f,\n        0.24303805f, 0.25827802f, 0.27300127f, 0.28724171f,\n        0.30103000f\n    };\n\n    union { uint32_t u; float f; } uinf{ .u = 0xFF800000u };\n\n    for (int i = 0; i < N; ++i) {\n        union { uint32_t u; float f; } fu{ .f = float(input[i]) };\n        float x = fu.f;\n\n        if (x <= 0.0f) {\n            output[i] = bfloat16(uinf.f);\n            continue;\n        }\n\n        int E = int((fu.u >> 23) & 0xFF) - 127;\n        fu.u = (fu.u & 0x7FFFFFu) | 0x3F800000u;\n        float m = fu.f - 1.0f;\n\n        float t = m * 16.0f;\n        int idx = int(t);\n        if (idx >= 16) idx = 15;\n        float frac = t - float(idx);\n\n        float y_m = LUT[idx] + frac * (LUT[idx+1] - LUT[idx]);\n\n        constexpr float LOG10_2 = 0.30102999566f;\n        float y = float(E) * LOG10_2 + y_m;\n\n        output[i] = bfloat16(y);\n    }\n}", "program_code": "extern \"C\" {\n    void log10_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        log10_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [55.0, 71.5, 60.25, 54.5, 42.25, 64.5, 43.75, 89.0, 96.5, 38.25, 79.0, 53.0, 56.75, 92.5, 7.09375, 8.6875, 2.015625, 83.5, 78.0, 87.0, 98.0, 80.0, 46.25, 78.0, 11.8125, 64.0, 14.3125, 94.5, 52.25, 41.5, 26.5, 77.5, 45.5, 56.75, 1.8828125, 61.75, 61.25, 61.75, 94.5, 68.0, 36.0, 43.75, 70.0, 6.03125, 66.5, 67.0, 21.0, 12.875, 31.5, 36.25, 57.0, 43.75, 99.0, 10.1875, 20.875, 16.125, 65.5, 25.375, 46.75, 24.5, 15.875, 11.0625, 65.5, 13.8125, 19.625, 36.75, 82.0, 9.6875, 84.0, 9.625, 97.5, 46.75, 97.5, 60.5, 74.0, 3.921875, 28.25, 12.0, 29.625, 11.875, 31.75, 41.5, 6.40625, 69.0, 56.75, 26.5, 52.25, 9.375, 57.5, 93.0, 31.875, 66.5, 13.1875, 71.5, 29.0, 18.375, 58.75, 2.015625, 83.0, 0.470703125, 68.0, 27.0, 73.5, 96.0, 24.875, 57.5, 59.25, 57.25, 22.25, 95.5, 44.75, 84.5, 70.0, 29.75, 81.5, 39.75, 88.0, 58.25, 88.0, 69.5, 72.5, 50.25, 95.5, 64.5, 42.5, 60.75, 1.921875, 30.125, 66.0, 29.0, 61.75, 43.0, 13.5625, 29.875, 57.0, 59.0, 57.5, 65.5, 65.0, 43.25, 89.5, 36.75, 43.5, 89.0, 80.5, 70.5, 10.0, 92.0, 71.5, 100.0, 14.9375, 87.0, 16.25, 61.5, 12.375, 85.0, 80.5, 57.0, 40.75, 6.90625, 69.5, 45.25, 72.0, 86.5, 97.5, 85.5, 1.171875, 36.0, 73.0, 17.125, 52.0, 5.4375, 20.0, 1.8515625, 79.5, 22.375, 34.5, 93.0, 70.5, 3.1875, 16.5, 62.25, 57.75, 23.75, 93.5, 61.5, 53.5, 59.0, 73.0, 31.25, 39.75, 21.0, 18.625, 94.5, 74.0, 49.0, 22.75, 25.375, 5.8125, 43.5, 31.125, 69.5, 37.75, 18.0, 2.46875, 6.71875, 68.0, 45.25, 53.75, 89.5, 99.0, 21.75, 66.5, 26.375, 2.0625, 76.0, 32.0, 38.25, 58.75, 83.0, 63.0, 87.5, 27.375, 80.0, 18.625, 95.5, 68.5, 21.5, 94.5, 73.0, 25.375, 21.375, 51.75, 2.5625, 20.75, 42.5, 37.5, 46.25, 27.75, 58.75, 86.5, 11.75, 51.75, 13.1875, 71.5, 39.5, 56.5, 18.375, 14.5, 48.75, 35.5, 94.0, 76.5, 75.0, 90.5, 8.3125], "dtype": "bfloat16"}], "outputs": [{"output": [1.7421875, 1.8515625, 1.78125, 1.734375, 1.625, 1.8125, 1.640625, 1.953125, 1.984375, 1.5859375, 1.8984375, 1.7265625, 1.7578125, 1.96875, 0.8515625, 0.9375, 0.3046875, 1.921875, 1.890625, 1.9375, 1.9921875, 1.90625, 1.6640625, 1.890625, 1.0703125, 1.8046875, 1.15625, 1.9765625, 1.71875, 1.6171875, 1.421875, 1.890625, 1.65625, 1.7578125, 0.275390625, 1.7890625, 1.7890625, 1.7890625, 1.9765625, 1.8359375, 1.5546875, 1.640625, 1.84375, 0.78125, 1.8203125, 1.828125, 1.3203125, 1.109375, 1.5, 1.5625, 1.7578125, 1.640625, 1.9921875, 1.0078125, 1.3203125, 1.2109375, 1.8125, 1.40625, 1.671875, 1.390625, 1.203125, 1.046875, 1.8125, 1.140625, 1.2890625, 1.5625, 1.9140625, 0.984375, 1.921875, 0.984375, 1.9921875, 1.671875, 1.9921875, 1.78125, 1.8671875, 0.59375, 1.453125, 1.078125, 1.46875, 1.078125, 1.5, 1.6171875, 0.8046875, 1.8359375, 1.7578125, 1.421875, 1.71875, 0.97265625, 1.7578125, 1.96875, 1.5, 1.8203125, 1.1171875, 1.8515625, 1.4609375, 1.265625, 1.765625, 0.3046875, 1.921875, -0.328125, 1.8359375, 1.4296875, 1.8671875, 1.984375, 1.3984375, 1.7578125, 1.7734375, 1.7578125, 1.34375, 1.9765625, 1.6484375, 1.9296875, 1.84375, 1.4765625, 1.9140625, 1.6015625, 1.9453125, 1.765625, 1.9453125, 1.84375, 1.859375, 1.703125, 1.9765625, 1.8125, 1.625, 1.78125, 0.283203125, 1.4765625, 1.8203125, 1.4609375, 1.7890625, 1.6328125, 1.1328125, 1.4765625, 1.7578125, 1.7734375, 1.7578125, 1.8125, 1.8125, 1.6328125, 1.953125, 1.5625, 1.640625, 1.953125, 1.90625, 1.8515625, 1.0, 1.9609375, 1.8515625, 2.0, 1.171875, 1.9375, 1.2109375, 1.7890625, 1.09375, 1.9296875, 1.90625, 1.7578125, 1.609375, 0.83984375, 1.84375, 1.65625, 1.859375, 1.9375, 1.9921875, 1.9296875, 0.06884765625, 1.5546875, 1.8671875, 1.234375, 1.71875, 0.734375, 1.3046875, 0.267578125, 1.8984375, 1.3515625, 1.5390625, 1.96875, 1.8515625, 0.50390625, 1.21875, 1.796875, 1.7578125, 1.375, 1.96875, 1.7890625, 1.7265625, 1.7734375, 1.8671875, 1.4921875, 1.6015625, 1.3203125, 1.2734375, 1.9765625, 1.8671875, 1.6875, 1.359375, 1.40625, 0.765625, 1.640625, 1.4921875, 1.84375, 1.578125, 1.2578125, 0.392578125, 0.828125, 1.8359375, 1.65625, 1.7265625, 1.953125, 1.9921875, 1.3359375, 1.8203125, 1.421875, 0.314453125, 1.8828125, 1.5078125, 1.5859375, 1.765625, 1.921875, 1.796875, 1.9453125, 1.4375, 1.90625, 1.2734375, 1.9765625, 1.8359375, 1.3359375, 1.9765625, 1.8671875, 1.40625, 1.328125, 1.7109375, 0.408203125, 1.3203125, 1.625, 1.5703125, 1.6640625, 1.4453125, 1.765625, 1.9375, 1.0703125, 1.7109375, 1.1171875, 1.8515625, 1.59375, 1.75, 1.265625, 1.1640625, 1.6875, 1.546875, 1.9765625, 1.8828125, 1.875, 1.953125, 0.91796875], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.02, "rtol": 0.02}}
{"kernel_name": "log2_bfloat16", "prompt": "/*\nThis AIE kernel computes the base-2 logarithm (log2) of each element in an input bfloat16 vector of size 256 and writes the result to the output vector. For zero or negative inputs, it should return -inf.\n>>> log2_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, 0.9765625, 0.94921875, 0.15234375])\n[0.8203125, -1.3203125, -0.0284423828125, 1.15625, 0.90234375, -0.0341796875, -0.0751953125, -2.71875]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid log2_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n    static const float LUT[17] = {\n        0.0f, 0.08746284f, 0.16992500f, 0.24792751f,\n        0.32192809f, 0.39231742f, 0.45943162f, 0.52356196f,\n        0.58496250f, 0.64385619f, 0.70043972f, 0.75488750f,\n        0.80735492f, 0.85798100f, 0.90689060f, 0.95419631f,\n        1.0f\n    };\n\n    union { uint32_t u; float f; } uinf{ .u = 0xFF800000u };\n\n    for (int i = 0; i < N; ++i) {\n        union { uint32_t u; float f; } fu{ .f = float(input[i]) };\n        float x = fu.f;\n        if (x <= 0.0f) {\n            output[i] = bfloat16(uinf.f);\n            continue;\n        }\n        int E = int((fu.u >> 23) & 0xFF) - 127;\n        fu.u = (fu.u & 0x7FFFFFu) | 0x3F800000u;\n        float m = fu.f - 1.0f;\n        float t = m * 16.0f;\n        int idx = int(t);\n        if (idx >= 16) idx = 15;\n        float frac = t - float(idx);\n        float y_m = LUT[idx] + frac * (LUT[idx+1] - LUT[idx]);\n        float y = float(E) + y_m;\n        output[i] = bfloat16(y);\n    }\n}", "program_code": "extern \"C\" {\n    void log2_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        log2_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, 0.9765625, 0.94921875, 0.15234375, 0.10400390625, 0.412109375, 0.1455078125, 1.453125, 0.76171875, 0.12255859375, 0.4453125, 0.333984375, 1.4921875, 0.2060546875, 0.314453125, 0.85546875, 2.546875, 0.65625, 0.8671875, 0.7421875, 2.265625, 1.453125, 0.046875, 0.1884765625, 1.53125, 1.46875, 0.15625, 0.37890625, 0.890625, 1.984375, 0.349609375, 0.1572265625, 1.234375, 1.203125, 0.388671875, 0.302734375, 1.046875, 1.421875, 1.7109375, 1.953125, 0.51171875, 0.439453125, 1.25, 0.77734375, 1.6171875, 0.2138671875, 0.89453125, 0.388671875, 0.51171875, 1.1796875, 0.0291748046875, 0.4296875, 0.0673828125, 0.302734375, 0.63671875, 0.36328125, 0.671875, 0.361328125, 0.8125, 1.7265625, 0.1787109375, 0.40234375, 1.6328125, 0.462890625, 0.91015625, 0.052978515625, 0.73046875, 0.1298828125, 1.140625, 1.234375, 0.404296875, 0.6875, 0.87109375, 0.578125, 0.3125, 0.05712890625, 1.1640625, 0.90234375, 0.466796875, 1.5390625, 1.4921875, 1.8984375, 1.1796875, 0.1806640625, 1.0703125, 1.0546875, 0.404296875, 1.2265625, 0.208984375, 0.9765625, 0.357421875, 0.70703125, 0.011474609375, 1.7890625, 0.1279296875, 0.40234375, 1.8828125, 1.3515625, 1.2734375, 0.96875, 1.171875, 1.9453125, 0.4140625, 0.75, 1.921875, 1.484375, 1.8671875, 0.90625, 0.86328125, 1.9140625, 0.26953125, 0.8046875, 0.94921875, 0.15625, 0.61328125, 0.921875, 0.376953125, 1.1015625, 0.298828125, 1.328125, 0.6953125, 0.150390625, 0.435546875, 1.8515625, 0.671875, 0.408203125, 0.76953125, 0.5390625, 0.67578125, 0.03271484375, 0.63671875, 0.67578125, 0.578125, 0.208984375, 0.396484375, 1.09375, 1.4921875, 0.439453125, 0.16796875, 0.63671875, 2.390625, 0.9453125, 0.9140625, 1.1171875, 1.3203125, 0.462890625, 0.0693359375, 1.7109375, 0.74609375, 0.828125, 0.099609375, 0.6640625, 1.125, 1.078125, 1.1484375, 0.439453125, 0.5, 1.9296875, 0.94921875, 0.08837890625, 1.2265625, 0.84375, 1.0, 1.546875, 1.1875, 0.318359375, 0.921875, 0.3203125, 0.859375, 0.65234375, 1.0390625, 0.68359375, 0.8046875, 0.69140625, 0.45703125, 0.0184326171875, 0.35546875, 1.375, 0.64453125, 2.21875, 0.625, 1.6015625, 1.1015625, 0.05322265625, 0.7421875, 1.546875, 1.296875, 0.267578125, 0.040283203125, 1.171875, 0.5234375, 0.1728515625, 0.7734375, 0.82421875, 2.171875, 1.3359375, 0.37109375, 0.240234375, 1.1015625, 0.65625, 0.640625, 1.6171875, 0.0252685546875, 0.73828125, 0.28125, 0.09912109375, 0.91015625, 0.318359375, 0.7890625, 0.466796875, 0.9453125, 0.41015625, 0.01806640625, 0.380859375, 2.265625, 0.043212890625, 0.95703125, 0.34765625, 0.46484375, 0.482421875, 1.5390625, 0.064453125, 0.1572265625, 0.2333984375, 0.59765625, 0.2392578125, 1.421875, 0.494140625, 0.54296875, 0.41796875, 1.15625, 0.78125, 1.4921875, 2.078125, 0.427734375, 0.6796875, 0.63671875, 0.3984375, 0.1337890625, 0.298828125, 0.310546875, 1.6796875, 1.15625, 1.078125, 0.8125, 1.46875, 0.5234375, 0.578125, 0.142578125, 0.3203125, 0.69140625, 0.6953125], "dtype": "bfloat16"}], "outputs": [{"output": [0.8203125, -1.3203125, -0.0284423828125, 1.15625, 0.90234375, -0.0341796875, -0.0751953125, -2.71875, -3.265625, -1.28125, -2.78125, 0.5390625, -0.392578125, -3.03125, -1.1640625, -1.5859375, 0.578125, -2.28125, -1.671875, -0.2255859375, 1.3515625, -0.609375, -0.2060546875, -0.4296875, 1.1796875, 0.5390625, -4.40625, -2.40625, 0.61328125, 0.5546875, -2.671875, -1.3984375, -0.1669921875, 0.98828125, -1.515625, -2.671875, 0.3046875, 0.267578125, -1.3671875, -1.7265625, 0.06591796875, 0.5078125, 0.7734375, 0.96484375, -0.96484375, -1.1875, 0.322265625, -0.36328125, 0.6953125, -2.21875, -0.1611328125, -1.3671875, -0.96484375, 0.23828125, -5.09375, -1.21875, -3.890625, -1.7265625, -0.65234375, -1.4609375, -0.57421875, -1.46875, -0.298828125, 0.7890625, -2.484375, -1.3125, 0.70703125, -1.109375, -0.1357421875, -4.25, -0.453125, -2.9375, 0.189453125, 0.3046875, -1.3046875, -0.5390625, -0.19921875, -0.7890625, -1.6796875, -4.125, 0.21875, -0.1484375, -1.1015625, 0.62109375, 0.578125, 0.92578125, 0.23828125, -2.46875, 0.09814453125, 0.07666015625, -1.3046875, 0.294921875, -2.265625, -0.0341796875, -1.484375, -0.5, -6.4375, 0.83984375, -2.96875, -1.3125, 0.9140625, 0.435546875, 0.349609375, -0.0458984375, 0.228515625, 0.9609375, -1.2734375, -0.4140625, 0.94140625, 0.5703125, 0.90234375, -0.1416015625, -0.2119140625, 0.9375, -1.890625, -0.314453125, -0.0751953125, -2.671875, -0.70703125, -0.1171875, -1.40625, 0.1396484375, -1.7421875, 0.41015625, -0.5234375, -2.734375, -1.1953125, 0.890625, -0.57421875, -1.2890625, -0.37890625, -0.890625, -0.56640625, -4.9375, -0.65234375, -0.56640625, -0.7890625, -2.265625, -1.3359375, 0.12890625, 0.578125, -1.1875, -2.578125, -0.65234375, 1.2578125, -0.0810546875, -0.1298828125, 0.16015625, 0.400390625, -1.109375, -3.84375, 0.7734375, -0.421875, -0.271484375, -3.328125, -0.58984375, 0.169921875, 0.1083984375, 0.19921875, -1.1875, -1.0, 0.94921875, -0.0751953125, -3.5, 0.294921875, -0.2451171875, 0.0, 0.62890625, 0.248046875, -1.6484375, -0.1171875, -1.640625, -0.21875, -0.6171875, 0.05517578125, -0.546875, -0.314453125, -0.53125, -1.1328125, -5.75, -1.4921875, 0.458984375, -0.6328125, 1.1484375, -0.6796875, 0.6796875, 0.1396484375, -4.21875, -0.4296875, 0.62890625, 0.375, -1.8984375, -4.625, 0.228515625, -0.93359375, -2.53125, -0.37109375, -0.279296875, 1.1171875, 0.41796875, -1.4296875, -2.0625, 0.1396484375, -0.609375, -0.640625, 0.6953125, -5.3125, -0.4375, -1.828125, -3.328125, -0.1357421875, -1.6484375, -0.341796875, -1.1015625, -0.0810546875, -1.2890625, -5.78125, -1.390625, 1.1796875, -4.53125, -0.0634765625, -1.5234375, -1.1015625, -1.0546875, 0.62109375, -3.953125, -2.671875, -2.09375, -0.7421875, -2.0625, 0.5078125, -1.015625, -0.8828125, -1.2578125, 0.208984375, -0.35546875, 0.578125, 1.0546875, -1.2265625, -0.55859375, -0.65234375, -1.328125, -2.90625, -1.7421875, -1.6875, 0.75, 0.208984375, 0.1083984375, -0.298828125, 0.5546875, -0.93359375, -0.7890625, -2.8125, -1.640625, -0.53125, -0.5234375], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.02, "rtol": 0.02}}
{"kernel_name": "log_bfloat16", "prompt": "/*\nThis AIE kernel implements the natural logarithm function on a bfloat16 vector.\n>>> log_bfloat16([55.0, 71.5, 60.25, 54.5, 42.25, 64.5, 43.75, 89.0])\n[4.0, 4.28125, 4.09375, 4.0, 3.75, 4.15625, 3.78125, 4.5]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid log_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n    static const float LUT[17] = {\n        0.00000000f, 0.06062462f, 0.11778304f, 0.17185026f,\n        0.22314355f, 0.27193372f, 0.31845373f, 0.36290549f,\n        0.40546511f, 0.44628710f, 0.48550782f, 0.52324814f,\n        0.55961579f, 0.59470711f, 0.62860866f, 0.66139848f,\n        0.69314718f\n    };\n    union { uint32_t u; float f; } uinf{ .u = 0xFF800000u };\n    constexpr float LN2 = 0.69314718056f;\n\n    for (int i = 0; i < N; ++i) {\n        union { uint32_t u; float f; } fu{ .f = float(input[i]) };\n        float x = fu.f;\n\n        if (x <= 0.0f) {\n            output[i] = bfloat16(uinf.f);\n            continue;\n        }\n        int E = int((fu.u >> 23) & 0xFF) - 127;\n        fu.u = (fu.u & 0x7FFFFFu) | 0x3F800000u;\n        float m = fu.f - 1.0f;\n        float t = m * 16.0f;\n        int idx = int(t);\n        if (idx >= 16) idx = 15;\n        float frac = t - float(idx);\n        float y_m = LUT[idx] + frac * (LUT[idx+1] - LUT[idx]);\n        float y = float(E) * LN2 + y_m;\n        output[i] = bfloat16(y);\n    }\n}", "program_code": "extern \"C\" {\n    void log_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        log_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [55.0, 71.5, 60.25, 54.5, 42.25, 64.5, 43.75, 89.0, 96.5, 38.25, 79.0, 53.0, 56.75, 92.5, 7.09375, 8.6875, 2.015625, 83.5, 78.0, 87.0, 98.0, 80.0, 46.25, 78.0, 11.8125, 64.0, 14.3125, 94.5, 52.25, 41.5, 26.5, 77.5, 45.5, 56.75, 1.8828125, 61.75, 61.25, 61.75, 94.5, 68.0, 36.0, 43.75, 70.0, 6.03125, 66.5, 67.0, 21.0, 12.875, 31.5, 36.25, 57.0, 43.75, 99.0, 10.1875, 20.875, 16.125, 65.5, 25.375, 46.75, 24.5, 15.875, 11.0625, 65.5, 13.8125, 19.625, 36.75, 82.0, 9.6875, 84.0, 9.625, 97.5, 46.75, 97.5, 60.5, 74.0, 3.921875, 28.25, 12.0, 29.625, 11.875, 31.75, 41.5, 6.40625, 69.0, 56.75, 26.5, 52.25, 9.375, 57.5, 93.0, 31.875, 66.5, 13.1875, 71.5, 29.0, 18.375, 58.75, 2.015625, 83.0, 0.470703125, 68.0, 27.0, 73.5, 96.0, 24.875, 57.5, 59.25, 57.25, 22.25, 95.5, 44.75, 84.5, 70.0, 29.75, 81.5, 39.75, 88.0, 58.25, 88.0, 69.5, 72.5, 50.25, 95.5, 64.5, 42.5, 60.75, 1.921875, 30.125, 66.0, 29.0, 61.75, 43.0, 13.5625, 29.875, 57.0, 59.0, 57.5, 65.5, 65.0, 43.25, 89.5, 36.75, 43.5, 89.0, 80.5, 70.5, 10.0, 92.0, 71.5, 100.0, 14.9375, 87.0, 16.25, 61.5, 12.375, 85.0, 80.5, 57.0, 40.75, 6.90625, 69.5, 45.25, 72.0, 86.5, 97.5, 85.5, 1.171875, 36.0, 73.0, 17.125, 52.0, 5.4375, 20.0, 1.8515625, 79.5, 22.375, 34.5, 93.0, 70.5, 3.1875, 16.5, 62.25, 57.75, 23.75, 93.5, 61.5, 53.5, 59.0, 73.0, 31.25, 39.75, 21.0, 18.625, 94.5, 74.0, 49.0, 22.75, 25.375, 5.8125, 43.5, 31.125, 69.5, 37.75, 18.0, 2.46875, 6.71875, 68.0, 45.25, 53.75, 89.5, 99.0, 21.75, 66.5, 26.375, 2.0625, 76.0, 32.0, 38.25, 58.75, 83.0, 63.0, 87.5, 27.375, 80.0, 18.625, 95.5, 68.5, 21.5, 94.5, 73.0, 25.375, 21.375, 51.75, 2.5625, 20.75, 42.5, 37.5, 46.25, 27.75, 58.75, 86.5, 11.75, 51.75, 13.1875, 71.5, 39.5, 56.5, 18.375, 14.5, 48.75, 35.5, 94.0, 76.5, 75.0, 90.5, 8.3125], "dtype": "bfloat16"}], "outputs": [{"output": [4.0, 4.28125, 4.09375, 4.0, 3.75, 4.15625, 3.78125, 4.5, 4.5625, 3.640625, 4.375, 3.96875, 4.03125, 4.53125, 1.9609375, 2.15625, 0.69921875, 4.4375, 4.34375, 4.46875, 4.59375, 4.375, 3.828125, 4.34375, 2.46875, 4.15625, 2.65625, 4.5625, 3.953125, 3.71875, 3.28125, 4.34375, 3.8125, 4.03125, 0.6328125, 4.125, 4.125, 4.125, 4.5625, 4.21875, 3.578125, 3.78125, 4.25, 1.796875, 4.1875, 4.21875, 3.046875, 2.5625, 3.453125, 3.59375, 4.03125, 3.78125, 4.59375, 2.328125, 3.03125, 2.78125, 4.1875, 3.234375, 3.84375, 3.203125, 2.765625, 2.40625, 4.1875, 2.625, 2.984375, 3.609375, 4.40625, 2.265625, 4.4375, 2.265625, 4.59375, 3.84375, 4.59375, 4.09375, 4.3125, 1.3671875, 3.34375, 2.484375, 3.390625, 2.46875, 3.453125, 3.71875, 1.859375, 4.21875, 4.03125, 3.28125, 3.953125, 2.234375, 4.0625, 4.53125, 3.46875, 4.1875, 2.578125, 4.28125, 3.375, 2.90625, 4.0625, 0.69921875, 4.40625, -0.75390625, 4.21875, 3.296875, 4.3125, 4.5625, 3.21875, 4.0625, 4.09375, 4.0625, 3.109375, 4.5625, 3.796875, 4.4375, 4.25, 3.390625, 4.40625, 3.6875, 4.46875, 4.0625, 4.46875, 4.25, 4.28125, 3.921875, 4.5625, 4.15625, 3.75, 4.09375, 0.65234375, 3.40625, 4.1875, 3.375, 4.125, 3.765625, 2.609375, 3.390625, 4.03125, 4.0625, 4.0625, 4.1875, 4.1875, 3.765625, 4.5, 3.609375, 3.765625, 4.5, 4.375, 4.25, 2.296875, 4.53125, 4.28125, 4.59375, 2.703125, 4.46875, 2.78125, 4.125, 2.515625, 4.4375, 4.375, 4.03125, 3.703125, 1.9296875, 4.25, 3.8125, 4.28125, 4.46875, 4.59375, 4.4375, 0.158203125, 3.578125, 4.28125, 2.84375, 3.953125, 1.6953125, 3.0, 0.6171875, 4.375, 3.109375, 3.546875, 4.53125, 4.25, 1.15625, 2.796875, 4.125, 4.0625, 3.171875, 4.53125, 4.125, 3.984375, 4.0625, 4.28125, 3.4375, 3.6875, 3.046875, 2.921875, 4.5625, 4.3125, 3.890625, 3.125, 3.234375, 1.7578125, 3.765625, 3.4375, 4.25, 3.625, 2.890625, 0.90234375, 1.90625, 4.21875, 3.8125, 3.984375, 4.5, 4.59375, 3.078125, 4.1875, 3.265625, 0.72265625, 4.34375, 3.46875, 3.640625, 4.0625, 4.40625, 4.15625, 4.46875, 3.3125, 4.375, 2.921875, 4.5625, 4.21875, 3.0625, 4.5625, 4.28125, 3.234375, 3.0625, 3.953125, 0.94140625, 3.03125, 3.75, 3.625, 3.828125, 3.328125, 4.0625, 4.46875, 2.46875, 3.953125, 2.578125, 4.28125, 3.671875, 4.03125, 2.90625, 2.671875, 3.890625, 3.5625, 4.53125, 4.34375, 4.3125, 4.5, 2.125], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.02, "rtol": 0.02}}
{"kernel_name": "matmul_16x16_int8", "prompt": "/*\nThis kernel performs matrix multiplication between two 16x16 int8_t matrices A and B (row-major, shape=(16,16)), writing the result (clamped to int8_t) into a 16x16 int8_t output buffer (row-major).\n>>> matmul_16x16_int8([[2, 0, 2, 5], [1, -3, -5, -1], [1, 2, -4, 1], [-2, -4, 4, 0]], [[-4, 2, 1, 9], [-4, -4, 9, -6], [-6, 8, -3, -6], [8, 8, -2, 5]])\n[[20, 60, -14, 31], [30, -34, -9, 52], [20, -30, 29, 26], [0, 44, -50, -18]]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\na size: 256\nb size: 256\nout size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid matmul_16x16_int8(int8_t *a, int8_t *b, int8_t *out) {\n    // Implementation goes here\n}\n", "canonical_solution": "// Matrix multiplication: out = a x b\n    // Both a and b are 16x16 int8_t matrices in row-major order.\n    // out is also a 16x16 int8_t matrix in row-major order.\n    constexpr int SIZE = 16;\n    for (int i = 0; i < SIZE; ++i) {\n        for (int j = 0; j < SIZE; ++j) {\n            int32_t acc = 0;\n            for (int k = 0; k < SIZE; ++k) {\n                acc += static_cast<int32_t>(a[i*SIZE + k]) * static_cast<int32_t>(b[k*SIZE + j]);\n            }\n            // Clamp to int8 range\n            if (acc > 127) acc = 127;\n            if (acc < -128) acc = -128;\n            out[i*SIZE + j] = static_cast<int8_t>(acc);\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void matmul_16x16_int8_wrapper(int8_t *a, int8_t *b, int8_t *out) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        matmul_16x16_int8(a, b, out);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"a": [[2, 0, 2, 5, 0, -6, -4, -10, 2, -9, -7, 9, 4, 8, -8, -7], [1, -3, -5, -1, -6, 2, 9, -9, 7, -5, 8, -4, -8, -6, -5, 6], [1, 2, -4, 1, -6, -6, 4, 8, 2, 3, 2, -5, -1, -8, -9, -8], [-2, -4, 4, 0, -3, 0, 0, 5, -2, -5, -3, 4, -2, 1, 7, 7], [1, 3, -6, -5, -4, 9, 2, -8, -1, 3, 1, 5, 8, -2, -1, 4], [4, -5, 9, -2, 3, -5, 6, 9, -5, 9, 8, -4, -5, -2, -3, -3], [5, -3, 4, -7, 5, -10, -1, 8, -4, -7, -10, -3, 2, 7, -2, 3], [9, -8, -7, -7, -5, 9, -8, 6, -3, 9, 2, 1, 3, 4, -3, -3], [-9, -10, 7, -7, -9, -1, 3, 8, -6, 0, 7, -1, 8, 7, -10, -8], [-8, -5, 0, -8, -2, -3, 0, -10, -7, 0, -7, 9, 5, 1, 3, -4], [8, 1, -4, -6, -4, 5, -8, -7, -6, 7, -10, -2, -8, -10, -2, 5], [-6, -6, -3, 8, -5, 7, -4, -4, 4, 8, -2, 3, 0, -8, 5, 7], [7, 6, -8, 5, 7, -6, 7, 6, -3, -1, -4, 1, 4, 0, 2, 5], [9, -2, 7, 9, -9, 5, -9, 7, -10, -3, -9, 8, -3, 5, 0, -1], [5, 0, 5, -2, -5, -7, 7, 0, -4, 5, -3, 2, 4, 1, 1, -10], [1, 4, -9, 8, 5, 6, -9, -9, -10, 2, -10, 4, -1, 6, -7, 0]], "dtype": "int8"}, {"b": [[-4, 2, 1, 9, 0, 7, 0, -1, 6, -2, 6, 1, -2, -8, -6, 7], [-4, -4, 9, -6, 5, -6, -3, 8, 9, -8, -7, 1, -1, 2, 9, 1], [-6, 8, -3, -6, -2, -10, 4, 5, 0, 5, -6, -10, -4, -5, -7, 2], [8, 8, -2, 5, 0, -3, 3, 1, -9, 7, 2, -5, -2, 6, -8, 7], [7, -7, -5, -4, -9, -3, -1, 9, 8, -7, 9, -10, -5, -6, -1, -5], [2, 8, 4, -7, -10, -9, 7, 8, 8, 4, -7, -6, 2, -8, -3, 6], [-7, 7, -7, -1, 7, -10, -8, -4, 0, -8, 3, -7, 3, 6, 7, -7], [4, -3, -3, 1, 9, -1, -10, -10, -1, -5, -10, -2, 0, 0, 9, 7], [8, -1, -4, -2, 1, 8, -4, 9, -5, 3, -6, 5, 1, -8, 6, -6], [2, 6, -8, -3, 7, -4, -9, -7, -7, 3, 0, 7, 1, 1, 6, -7], [-3, -9, 8, -5, 7, 4, 6, 6, -7, 0, 2, 7, 7, 6, 6, -7], [8, 0, 1, -8, 9, -5, 4, 4, 0, -1, 2, 6, 1, -9, 7, 9], [-6, -4, 0, -4, 3, 6, -3, 1, 3, 7, -2, 9, -5, -8, 1, -2], [0, -8, -7, 9, -9, -9, 6, 3, -5, -10, -9, -5, -10, -6, 0, -4], [-5, -7, 9, -9, -5, 4, 4, -5, 0, -5, 9, -5, 3, -6, -5, -5], [-1, 0, -2, -1, 3, 1, 9, -9, -5, -8, -5, 3, -8, -7, 8, 7]], "dtype": "int8"}], "outputs": [{"out": [[110, -3, -77, 127, -128, -25, 121, 127, 38, 113, 15, 8, -128, -103, -128, 107], [-50, 120, 50, 54, 76, 117, 95, 40, -115, 4, 65, 89, 127, 127, 89, -89], [5, 97, -47, 127, 127, 115, -128, -121, -57, 117, -47, 127, 127, 127, 127, -39], [-16, 0, 20, -52, -7, -40, 127, -128, -57, -88, -48, -105, -52, -118, -17, 127], [-88, 41, 112, -128, 46, 8, 82, 63, 117, 47, -11, 127, 32, -128, 120, 15], [-91, 82, -128, 35, 127, -110, -128, -128, -112, -31, 45, -100, 74, 127, 49, -110], [-79, -128, -128, 127, -91, 26, -81, -128, 113, -128, -57, -128, -128, -128, -50, 84], [41, -13, -21, 122, -11, 120, -30, -128, 13, 104, -84, 127, 32, -128, 4, 91], [-128, -1, -128, 64, 127, -128, -97, -89, -128, 127, -128, 81, 32, 127, 69, -106], [-76, -19, 0, -120, -63, -59, 61, -22, 63, 64, 127, 68, 0, -61, -75, -80], [-17, 127, 86, 54, -74, 95, 30, -128, 127, 80, 103, 99, 40, -28, -119, 127], [127, 127, 20, -128, 28, 72, 103, -114, -128, 127, 34, 127, 81, -45, -29, 86], [3, -97, -54, 95, 127, 31, -128, -128, 90, -128, 121, -30, -109, -15, 127, 75], [64, 127, 26, 127, -72, -128, 127, -126, 21, 106, -128, -128, -128, -128, -128, 127], [-128, 92, -82, 53, 127, -66, -128, -100, 15, 46, 85, 10, 41, 78, -53, -94], [127, 72, -20, 127, -128, -128, 127, 117, 127, 23, 47, -36, -128, -39, -128, 127]], "dtype": "int8"}]}}
{"kernel_name": "matrixvector_mult_int8", "prompt": "/*\nA kernel that computes the matrix-vector multiplication of an int8 matrix (16x16, row-major) and an int8 vector (length 16). Result is an int32 vector of length 16.\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nmatrix size: 256\nvector size: 16\nresult size: 16\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid matrixvector_mult_int8(int8_t *matrix, int8_t *vector, int32_t *result) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int ROWS = 16;\n    constexpr int COLS = 16;\n    for (int i = 0; i < ROWS; ++i) {\n        int32_t acc = 0;\n        for (int j = 0; j < COLS; ++j) {\n            acc += static_cast<int32_t>(matrix[i * COLS + j]) * static_cast<int32_t>(vector[j]);\n        }\n        result[i] = acc;\n    }\n}", "program_code": "extern \"C\" {\n    void matrixvector_mult_int8_wrapper(int8_t *matrix, int8_t *vector, int32_t *result) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        matrixvector_mult_int8(matrix, vector, result);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"matrix": [-10, -8, -16, 3, 18, 2, -20, -8, 13, 4, -17, -6, 6, -2, 14, 7, -17, -9, 19, 17, 4, -11, 16, -1, 10, 13, 11, 1, -3, 5, 17, 2, 18, 14, 16, -15, 3, -8, -14, -9, 16, 4, -16, -6, 4, 6, -8, -7, -8, -15, 14, -19, -18, -12, 18, -10, 19, -10, -5, 3, 17, -13, -12, 11, 4, 10, -3, -3, -9, -7, 16, 17, 18, 5, -18, -11, 2, -7, -2, -12, 4, 11, 2, -11, 7, -6, 2, 0, 3, 17, -12, -15, -4, -1, -15, 10, -2, 18, 1, -15, 10, -12, -13, -13, -5, -13, 15, 9, 10, -20, -11, 10, -2, -14, 15, 12, 4, 19, 1, -8, -12, -7, -18, 15, 9, -17, -15, -1, -18, -4, -13, -1, -8, -9, -6, -13, 10, 19, 13, 12, 9, -3, 15, -19, 0, -11, -7, 16, -10, -3, -11, -2, 1, 12, 14, -18, 11, 6, 3, -15, -10, -18, 8, 7, -12, 19, 3, 12, 15, -17, -9, -14, 18, -16, -14, 8, 4, 14, 15, -16, -3, -20, 9, 14, -20, -5, -16, 16, 19, -2, 8, 9, 10, -15, 3, -3, 18, 18, -6, 8, -7, 14, 9, -3, 14, -5, 5, -16, -4, 19, -14, -9, -12, 8, 11, 8, -1, 13, -19, -3, -20, 19, -19, 3, 19, 5, -5, -15, 15, 18, 19, -9, -20, 13, 7, -2, 8, 7, 7, -4, -19, 13, -20, -20, -6, -4, 15, -10, 6, 7, 18, 8, 9, -8, -9, -1], "dtype": "int8"}, {"vector": [-3, 2, -11, 0, -12, -9, -12, 11, 14, -16, -3, -14, -14, -16, 7, 11], "dtype": "int8"}], "outputs": [{"result": [484, -340, -90, 244, 525, 27, 212, -688, -258, -50, 674, -342, -875, -15, -1361, -145], "dtype": "int32"}]}}
{"kernel_name": "max_abs_bfloat16", "prompt": "/*\nThis AIE kernel finds the maximum absolute value in a bfloat16 input vector of size 256 and writes the result as a scalar bfloat16 in the output buffer.\n>>> max_abs_bfloat16([12.375, 2.796875, 6.84375, 15.6875, 13.0625, -6.84375, 6.65625, -1.0625])\n[15.6875]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\noutput size: 1\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid max_abs_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n    float max_abs = 0.0f;\n    for (int i = 0; i < N; ++i) {\n        float val = (float)input[i];\n        float abs_val = val < 0.0f ? -val : val;\n        if (abs_val > max_abs) {\n            max_abs = abs_val;\n        }\n    }\n    *output = (bfloat16)max_abs;\n}", "program_code": "extern \"C\" {\n    void max_abs_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        max_abs_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [12.375, 2.796875, 6.84375, 15.6875, 13.0625, -6.84375, 6.65625, -1.0625, -0.72265625, 2.875, 1.0078125, 10.1875, 5.3125, 0.8515625, 3.109375, 2.328125, 10.4375, -1.4375, 2.1875, -5.96875, -17.875, 4.5625, 6.0625, -5.1875, 15.875, -10.1875, 0.3203125, -1.3125, 10.75, 10.3125, 1.0859375, 2.640625, -6.21875, -13.875, -2.4375, 1.09375, 8.625, 8.4375, -2.71875, -2.109375, -7.34375, -9.9375, -11.9375, 13.625, -3.5625, -3.0625, -8.75, 5.4375, -11.3125, -1.4921875, -6.28125, 2.703125, -3.578125, -8.25, -0.197265625, 3.0, 0.46484375, 2.125, -4.4375, -2.546875, -4.71875, -2.515625, -5.6875, -12.0625, 1.2421875, -2.8125, -11.4375, 3.234375, -6.34375, 0.36328125, 5.09375, 0.90234375, 7.96875, -8.625, 2.8125, -4.78125, -6.09375, -4.0625, -2.1875, 0.392578125, -8.125, 6.3125, 3.265625, -10.75, 10.4375, 13.25, 8.25, -1.2578125, -7.5, 7.375, -2.828125, 8.5625, 1.4609375, 6.84375, 2.5, 4.9375, 0.07373046875, 12.5, 0.88671875, 2.8125, 13.1875, -9.4375, -8.875, 6.78125, -8.1875, 13.625, -2.890625, -5.21875, 13.4375, 10.375, 13.0625, 6.34375, -6.03125, 13.375, -1.875, 5.625, 6.625, -1.0859375, 4.3125, 6.46875, 2.640625, -7.6875, 2.09375, 9.3125, -4.875, -1.046875, -3.046875, 12.9375, 4.71875, 2.859375, -5.375, 3.78125, -4.71875, 0.22265625, -4.4375, 4.75, 4.03125, -1.4609375, 2.765625, -7.65625, -10.4375, 3.078125, 1.1640625, 4.4375, 16.625, 6.625, -6.375, 7.8125, -9.1875, -3.234375, -0.478515625, 12.0, -5.21875, -5.78125, -0.6875, -4.65625, 7.875, -7.5625, -8.0625, -3.0625, -3.484375, 13.5, 6.65625, 0.61328125, -8.5625, 5.90625, -7.0, -10.8125, 8.3125, 2.21875, 6.4375, 2.234375, 6.0, -4.5625, -7.25, 4.78125, -5.625, -4.8125, -3.1875, 0.12255859375, -2.484375, -9.625, -4.5, -15.5625, 4.375, -11.1875, -7.71875, 0.365234375, -5.1875, 10.8125, -9.0625, 1.8671875, -0.275390625, -8.1875, 3.65625, -1.203125, 5.40625, 5.75, 15.125, 9.375, -2.578125, -1.671875, 7.6875, 4.59375, 4.46875, -11.3125, -0.169921875, -5.15625, 1.9609375, -0.6875, 6.375, 2.21875, 5.5, -3.265625, -6.625, -2.875, -0.119140625, 2.65625, 15.8125, -0.294921875, -6.6875, -2.421875, -3.25, 3.375, -10.8125, 0.443359375, 1.09375, 1.625, -4.1875, -1.6640625, -9.9375, -3.453125, -3.796875, 2.90625, -8.0625, 5.46875, 10.4375, -14.5, 2.984375, 4.75, -4.46875, -2.78125, -0.9296875, -2.078125, -2.15625, -11.75, 8.0625, 7.5625, -5.6875, -10.25, 3.640625, -4.03125, 0.9921875, -2.234375, 4.84375, 4.875], "dtype": "bfloat16"}], "outputs": [{"output": [17.875], "dtype": "bfloat16"}]}}
{"kernel_name": "maxpool1d_uint8", "prompt": "/*\nA kernel that performs a 1D maxpool operation on an input vector with window_size and stride as runtime parameters.\n>>> maxpool1d_uint8([172, 10, 127, 140, 47, 170, 196, 151], 2, 2)\n[172, 140, 170, 196]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 1024\nout_buffer size: 512\nwindow_size: 2\nstride: 2\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid maxpool1d_uint8(uint8_t *in_buffer, uint8_t *out_buffer, uint32_t window_size, uint32_t stride) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr uint32_t nbytes = 1024;\n    uint32_t num_windows = (nbytes - window_size) / stride + 1;\n\n    for (uint32_t i = 0; i < num_windows; i++) {\n        uint8_t max_val = 0;\n        for (uint32_t j = 0; j < window_size; j++) {\n            uint8_t current_val = *(in_buffer + i * stride + j);\n            if (current_val > max_val) {\n                max_val = current_val;\n            }\n        }\n        out_buffer[i] = max_val;\n    }\n}", "program_code": "extern \"C\" {\n    void maxpool1d_uint8_wrapper(uint8_t *in_buffer, uint8_t *out_buffer, uint32_t window_size, uint32_t stride) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        maxpool1d_uint8(in_buffer, out_buffer, window_size, stride);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [172, 10, 127, 140, 47, 170, 196, 151, 117, 166, 22, 183, 192, 204, 33, 216, 67, 179, 78, 154, 251, 82, 162, 219, 195, 118, 125, 139, 103, 125, 229, 216, 9, 164, 116, 108, 211, 222, 161, 159, 21, 81, 89, 165, 242, 214, 102, 98, 36, 183, 5, 112, 87, 58, 43, 76, 70, 60, 75, 228, 216, 189, 132, 14, 88, 154, 178, 246, 140, 205, 204, 69, 58, 57, 41, 98, 193, 66, 72, 122, 230, 125, 174, 202, 39, 74, 234, 207, 87, 168, 101, 135, 174, 200, 223, 122, 88, 94, 107, 145, 81, 139, 141, 100, 165, 230, 243, 236, 25, 66, 9, 214, 77, 107, 47, 18, 72, 152, 95, 86, 9, 27, 78, 22, 148, 151, 238, 165, 115, 8, 45, 5, 208, 19, 69, 94, 243, 146, 38, 213, 197, 30, 8, 245, 254, 71, 53, 199, 79, 7, 238, 35, 175, 29, 185, 222, 192, 9, 190, 222, 82, 187, 134, 250, 99, 96, 62, 121, 216, 167, 149, 204, 177, 124, 8, 205, 243, 130, 35, 118, 29, 3, 62, 133, 147, 194, 208, 199, 147, 12, 203, 173, 142, 59, 71, 30, 167, 97, 123, 184, 32, 221, 209, 163, 193, 63, 148, 9, 205, 178, 36, 185, 74, 145, 137, 127, 210, 213, 241, 32, 162, 52, 194, 31, 218, 151, 133, 202, 194, 28, 27, 244, 72, 39, 106, 151, 224, 61, 121, 163, 234, 185, 67, 254, 121, 179, 47, 203, 45, 52, 198, 114, 171, 166, 188, 183, 68, 198, 116, 28, 216, 111, 55, 34, 227, 132, 145, 128, 168, 157, 34, 128, 104, 207, 4, 164, 231, 250, 82, 53, 92, 29, 158, 133, 23, 81, 38, 38, 78, 178, 156, 232, 13, 234, 56, 244, 98, 239, 157, 17, 241, 240, 98, 79, 121, 153, 241, 132, 177, 16, 231, 105, 198, 139, 174, 42, 236, 47, 115, 186, 181, 8, 92, 31, 186, 241, 156, 120, 83, 225, 111, 1, 81, 0, 231, 65, 245, 151, 178, 231, 111, 106, 25, 169, 239, 106, 15, 57, 104, 69, 248, 35, 57, 177, 170, 102, 47, 52, 167, 119, 236, 174, 171, 11, 187, 192, 43, 174, 161, 219, 53, 82, 220, 175, 91, 91, 80, 1, 33, 128, 247, 44, 192, 142, 233, 191, 80, 99, 202, 154, 155, 53, 38, 28, 93, 140, 75, 54, 83, 121, 106, 248, 145, 170, 63, 214, 9, 84, 48, 72, 112, 203, 200, 95, 162, 68, 17, 6, 253, 6, 179, 125, 245, 196, 155, 31, 26, 47, 68, 29, 167, 127, 242, 120, 53, 244, 55, 147, 162, 131, 148, 75, 41, 204, 243, 203, 254, 100, 27, 50, 167, 180, 36, 244, 148, 232, 183, 215, 64, 78, 15, 20, 106, 143, 36, 96, 119, 148, 198, 133, 121, 227, 172, 146, 62, 186, 91, 158, 159, 23, 59, 178, 40, 207, 170, 135, 86, 141, 139, 65, 28, 117, 145, 188, 172, 85, 55, 5, 168, 48, 34, 52, 81, 49, 245, 95, 35, 69, 166, 65, 199, 169, 56, 83, 50, 163, 22, 23, 243, 192, 197, 100, 94, 95, 92, 155, 169, 197, 156, 44, 210, 94, 110, 121, 3, 0, 161, 219, 24, 113, 215, 114, 159, 178, 142, 131, 214, 36, 245, 116, 172, 162, 231, 153, 24, 48, 99, 209, 248, 93, 63, 249, 249, 131, 73, 209, 224, 98, 134, 249, 119, 42, 190, 118, 130, 205, 3, 13, 250, 112, 81, 67, 14, 231, 39, 215, 154, 149, 43, 127, 115, 201, 96, 64, 189, 127, 233, 29, 5, 0, 54, 8, 10, 138, 247, 19, 113, 114, 9, 102, 72, 43, 50, 198, 250, 186, 51, 197, 30, 127, 141, 4, 92, 23, 216, 207, 75, 187, 214, 27, 123, 130, 240, 100, 30, 121, 25, 76, 176, 98, 88, 103, 81, 62, 222, 102, 225, 163, 35, 13, 106, 222, 122, 17, 235, 123, 248, 107, 16, 195, 167, 129, 55, 82, 218, 69, 177, 174, 55, 176, 144, 227, 202, 12, 145, 148, 92, 119, 221, 209, 144, 240, 67, 50, 202, 75, 130, 155, 149, 243, 133, 14, 91, 174, 234, 41, 124, 12, 24, 58, 252, 208, 235, 193, 58, 113, 147, 36, 220, 70, 21, 10, 91, 230, 237, 86, 144, 24, 71, 43, 188, 141, 81, 104, 51, 101, 2, 11, 104, 219, 170, 2, 187, 163, 215, 51, 129, 189, 33, 80, 52, 173, 165, 32, 56, 97, 183, 182, 20, 101, 215, 128, 132, 22, 74, 38, 91, 197, 67, 19, 161, 229, 46, 174, 148, 215, 101, 42, 182, 37, 150, 115, 181, 133, 141, 184, 196, 37, 5, 188, 137, 57, 42, 232, 105, 53, 212, 77, 190, 171, 94, 30, 185, 51, 1, 24, 53, 125, 37, 125, 98, 133, 173, 2, 131, 210, 145, 3, 62, 31, 69, 94, 32, 40, 180, 226, 172, 53, 188, 107, 151, 217, 73, 13, 253, 81, 246, 112, 247, 235, 110, 40, 73, 174, 63, 72, 53, 144, 193, 19, 12, 127, 147, 95, 178, 102, 101, 72, 15, 144, 151, 154, 197, 98, 229, 194, 25, 127, 146, 248, 84, 144, 163, 180, 224, 27, 57, 67, 233, 60, 228, 236, 91, 231, 243, 61, 31, 24, 174, 14, 207, 118, 114, 96, 159, 254, 114, 4, 61, 174, 216, 195, 159, 131, 250, 237, 18, 17, 179, 139, 104, 191, 29, 252, 211, 36, 76, 86, 170, 91, 196, 205, 13, 85, 208, 121, 11, 109, 105, 109, 102, 129, 101, 75, 147, 233, 172, 184, 250, 143, 225, 16, 166, 242, 63, 152, 76, 206, 148, 157, 19, 47, 80, 149, 104, 185, 225, 110, 132, 37, 247, 25, 192, 73, 177, 208, 165, 165, 150, 188, 67, 170, 185, 121, 7, 224, 168, 118, 203, 86, 128, 117, 52, 128, 136, 189, 229, 193, 244, 83, 54, 4, 59, 161, 138, 220, 164, 104, 39, 22, 101, 160, 195, 129, 108, 228, 60, 106, 158, 251, 149, 60, 155, 251, 234, 144, 121, 121, 216, 233, 4, 70, 149, 90, 120, 213, 1, 52, 77, 31, 169, 80, 183, 13], "dtype": "uint8"}], "outputs": [{"out_buffer": [172, 140, 170, 196, 166, 183, 204, 216, 179, 154, 251, 219, 195, 139, 125, 229, 164, 116, 222, 161, 81, 165, 242, 102, 183, 112, 87, 76, 70, 228, 216, 132, 154, 246, 205, 204, 58, 98, 193, 122, 230, 202, 74, 234, 168, 135, 200, 223, 94, 145, 139, 141, 230, 243, 66, 214, 107, 47, 152, 95, 27, 78, 151, 238, 115, 45, 208, 94, 243, 213, 197, 245, 254, 199, 79, 238, 175, 222, 192, 222, 187, 250, 99, 121, 216, 204, 177, 205, 243, 118, 29, 133, 194, 208, 147, 203, 142, 71, 167, 184, 221, 209, 193, 148, 205, 185, 145, 137, 213, 241, 162, 194, 218, 202, 194, 244, 72, 151, 224, 163, 234, 254, 179, 203, 52, 198, 171, 188, 198, 116, 216, 55, 227, 145, 168, 128, 207, 164, 250, 82, 92, 158, 81, 38, 178, 232, 234, 244, 239, 157, 241, 98, 153, 241, 177, 231, 198, 174, 236, 186, 181, 92, 241, 156, 225, 111, 81, 231, 245, 231, 111, 169, 239, 57, 104, 248, 177, 170, 52, 167, 236, 171, 192, 174, 219, 82, 220, 91, 80, 128, 247, 192, 233, 99, 202, 155, 38, 140, 75, 121, 248, 170, 214, 84, 72, 203, 200, 162, 17, 253, 179, 245, 155, 47, 68, 167, 242, 244, 147, 162, 148, 204, 243, 254, 50, 180, 244, 232, 215, 78, 20, 143, 96, 148, 198, 227, 172, 186, 158, 159, 178, 207, 170, 141, 139, 117, 188, 172, 55, 168, 52, 81, 245, 69, 166, 199, 83, 163, 23, 243, 197, 95, 155, 197, 156, 210, 121, 3, 219, 113, 215, 178, 142, 214, 245, 172, 231, 48, 209, 248, 249, 249, 209, 224, 249, 119, 190, 205, 13, 250, 81, 231, 215, 154, 127, 201, 96, 189, 233, 5, 54, 138, 247, 114, 102, 72, 198, 250, 197, 127, 141, 92, 216, 187, 214, 130, 240, 121, 76, 176, 103, 81, 222, 225, 35, 222, 122, 235, 248, 195, 167, 82, 218, 177, 176, 227, 202, 148, 119, 221, 240, 67, 202, 155, 243, 133, 174, 234, 124, 58, 252, 235, 113, 147, 220, 21, 230, 237, 144, 71, 188, 104, 101, 11, 219, 170, 187, 215, 189, 80, 173, 165, 97, 183, 101, 215, 132, 74, 197, 67, 229, 174, 215, 101, 182, 150, 181, 184, 196, 188, 137, 232, 105, 212, 190, 94, 185, 24, 125, 125, 133, 173, 210, 145, 62, 94, 40, 226, 172, 188, 217, 73, 253, 246, 247, 110, 174, 72, 144, 193, 127, 147, 178, 101, 144, 154, 197, 229, 127, 248, 144, 180, 224, 67, 233, 236, 231, 243, 31, 174, 207, 114, 254, 114, 174, 216, 159, 250, 18, 179, 191, 252, 211, 86, 170, 205, 85, 208, 109, 109, 129, 101, 233, 184, 250, 225, 242, 152, 206, 157, 47, 149, 185, 225, 132, 247, 192, 208, 165, 188, 170, 185, 224, 168, 203, 128, 128, 189, 229, 244, 54, 161, 220, 164, 39, 160, 195, 228, 106, 251, 149, 251, 234, 121, 233, 70, 149, 213, 52, 77, 169, 183], "dtype": "uint8"}], "rtps": [{"window_size": 2, "dtype": "uint32"}, {"stride": 2, "dtype": "uint32"}]}}
{"kernel_name": "maxpool2d_bfloat16", "prompt": "/*\nA kernel that performs a two dimension max pooling on an input matrix (32x32), buffer_in, with a 2x2 kernel and stride of two. The output is written to buffer_out.\n>>> maxpool2d_bfloat16([[3.53125, 0.80078125, 1.9609375, 4.46875], [-1.7734375, -3.96875, -0.6953125, 0.3125], [0.35546875, -0.8046875, -3.265625, 0.92578125], [0.02099609375, 3.578125, 0.25390625, 0.8046875]])\n[[3.53125, 4.46875], [3.578125, 0.92578125]]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 1024\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid maxpool2d_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int ROWS = 32;\n    constexpr int COLS = 32;\n    constexpr int WINDOW_SIZE = 2;\n    constexpr int STRIDE = 2;\n\n    for (int i = 0; i < ROWS; i += STRIDE) {\n        for (int j = 0; j < COLS; j += STRIDE) {\n            bfloat16 max_val = input[i * COLS + j];\n            for (int wi = 0; wi < WINDOW_SIZE; wi++) {\n                for (int wj = 0; wj < WINDOW_SIZE; wj++) {\n                    bfloat16 current_val = input[(i + wi) * COLS + (j + wj)];\n                    if (current_val > max_val) {\n                        max_val = current_val;\n                    }\n                }\n            }\n            output[(i/STRIDE) * (COLS/STRIDE) + (j/STRIDE)] = max_val;\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void maxpool2d_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        maxpool2d_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [[3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375, -0.2060546875, 0.8203125, 0.2890625, 2.90625, 1.5234375, 0.2431640625, 0.88671875, 0.66796875, 2.984375, -0.41015625, 0.625, -1.7109375, -5.09375, 1.3046875, 1.7265625, -1.484375, 4.53125, -2.90625, 0.09130859375, -0.375, 3.0625, 2.9375, 0.310546875, 0.7578125], [-1.7734375, -3.96875, -0.6953125, 0.3125, 2.453125, 2.40625, -0.7734375, -0.60546875, -2.09375, -2.84375, -3.40625, 3.90625, -1.015625, -0.875, -2.5, 1.5546875, -3.234375, -0.42578125, -1.7890625, 0.7734375, -1.0234375, -2.359375, -0.056396484375, 0.85546875, 0.1328125, 0.60546875, -1.265625, -0.7265625, -1.34375, -0.71875, -1.625, -3.453125], [0.35546875, -0.8046875, -3.265625, 0.92578125, -1.8125, 0.10400390625, 1.4609375, 0.2578125, 2.28125, -2.46875, 0.8046875, -1.3671875, -1.7421875, -1.15625, -0.625, 0.1123046875, -2.328125, 1.8046875, 0.9296875, -3.078125, 2.96875, 3.796875, 2.359375, -0.359375, -2.140625, 2.109375, -0.8046875, 2.4375, 0.416015625, 1.953125, 0.7109375, 1.4140625], [0.02099609375, 3.578125, 0.25390625, 0.8046875, 3.765625, -2.703125, -2.546875, 1.9375, -2.34375, 3.890625, -0.828125, -1.4921875, 3.84375, 2.96875, 3.734375, 1.8125, -1.71875, 3.8125, -0.53515625, 1.6015625, 1.890625, -0.310546875, 1.2265625, 1.84375, 0.75390625, -2.203125, 0.59765625, 2.65625, -1.390625, -0.298828125, -0.87109375, 3.703125], [1.34375, 0.81640625, -1.5390625, 1.078125, -1.3515625, 0.0634765625, -1.2734375, 1.3515625, 1.15625, -0.416015625, 0.79296875, -2.1875, -2.984375, 0.87890625, 0.333984375, 1.2734375, 4.78125, 1.890625, -1.828125, 2.234375, -2.625, -0.921875, -0.13671875, 3.421875, -1.4921875, -1.65625, -0.197265625, -1.328125, 2.25, -2.15625, -2.296875, -0.875], [-0.99609375, 3.859375, 1.8984375, 0.1748046875, -2.453125, 1.6875, -2.0, -3.09375, 2.375, 0.6328125, 1.84375, 0.63671875, 1.7109375, -1.3046875, -2.0625, 1.359375, -1.609375, -1.3828125, -0.91015625, 0.034912109375, -0.70703125, -2.75, -1.2890625, -4.4375, 1.25, -3.203125, -2.203125, 0.1044921875, -1.4765625, 3.09375, -2.578125, 0.53515625], [-0.07861328125, -2.34375, 1.046875, -0.34375, 1.546875, 1.6484375, 4.3125, 2.671875, -0.73828125, -0.478515625, 2.203125, 1.3125, 1.28125, -3.234375, -0.048583984375, -1.4765625, 0.55859375, -0.1962890625, 1.8203125, 0.6328125, 1.5703125, -0.93359375, -1.890625, -0.8203125, -0.033935546875, 0.7578125, 4.53125, -0.08447265625, -1.9140625, -0.69140625, -0.92578125, 0.96484375], [-3.078125, 0.126953125, 0.3125, 0.46484375, -1.1953125, -0.4765625, -2.84375, -0.98828125, -1.0859375, 0.83203125, -2.3125, 1.5625, 2.984375, -4.125, 0.8515625, 1.3515625, -1.2734375, -0.79296875, -0.265625, -0.59375, -0.6171875, -3.359375, 2.296875, 2.15625, -1.625, -2.9375, 1.0390625, -1.1484375, 0.283203125, -0.63671875, 1.3828125, 1.390625], [-1.453125, -2.765625, -3.171875, 1.21875, -2.375, -1.015625, -1.1953125, -0.10498046875, -3.875, 0.376953125, 1.046875, 0.1767578125, -0.62109375, 0.1943359375, 0.796875, -5.53125, 3.90625, 0.78125, -1.3046875, -0.78125, 0.98828125, -0.232421875, -4.0625, 4.125, -0.220703125, 2.046875, -1.3828125, 3.078125, 0.57421875, 1.21875, -2.09375, 2.421875], [1.3828125, 2.609375, -1.2578125, -0.9609375, 4.59375, -2.125, -0.271484375, 2.28125, 0.1953125, 1.1640625, -0.80078125, 0.73828125, -2.609375, 3.3125, -0.236328125, -1.359375, 1.3359375, -0.921875, -2.671875, -2.6875, 1.390625, -0.318359375, -0.267578125, 2.15625, -2.25, -1.4609375, -0.76953125, 0.1884765625, -0.08447265625, -0.57421875, -0.123046875, -0.21484375], [-1.4375, -1.625, 0.55078125, -1.78125, -2.3125, -0.625, -0.314453125, 4.5, -1.40625, 1.8828125, 1.4921875, -2.375, 1.546875, -2.375, -5.3125, 1.2109375, -3.515625, 0.90234375, -1.3671875, 3.3125, 2.140625, -0.90625, -1.375, -2.421875, -0.8828125, -0.5625, -0.73046875, 0.3125, 1.15625, 0.69921875, -1.53125, -2.875], [2.734375, -1.375, -1.3046875, -1.0390625, -3.6875, -0.95703125, -0.9609375, 1.2421875, 1.3984375, 0.007537841796875, 1.8671875, 0.6796875, -0.03125, 0.322265625, -0.380859375, -0.7890625, -0.53515625, -2.25, 0.5625, -1.984375, 1.6796875, -0.498046875, 0.09912109375, 0.98828125, 1.2890625, -3.140625, -0.4140625, 1.7578125, -3.390625, 0.7734375, -4.5, -2.046875], [0.0771484375, -3.3125, -1.96875, -2.9375, 3.296875, 0.328125, 1.1328125, -0.4453125, -0.70703125, -3.234375, -0.58203125, -1.5234375, 1.71875, 2.28125, 2.9375, 1.703125, -1.1953125, -2.234375, 1.53125, 0.7109375, -3.53125, 0.7109375, 1.6328125, 0.11767578125, -0.369140625, -1.6171875, -2.890625, 1.6015625, -0.6171875, -0.466796875, 3.46875, 1.3671875], [0.7421875, 0.283203125, 3.046875, 3.4375, 1.859375, 1.1640625, -4.1875, 0.2470703125, -0.259765625, 0.1875, 1.8828125, -5.46875, -1.140625, 0.5390625, -0.93359375, -2.828125, 1.734375, 0.5546875, -1.9453125, 0.62890625, 1.640625, 0.01055908203125, 1.6015625, 0.15625, -0.7890625, -2.3125, -0.171875, 0.388671875, 1.75, -0.23046875, 0.9140625, -1.9296875], [-1.5625, -0.220703125, -2.109375, 1.640625, 0.92578125, 0.55859375, 0.6796875, 4.03125, -0.9375, -4.40625, 0.3984375, -0.10107421875, -1.03125, -1.9609375, -0.87890625, 0.36328125, -1.0078125, 4.8125, -1.921875, -1.5859375, -4.5625, 0.50390625, -4.03125, -1.078125, -0.55078125, -1.421875, 3.484375, 1.9921875, 2.640625, -1.765625, 2.25, 0.9921875], [1.5390625, 2.0625, -1.8203125, -0.84765625, 1.7265625, -5.3125, 3.03125, 1.109375, -0.09130859375, 0.44140625, -2.0625, -0.69921875, 2.203125, 2.59375, 5.40625, -0.1474609375, -1.3203125, -1.03125, -2.03125, -0.1552734375, 0.765625, -0.068359375, 2.1875, -0.46875, -0.6953125, -1.1640625, -3.265625, -3.140625, -2.359375, 2.609375, 1.7890625, 2.75], [-2.671875, -3.9375, -1.3203125, 0.3515625, 0.99609375, 2.09375, 0.5703125, 3.484375, -0.4453125, -1.828125, -3.359375, -1.78125, 0.484375, -1.78125, 1.875, 2.828125, -4.75, 1.7265625, -4.46875, 0.8046875, 2.453125, 0.1298828125, -2.5625, -1.171875, -0.5234375, -0.365234375, -0.40625, -0.2197265625, 0.427734375, -2.421875, -0.484375, 3.03125], [-0.76953125, -0.88671875, 2.15625, -5.125, 2.359375, -1.265625, 0.328125, 0.1923828125, 1.8828125, -0.53515625, -1.359375, 2.59375, -4.71875, 0.040771484375, -2.703125, -1.5234375, 4.03125, -0.08935546875, 0.390625, -3.5625, -1.4609375, 0.392578125, 0.7109375, 1.234375, 0.0172119140625, 1.0546875, 0.90625, -3.65625, 0.07421875, 1.5390625, 1.1796875, -0.7265625], [-1.609375, -2.234375, -0.26171875, 2.265625, -3.90625, -1.3203125, -2.28125, 1.5703125, -1.109375, -0.94140625, -0.43359375, 0.890625, -0.78515625, -6.09375, 1.0859375, 0.87890625, -0.439453125, -2.171875, 0.703125, 0.7578125, -0.94140625, -0.43359375, -1.859375, -0.357421875, -3.09375, 0.8359375, -1.890625, 0.4765625, -2.8125, -1.1796875, -0.220703125, -3.328125], [0.23046875, -0.7578125, -3.484375, -2.609375, 1.2109375, 1.7890625, -0.263671875, 0.80859375, 0.447265625, 0.66015625, 2.578125, -3.015625, 1.3515625, -0.765625, -0.44921875, -0.60546875, -0.75, -2.453125, 0.3671875, 3.34375, -0.1123046875, -0.002777099609375, -1.375, -0.2353515625, 0.93359375, -0.7421875, -0.90625, 0.8046875, -1.8359375, 0.50390625, 1.640625, 2.71875], [-0.1806640625, 2.734375, 2.0625, -1.9921875, -2.4375, -0.609375, 2.0625, -0.14453125, -1.203125, 3.109375, 0.57421875, -4.65625, 0.6328125, 1.0390625, 0.451171875, 0.8984375, -0.134765625, -2.640625, -0.7421875, -1.890625, -1.8671875, -2.53125, 0.90625, 0.1953125, -0.89453125, -1.296875, -0.046875, 2.15625, -4.0, 0.75390625, -1.09375, -3.765625], [-3.890625, -1.828125, 0.439453125, 0.78515625, -1.875, 2.03125, 2.84375, 0.79296875, -1.1796875, 2.25, 1.5078125, 1.734375, -1.3125, -5.65625, 4.21875, -3.21875, -0.07177734375, 4.75, 0.66015625, 1.8984375, -3.0, -3.5625, -1.0625, 2.1875, -0.69140625, -1.5859375, 0.396484375, 2.15625, -2.890625, -2.421875, -1.578125, 2.1875], [0.46875, 4.25, 1.875, -0.0703125, 2.53125, 0.423828125, -1.40625, 1.359375, -1.390625, -0.58203125, 2.65625, -0.2021484375, -1.609375, -0.9296875, 2.046875, -1.1015625, -0.7734375, -1.0234375, 0.3671875, -0.76953125, -3.203125, -1.7734375, -1.8671875, 2.484375, 1.625, 1.171875, -1.0078125, -1.6328125, -1.015625, -2.109375, 5.0, -4.5], [1.125, -2.5625, -0.208984375, -1.9765625, -2.359375, -2.28125, 3.515625, -0.265625, -1.53125, 1.109375, 0.020751953125, 1.4375, -3.65625, 0.60546875, 1.546875, -3.328125, 0.89453125, 3.390625, -0.0296630859375, 1.640625, 1.34375, -1.4140625, 0.07958984375, -3.140625, -0.90234375, 0.53125, 1.4453125, 0.04931640625, 1.4375, -2.203125, -0.203125, 0.03857421875], [3.703125, -0.427734375, -0.99609375, 0.042724609375, -1.8359375, 0.384765625, -0.73046875, -3.578125, -0.1171875, -0.63671875, -3.265625, -0.1337890625, 2.984375, 1.0390625, 1.2265625, -2.6875, 0.953125, 0.296875, 1.0546875, 0.84375, -2.71875, -0.0830078125, -1.515625, -0.10009765625, -1.796875, 2.625, -1.71875, -1.796875, 0.1494140625, -2.15625, -0.84765625, -1.65625], [2.828125, 1.5703125, -0.11474609375, -0.78125, 1.8828125, 0.80859375, 0.99609375, -0.052490234375, -3.375, -0.224609375, -1.0625, 1.2890625, 2.03125, -1.3125, 0.9375, 3.46875, -1.3359375, 3.359375, -1.703125, 0.0458984375, -0.0223388671875, 0.02294921875, -1.671875, -1.1796875, -1.3359375, 0.65234375, 0.66015625, 4.4375, 2.734375, -1.0234375, 0.6484375, 1.9921875], [0.061279296875, -0.1396484375, 0.10302734375, 1.734375, -1.6953125, -0.65234375, 0.94140625, 0.62109375, 0.478515625, -0.73828125, 1.9453125, 4.28125, 0.8125, -0.38671875, 1.5078125, -1.078125, -1.5, 0.0654296875, -5.15625, -2.3125, -0.6953125, -2.703125, -2.0625, -0.875, -3.28125, -0.8125, -1.0703125, 0.05078125, 2.3125, 0.345703125, 0.042236328125, 0.19921875], [0.455078125, -2.03125, -0.2294921875, 0.6171875, -2.734375, 1.734375, 2.15625, -1.265625, -0.482421875, -1.7578125, 1.3984375, -2.125, -0.4453125, -1.71875, 0.10205078125, -3.59375, 2.65625, -1.9296875, 0.11962890625, -0.42578125, -1.5234375, -1.7734375, 1.875, -1.0546875, 0.54296875, -1.6015625, -1.296875, 0.9453125, 1.859375, -0.3515625, -2.84375, 4.0], [-1.7109375, -3.078125, 5.1875, -0.80859375, -2.921875, -1.3671875, 0.734375, 0.380859375, -1.703125, 3.640625, -1.046875, -2.375, 1.921875, 2.65625, -1.6328125, -2.796875, 2.0625, -4.09375, -2.453125, 1.9375, -0.11083984375, -0.52734375, 0.70703125, -0.3046875, -2.59375, 2.546875, 2.65625, 0.41015625, 0.09033203125, 4.6875, -0.5546875, -0.51953125], [0.73046875, 2.9375, 3.1875, -0.515625, 0.6171875, -2.75, -0.625, -1.6796875, -2.015625, 3.359375, -1.5859375, -1.0625, 0.73046875, 2.59375, 0.9609375, 5.53125, -0.1494140625, 0.515625, 0.55078125, 2.875, 1.015625, -0.232421875, -1.8984375, 0.48828125, 2.796875, -0.8203125, 1.0546875, 0.4921875, 1.7265625, -1.609375, 4.6875, -2.5625], [-0.73046875, 1.875, 0.59375, 1.65625, -0.9921875, -0.1494140625, 0.0244140625, 3.140625, 1.3828125, 1.59375, -1.3125, 1.9375, 0.451171875, 2.78125, 4.03125, -0.61328125, -0.8125, -1.7265625, -0.287109375, -0.765625, 0.71875, -0.2890625, -0.72265625, 2.125, -1.875, 0.8671875, -0.8125, 1.4453125, 2.765625, -0.60546875, 0.8828125, 0.357421875], [-1.6015625, 0.482421875, 0.578125, 0.82421875, -0.396484375, 0.1884765625, -2.296875, -0.71484375, 1.109375, 1.78125, -0.84375, 0.208984375, 0.45703125, 0.40234375, 1.078125, -3.640625, -0.0986328125, 0.478515625, -2.0, 3.34375, 0.322265625, 3.125, -1.578125, -1.8125, 0.44921875, -3.359375, 0.4296875, 0.1943359375, 2.03125, 1.3984375, -0.8359375, -2.1875]], "dtype": "bfloat16"}], "outputs": [{"output": [[3.53125, 4.46875, 3.734375, 1.8984375, 0.8203125, 3.90625, 1.5234375, 1.5546875, 2.984375, 0.7734375, 1.3046875, 1.7265625, 4.53125, 0.09130859375, 3.0625, 0.7578125], [3.578125, 0.92578125, 3.765625, 1.9375, 3.890625, 0.8046875, 3.84375, 3.734375, 3.8125, 1.6015625, 3.796875, 2.359375, 2.109375, 2.65625, 1.953125, 3.703125], [3.859375, 1.8984375, 1.6875, 1.3515625, 2.375, 1.84375, 1.7109375, 1.359375, 4.78125, 2.234375, -0.70703125, 3.421875, 1.25, 0.1044921875, 3.09375, 0.53515625], [0.126953125, 1.046875, 1.6484375, 4.3125, 0.83203125, 2.203125, 2.984375, 1.3515625, 0.55859375, 1.8203125, 1.5703125, 2.296875, 0.7578125, 4.53125, 0.283203125, 1.390625], [2.609375, 1.21875, 4.59375, 2.28125, 1.1640625, 1.046875, 3.3125, 0.796875, 3.90625, -0.78125, 1.390625, 4.125, 2.046875, 3.078125, 1.21875, 2.421875], [2.734375, 0.55078125, -0.625, 4.5, 1.8828125, 1.8671875, 1.546875, 1.2109375, 0.90234375, 3.3125, 2.140625, 0.98828125, 1.2890625, 1.7578125, 1.15625, -1.53125], [0.7421875, 3.4375, 3.296875, 1.1328125, 0.1875, 1.8828125, 2.28125, 2.9375, 1.734375, 1.53125, 1.640625, 1.6328125, -0.369140625, 1.6015625, 1.75, 3.46875], [2.0625, 1.640625, 1.7265625, 4.03125, 0.44140625, 0.3984375, 2.59375, 5.40625, 4.8125, -0.1552734375, 0.765625, 2.1875, -0.55078125, 3.484375, 2.640625, 2.75], [-0.76953125, 2.15625, 2.359375, 3.484375, 1.8828125, 2.59375, 0.484375, 2.828125, 4.03125, 0.8046875, 2.453125, 1.234375, 1.0546875, 0.90625, 1.5390625, 3.03125], [0.23046875, 2.265625, 1.7890625, 1.5703125, 0.66015625, 2.578125, 1.3515625, 1.0859375, -0.439453125, 3.34375, -0.002777099609375, -0.2353515625, 0.93359375, 0.8046875, 0.50390625, 2.71875], [2.734375, 2.0625, 2.03125, 2.84375, 3.109375, 1.734375, 1.0390625, 4.21875, 4.75, 1.8984375, -1.8671875, 2.1875, -0.69140625, 2.15625, 0.75390625, 2.1875], [4.25, 1.875, 2.53125, 3.515625, 1.109375, 2.65625, 0.60546875, 2.046875, 3.390625, 1.640625, 1.34375, 2.484375, 1.625, 1.4453125, 1.4375, 5.0], [3.703125, 0.042724609375, 1.8828125, 0.99609375, -0.1171875, 1.2890625, 2.984375, 3.46875, 3.359375, 1.0546875, 0.02294921875, -0.10009765625, 2.625, 4.4375, 2.734375, 1.9921875], [0.455078125, 1.734375, 1.734375, 2.15625, 0.478515625, 4.28125, 0.8125, 1.5078125, 2.65625, 0.11962890625, -0.6953125, 1.875, 0.54296875, 0.9453125, 2.3125, 4.0], [2.9375, 5.1875, 0.6171875, 0.734375, 3.640625, -1.046875, 2.65625, 5.53125, 2.0625, 2.875, 1.015625, 0.70703125, 2.796875, 2.65625, 4.6875, 4.6875], [1.875, 1.65625, 0.1884765625, 3.140625, 1.78125, 1.9375, 2.78125, 4.03125, 0.478515625, 3.34375, 3.125, 2.125, 0.8671875, 1.4453125, 2.765625, 0.8828125]], "dtype": "bfloat16"}]}}
{"kernel_name": "maxpool2d_relu_bfloat16", "prompt": "/*\nA kernel that performs 2D max pooling and applies ReLU on an input bfloat16 matrix (32x32), using a 2x2 window and stride of 2. The output is a 16x16 matrix in the output buffer where each element is the maximum of each 2x2 patch with ReLU applied.\n>>> maxpool2d_relu_bfloat16([[5.28125, 1.203125, 2.9375, 6.71875], [-2.65625, -5.9375, -1.046875, 0.46875], [0.53125, -1.203125, -4.875, 1.390625], [0.031494140625, 5.34375, 0.380859375, 1.203125]])\n[[5.28125, 6.71875], [5.34375, 1.390625]]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 1024\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid maxpool2d_relu_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int ROWS = 32;\n    constexpr int COLS = 32;\n    constexpr int WINDOW_SIZE = 2;\n    constexpr int STRIDE = 2;\n\n    for (int i = 0; i < ROWS; i += STRIDE) {\n        for (int j = 0; j < COLS; j += STRIDE) {\n            bfloat16 max_val = input[i * COLS + j];\n            for (int wi = 0; wi < WINDOW_SIZE; wi++) {\n                for (int wj = 0; wj < WINDOW_SIZE; wj++) {\n                    bfloat16 current_val = input[(i + wi) * COLS + (j + wj)];\n                    if (current_val > max_val) {\n                        max_val = current_val;\n                    }\n                }\n            }\n            float out_val = float(max_val) > 0.0f ? float(max_val) : 0.0f;\n            output[(i/STRIDE) * (COLS/STRIDE) + (j/STRIDE)] = (bfloat16)out_val;\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void maxpool2d_relu_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        maxpool2d_relu_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [[5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125, -0.310546875, 1.234375, 0.431640625, 4.375, 2.28125, 0.365234375, 1.328125, 1.0, 4.46875, -0.6171875, 0.9375, -2.5625, -7.65625, 1.9609375, 2.59375, -2.21875, 6.8125, -4.375, 0.1376953125, -0.5625, 4.59375, 4.40625, 0.46484375, 1.1328125], [-2.65625, -5.9375, -1.046875, 0.46875, 3.6875, 3.609375, -1.1640625, -0.90625, -3.140625, -4.25, -5.125, 5.84375, -1.53125, -1.3125, -3.765625, 2.328125, -4.84375, -0.63671875, -2.6875, 1.1640625, -1.53125, -3.546875, -0.08447265625, 1.28125, 0.19921875, 0.90625, -1.90625, -1.0859375, -2.015625, -1.078125, -2.4375, -5.1875], [0.53125, -1.203125, -4.875, 1.390625, -2.71875, 0.15625, 2.1875, 0.38671875, 3.421875, -3.703125, 1.203125, -2.046875, -2.609375, -1.734375, -0.93359375, 0.1689453125, -3.5, 2.703125, 1.3984375, -4.59375, 4.46875, 5.6875, 3.53125, -0.5390625, -3.21875, 3.15625, -1.2109375, 3.671875, 0.625, 2.9375, 1.0703125, 2.125], [0.031494140625, 5.34375, 0.380859375, 1.203125, 5.65625, -4.03125, -3.8125, 2.90625, -3.515625, 5.84375, -1.2421875, -2.25, 5.78125, 4.4375, 5.59375, 2.71875, -2.578125, 5.71875, -0.8046875, 2.40625, 2.84375, -0.46484375, 1.84375, 2.765625, 1.1328125, -3.296875, 0.89453125, 3.984375, -2.078125, -0.44921875, -1.3046875, 5.5625], [2.015625, 1.21875, -2.3125, 1.6171875, -2.015625, 0.095703125, -1.90625, 2.03125, 1.7265625, -0.625, 1.1875, -3.28125, -4.46875, 1.3203125, 0.5, 1.90625, 7.15625, 2.828125, -2.734375, 3.34375, -3.953125, -1.3828125, -0.205078125, 5.125, -2.234375, -2.484375, -0.294921875, -1.9921875, 3.375, -3.234375, -3.4375, -1.3125], [-1.4921875, 5.78125, 2.84375, 0.26171875, -3.671875, 2.53125, -3.0, -4.625, 3.5625, 0.94921875, 2.765625, 0.95703125, 2.578125, -1.953125, -3.109375, 2.046875, -2.40625, -2.0625, -1.3671875, 0.052490234375, -1.0625, -4.125, -1.9296875, -6.65625, 1.875, -4.8125, -3.3125, 0.15625, -2.21875, 4.625, -3.875, 0.80078125], [-0.11767578125, -3.5, 1.5703125, -0.515625, 2.3125, 2.46875, 6.5, 4.0, -1.109375, -0.71875, 3.296875, 1.96875, 1.921875, -4.84375, -0.07275390625, -2.21875, 0.83984375, -0.294921875, 2.734375, 0.953125, 2.359375, -1.3984375, -2.828125, -1.2265625, -0.051025390625, 1.140625, 6.78125, -0.126953125, -2.875, -1.0390625, -1.390625, 1.4453125], [-4.625, 0.189453125, 0.46875, 0.6953125, -1.7890625, -0.71484375, -4.28125, -1.4765625, -1.625, 1.25, -3.46875, 2.34375, 4.46875, -6.21875, 1.28125, 2.03125, -1.9140625, -1.1953125, -0.3984375, -0.89453125, -0.92578125, -5.03125, 3.453125, 3.234375, -2.4375, -4.40625, 1.5625, -1.7265625, 0.42578125, -0.95703125, 2.078125, 2.078125], [-2.171875, -4.15625, -4.75, 1.828125, -3.5625, -1.5234375, -1.7890625, -0.1572265625, -5.8125, 0.56640625, 1.5703125, 0.265625, -0.93359375, 0.29296875, 1.1953125, -8.3125, 5.875, 1.171875, -1.9609375, -1.171875, 1.484375, -0.34765625, -6.09375, 6.1875, -0.33203125, 3.0625, -2.078125, 4.59375, 0.859375, 1.828125, -3.140625, 3.640625], [2.0625, 3.90625, -1.8828125, -1.4453125, 6.90625, -3.1875, -0.408203125, 3.40625, 0.29296875, 1.75, -1.1953125, 1.109375, -3.921875, 4.96875, -0.353515625, -2.046875, 2.0, -1.3828125, -4.0, -4.03125, 2.078125, -0.478515625, -0.400390625, 3.234375, -3.375, -2.1875, -1.15625, 0.283203125, -0.126953125, -0.859375, -0.1845703125, -0.322265625], [-2.15625, -2.4375, 0.82421875, -2.671875, -3.46875, -0.9375, -0.47265625, 6.78125, -2.109375, 2.828125, 2.234375, -3.5625, 2.3125, -3.546875, -7.96875, 1.8203125, -5.28125, 1.3515625, -2.046875, 4.96875, 3.203125, -1.359375, -2.0625, -3.640625, -1.3203125, -0.83984375, -1.09375, 0.470703125, 1.734375, 1.046875, -2.296875, -4.3125], [4.09375, -2.0625, -1.953125, -1.5625, -5.53125, -1.4375, -1.4375, 1.859375, 2.09375, 0.01129150390625, 2.796875, 1.0234375, -0.047119140625, 0.482421875, -0.5703125, -1.1875, -0.8046875, -3.390625, 0.83984375, -2.984375, 2.53125, -0.75, 0.1484375, 1.484375, 1.9296875, -4.71875, -0.62109375, 2.640625, -5.09375, 1.1640625, -6.78125, -3.0625], [0.11572265625, -4.96875, -2.953125, -4.40625, 4.9375, 0.4921875, 1.703125, -0.66796875, -1.0625, -4.84375, -0.875, -2.28125, 2.578125, 3.421875, 4.40625, 2.5625, -1.796875, -3.34375, 2.296875, 1.0703125, -5.3125, 1.0703125, 2.4375, 0.1767578125, -0.5546875, -2.421875, -4.34375, 2.40625, -0.92578125, -0.69921875, 5.1875, 2.046875], [1.109375, 0.42578125, 4.5625, 5.15625, 2.78125, 1.75, -6.28125, 0.37109375, -0.390625, 0.28125, 2.828125, -8.25, -1.7109375, 0.80859375, -1.3984375, -4.25, 2.609375, 0.83203125, -2.90625, 0.9453125, 2.46875, 0.015869140625, 2.40625, 0.234375, -1.1875, -3.484375, -0.2578125, 0.58203125, 2.625, -0.345703125, 1.375, -2.890625], [-2.34375, -0.33203125, -3.15625, 2.453125, 1.390625, 0.8359375, 1.015625, 6.0625, -1.40625, -6.59375, 0.59765625, -0.1513671875, -1.5546875, -2.9375, -1.3203125, 0.54296875, -1.5078125, 7.25, -2.875, -2.375, -6.875, 0.75390625, -6.0625, -1.6171875, -0.828125, -2.125, 5.21875, 2.984375, 3.953125, -2.640625, 3.390625, 1.484375], [2.3125, 3.09375, -2.71875, -1.2734375, 2.59375, -7.96875, 4.53125, 1.65625, -0.13671875, 0.66015625, -3.09375, -1.046875, 3.296875, 3.890625, 8.0625, -0.2216796875, -1.9765625, -1.5390625, -3.046875, -0.2333984375, 1.1484375, -0.1025390625, 3.28125, -0.703125, -1.0390625, -1.7421875, -4.90625, -4.71875, -3.53125, 3.90625, 2.6875, 4.125], [-4.0, -5.90625, -1.9765625, 0.52734375, 1.4921875, 3.140625, 0.8515625, 5.21875, -0.66796875, -2.734375, -5.03125, -2.671875, 0.7265625, -2.671875, 2.8125, 4.25, -7.09375, 2.59375, -6.71875, 1.203125, 3.671875, 0.1943359375, -3.84375, -1.7578125, -0.78515625, -0.546875, -0.609375, -0.330078125, 0.640625, -3.625, -0.7265625, 4.5625], [-1.15625, -1.328125, 3.234375, -7.6875, 3.546875, -1.8984375, 0.4921875, 0.2890625, 2.828125, -0.8046875, -2.03125, 3.890625, -7.09375, 0.06103515625, -4.03125, -2.28125, 6.03125, -0.1337890625, 0.5859375, -5.34375, -2.1875, 0.58984375, 1.0625, 1.8515625, 0.02587890625, 1.578125, 1.359375, -5.5, 0.11083984375, 2.296875, 1.7734375, -1.09375], [-2.421875, -3.359375, -0.392578125, 3.40625, -5.84375, -1.9765625, -3.421875, 2.359375, -1.6640625, -1.4140625, -0.65234375, 1.3359375, -1.1796875, -9.125, 1.6328125, 1.3203125, -0.66015625, -3.25, 1.0546875, 1.140625, -1.40625, -0.6484375, -2.796875, -0.53515625, -4.65625, 1.25, -2.828125, 0.71484375, -4.21875, -1.7734375, -0.33203125, -4.96875], [0.345703125, -1.140625, -5.21875, -3.90625, 1.8125, 2.6875, -0.396484375, 1.2109375, 0.671875, 0.98828125, 3.859375, -4.53125, 2.03125, -1.1484375, -0.671875, -0.90625, -1.125, -3.671875, 0.55078125, 5.0, -0.16796875, -0.004150390625, -2.0625, -0.3515625, 1.3984375, -1.109375, -1.359375, 1.2109375, -2.75, 0.7578125, 2.46875, 4.09375], [-0.271484375, 4.09375, 3.109375, -2.984375, -3.65625, -0.9140625, 3.09375, -0.216796875, -1.8046875, 4.65625, 0.859375, -6.96875, 0.953125, 1.5625, 0.67578125, 1.3515625, -0.2021484375, -3.953125, -1.109375, -2.84375, -2.796875, -3.796875, 1.359375, 0.29296875, -1.34375, -1.9453125, -0.0703125, 3.234375, -6.0, 1.1328125, -1.640625, -5.65625], [-5.84375, -2.734375, 0.66015625, 1.1796875, -2.8125, 3.046875, 4.28125, 1.1875, -1.7734375, 3.375, 2.265625, 2.609375, -1.96875, -8.5, 6.34375, -4.84375, -0.107421875, 7.15625, 0.9921875, 2.84375, -4.5, -5.34375, -1.6015625, 3.265625, -1.0390625, -2.390625, 0.59375, 3.25, -4.34375, -3.625, -2.359375, 3.28125], [0.703125, 6.40625, 2.8125, -0.10546875, 3.796875, 0.6328125, -2.109375, 2.046875, -2.09375, -0.87109375, 3.984375, -0.3046875, -2.40625, -1.390625, 3.0625, -1.65625, -1.1640625, -1.53125, 0.55078125, -1.15625, -4.8125, -2.65625, -2.796875, 3.734375, 2.4375, 1.765625, -1.515625, -2.453125, -1.5234375, -3.15625, 7.5, -6.75], [1.6953125, -3.859375, -0.3125, -2.96875, -3.53125, -3.421875, 5.25, -0.3984375, -2.296875, 1.6640625, 0.031005859375, 2.15625, -5.46875, 0.91015625, 2.3125, -5.0, 1.34375, 5.09375, -0.044677734375, 2.46875, 2.015625, -2.125, 0.119140625, -4.6875, -1.3515625, 0.796875, 2.171875, 0.07373046875, 2.15625, -3.3125, -0.3046875, 0.057861328125], [5.5625, -0.640625, -1.5, 0.06396484375, -2.75, 0.578125, -1.09375, -5.375, -0.17578125, -0.953125, -4.90625, -0.201171875, 4.46875, 1.5625, 1.8359375, -4.03125, 1.4296875, 0.4453125, 1.5859375, 1.265625, -4.09375, -0.1240234375, -2.28125, -0.150390625, -2.6875, 3.9375, -2.578125, -2.703125, 0.2236328125, -3.234375, -1.2734375, -2.484375], [4.21875, 2.359375, -0.1728515625, -1.171875, 2.828125, 1.21875, 1.4921875, -0.07861328125, -5.0625, -0.337890625, -1.59375, 1.9375, 3.03125, -1.9765625, 1.40625, 5.21875, -2.0, 5.03125, -2.5625, 0.06884765625, -0.033447265625, 0.034423828125, -2.515625, -1.7734375, -2.0, 0.98046875, 0.98828125, 6.6875, 4.125, -1.53125, 0.97265625, 2.984375], [0.091796875, -0.208984375, 0.154296875, 2.609375, -2.546875, -0.9765625, 1.4140625, 0.93359375, 0.71875, -1.109375, 2.921875, 6.40625, 1.21875, -0.578125, 2.265625, -1.6171875, -2.25, 0.0986328125, -7.75, -3.46875, -1.046875, -4.0625, -3.09375, -1.3125, -4.9375, -1.21875, -1.609375, 0.076171875, 3.46875, 0.515625, 0.06298828125, 0.298828125], [0.68359375, -3.046875, -0.34375, 0.92578125, -4.125, 2.59375, 3.25, -1.890625, -0.72265625, -2.640625, 2.09375, -3.1875, -0.66796875, -2.578125, 0.1533203125, -5.375, 3.984375, -2.890625, 0.1796875, -0.63671875, -2.28125, -2.65625, 2.8125, -1.578125, 0.8125, -2.40625, -1.9453125, 1.4140625, 2.796875, -0.52734375, -4.28125, 6.0], [-2.5625, -4.625, 7.78125, -1.2109375, -4.375, -2.046875, 1.1015625, 0.5703125, -2.5625, 5.46875, -1.5625, -3.546875, 2.875, 3.984375, -2.453125, -4.21875, 3.09375, -6.15625, -3.6875, 2.90625, -0.166015625, -0.79296875, 1.0546875, -0.458984375, -3.890625, 3.828125, 3.96875, 0.6171875, 0.1357421875, 7.03125, -0.828125, -0.77734375], [1.09375, 4.40625, 4.78125, -0.77734375, 0.92578125, -4.125, -0.9375, -2.515625, -3.015625, 5.03125, -2.375, -1.59375, 1.09375, 3.890625, 1.4453125, 8.25, -0.2236328125, 0.77734375, 0.828125, 4.3125, 1.5234375, -0.349609375, -2.84375, 0.734375, 4.21875, -1.234375, 1.5859375, 0.73828125, 2.59375, -2.421875, 7.03125, -3.84375], [-1.09375, 2.8125, 0.890625, 2.484375, -1.4921875, -0.224609375, 0.03662109375, 4.71875, 2.078125, 2.390625, -1.9765625, 2.90625, 0.67578125, 4.15625, 6.03125, -0.921875, -1.21875, -2.59375, -0.431640625, -1.1484375, 1.078125, -0.43359375, -1.0859375, 3.1875, -2.8125, 1.296875, -1.21875, 2.171875, 4.15625, -0.91015625, 1.3203125, 0.53515625], [-2.390625, 0.72265625, 0.8671875, 1.2421875, -0.59375, 0.283203125, -3.4375, -1.078125, 1.6640625, 2.671875, -1.265625, 0.314453125, 0.68359375, 0.60546875, 1.625, -5.46875, -0.1484375, 0.71875, -3.0, 5.03125, 0.484375, 4.6875, -2.375, -2.71875, 0.671875, -5.03125, 0.64453125, 0.291015625, 3.046875, 2.109375, -1.25, -3.296875]], "dtype": "bfloat16"}], "outputs": [{"output": [[5.28125, 6.71875, 5.59375, 2.84375, 1.234375, 5.84375, 2.28125, 2.328125, 4.46875, 1.1640625, 1.9609375, 2.59375, 6.8125, 0.1376953125, 4.59375, 1.1328125], [5.34375, 1.390625, 5.65625, 2.90625, 5.84375, 1.203125, 5.78125, 5.59375, 5.71875, 2.40625, 5.6875, 3.53125, 3.15625, 3.984375, 2.9375, 5.5625], [5.78125, 2.84375, 2.53125, 2.03125, 3.5625, 2.765625, 2.578125, 2.046875, 7.15625, 3.34375, 0.0, 5.125, 1.875, 0.15625, 4.625, 0.80078125], [0.189453125, 1.5703125, 2.46875, 6.5, 1.25, 3.296875, 4.46875, 2.03125, 0.83984375, 2.734375, 2.359375, 3.453125, 1.140625, 6.78125, 0.42578125, 2.078125], [3.90625, 1.828125, 6.90625, 3.40625, 1.75, 1.5703125, 4.96875, 1.1953125, 5.875, 0.0, 2.078125, 6.1875, 3.0625, 4.59375, 1.828125, 3.640625], [4.09375, 0.82421875, 0.0, 6.78125, 2.828125, 2.796875, 2.3125, 1.8203125, 1.3515625, 4.96875, 3.203125, 1.484375, 1.9296875, 2.640625, 1.734375, 0.0], [1.109375, 5.15625, 4.9375, 1.703125, 0.28125, 2.828125, 3.421875, 4.40625, 2.609375, 2.296875, 2.46875, 2.4375, 0.0, 2.40625, 2.625, 5.1875], [3.09375, 2.453125, 2.59375, 6.0625, 0.66015625, 0.59765625, 3.890625, 8.0625, 7.25, 0.0, 1.1484375, 3.28125, 0.0, 5.21875, 3.953125, 4.125], [0.0, 3.234375, 3.546875, 5.21875, 2.828125, 3.890625, 0.7265625, 4.25, 6.03125, 1.203125, 3.671875, 1.8515625, 1.578125, 1.359375, 2.296875, 4.5625], [0.345703125, 3.40625, 2.6875, 2.359375, 0.98828125, 3.859375, 2.03125, 1.6328125, 0.0, 5.0, 0.0, 0.0, 1.3984375, 1.2109375, 0.7578125, 4.09375], [4.09375, 3.109375, 3.046875, 4.28125, 4.65625, 2.609375, 1.5625, 6.34375, 7.15625, 2.84375, 0.0, 3.265625, 0.0, 3.25, 1.1328125, 3.28125], [6.40625, 2.8125, 3.796875, 5.25, 1.6640625, 3.984375, 0.91015625, 3.0625, 5.09375, 2.46875, 2.015625, 3.734375, 2.4375, 2.171875, 2.15625, 7.5], [5.5625, 0.06396484375, 2.828125, 1.4921875, 0.0, 1.9375, 4.46875, 5.21875, 5.03125, 1.5859375, 0.034423828125, 0.0, 3.9375, 6.6875, 4.125, 2.984375], [0.68359375, 2.609375, 2.59375, 3.25, 0.71875, 6.40625, 1.21875, 2.265625, 3.984375, 0.1796875, 0.0, 2.8125, 0.8125, 1.4140625, 3.46875, 6.0], [4.40625, 7.78125, 0.92578125, 1.1015625, 5.46875, 0.0, 3.984375, 8.25, 3.09375, 4.3125, 1.5234375, 1.0546875, 4.21875, 3.96875, 7.03125, 7.03125], [2.8125, 2.484375, 0.283203125, 4.71875, 2.671875, 2.90625, 4.15625, 6.03125, 0.71875, 5.03125, 4.6875, 3.1875, 1.296875, 2.171875, 4.15625, 1.3203125]], "dtype": "bfloat16"}]}}
{"kernel_name": "maxpool2d_relu_int8", "prompt": "/*\nThis AIE kernel performs 2D max pooling with a 2x2 window and stride=2 on a 16x16 input int8 tensor. After max-pooling, ReLU is applied (all negative values are set to zero). The result is written to a 8x8 output tensor.\n>>> maxpool2d_relu_int8([[44, -118, -1, 12], [-61, 51, -50, 26], [-119, 36, -12, -20], [-92, 55, -123, -16]])\n[[51, 26], [55, 0]]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\noutput size: 64\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid maxpool2d_relu_int8(int8_t *input, int8_t *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t ROWS = 16;\n    constexpr int32_t COLS = 16;\n    constexpr int32_t WINDOW_SIZE = 2;\n    constexpr int32_t STRIDE = 2;\n\n    for (int i = 0; i < ROWS; i += STRIDE) {\n        for (int j = 0; j < COLS; j += STRIDE) {\n            int8_t max_val = input[i * COLS + j];\n            for (int wi = 0; wi < WINDOW_SIZE; wi++) {\n                for (int wj = 0; wj < WINDOW_SIZE; wj++) {\n                    int row_idx = i + wi;\n                    int col_idx = j + wj;\n                    if (row_idx < ROWS && col_idx < COLS) {\n                        int8_t val = input[row_idx * COLS + col_idx];\n                        if (val > max_val) {\n                            max_val = val;\n                        }\n                    }\n                }\n            }\n            if (max_val < 0) max_val = 0;\n            output[(i / STRIDE) * (COLS / STRIDE) + (j / STRIDE)] = max_val;\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void maxpool2d_relu_int8_wrapper(int8_t *input, int8_t *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        maxpool2d_relu_int8(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [[44, -118, -1, 12, -81, 42, 68, 23, -11, 38, -106, 55, 64, 76, -95, 88], [-61, 51, -50, 26, 123, -46, 34, 91, 67, -10, -3, 11, -25, -3, 101, 88], [-119, 36, -12, -20, 83, 94, 33, 31, -107, -47, -39, 37, 114, 86, -26, -30], [-92, 55, -123, -16, -41, -70, -85, -52, -58, -68, -53, 100, 88, 61, 4, -114], [-40, 26, 50, 118, 12, 77, 76, -59, -70, -71, -87, -30, 65, -62, -56, -6], [102, -3, 46, 74, -89, -54, 106, 79, -41, 40, -27, 7, 46, 72, 95, -6], [-40, -34, -21, 17, -47, 11, 13, -28, 37, 102, 115, 108, -103, -62, -119, 86], [-51, -21, -81, -110, -56, 24, -33, -42, -119, -101, -50, -106, 20, 23, 110, 37], [-13, -120, -83, -123, 80, -109, -59, -34, 115, 18, -90, 85, 69, -98, -120, 117], [126, -57, -75, 71, -49, -121, 110, -93, 47, -99, 57, 94, 64, -119, 62, 94], [-46, 59, 6, 122, -29, -32, -66, -7, 88, 39, 21, 76, 49, -4, -120, 77], [115, 2, -93, -10, -99, -125, -66, 5, 19, 66, 80, 71, 19, -116, 75, 45], [14, -69, -57, -98, 39, -31, -5, 56, -96, 93, 81, 35, 65, -65, 127, 20], [-119, 77, 50, -92, 57, -54, 17, 9, -1, 82, 85, 113, -96, 34, -76, 66], [-97, 90, 23, 5, 74, 66, -100, -101, 116, -56, -89, -22, 23, 96, -67, -7], [35, 106, 57, -61, 126, -7, 51, -81, 75, -83, -76, 70, -14, 43, 38, 60]], "dtype": "int8"}], "outputs": [{"output": [[51, 26, 123, 91, 67, 55, 76, 101], [55, 0, 94, 33, 0, 100, 114, 4], [102, 118, 77, 106, 40, 7, 72, 95], [0, 17, 24, 13, 102, 115, 23, 110], [126, 71, 80, 110, 115, 94, 69, 117], [115, 122, 0, 5, 88, 80, 49, 77], [77, 50, 57, 56, 93, 113, 65, 127], [106, 57, 126, 51, 116, 70, 96, 60]], "dtype": "int8"}]}}
{"kernel_name": "mish_bfloat16", "prompt": "/*\nThis AIE kernel computes the elementwise Mish activation, Mish(x) = x * tanh(ln(1 + exp(x))), for a bfloat16 input vector of length 256, storing results in the bfloat16 output buffer.\n>>> mish_bfloat16([6.75, -1.8671875, 0.130859375, 1.6328125, -3.15625, 0.00823974609375, -0.0035552978515625, -7.03125])\n[6.75, -0.265625, 0.083984375, 1.546875, -0.130859375, 0.00494384765625, -0.0021209716796875, -0.0062255859375]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid mish_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n    const float LOG2E = 1.44269504f;   // log2(e)\n    const float LN2   = 0.69314718f;   // ln(2)\n    const float C1    = LN2;           // exp approx 1st-order\n    const float C2    = 0.24022651f;   // exp approx 2nd-order\n\n    for (int i = 0; i < N; ++i) {\n        float x = float(input[i]);\n\n        // --- softplus: ln(1 + exp(x)) ---\n        float sp;\n        if (x > 16.0f) {\n            sp = x;\n        } else if (x < -16.0f) {\n            // exp_approx(x):\n            {\n                float xl = x * LOG2E;\n                int   ip = int(xl);\n                float fp = xl - float(ip);\n                unsigned bits = unsigned(ip + 127) << 23;\n                union { unsigned u; float f; } pun; pun.u = bits;\n                float p2i = pun.f;\n                float p2f = 1.0f + C1 * fp + C2 * fp * fp;\n                sp = p2i * p2f;\n            }\n        } else if (x > 0.0f) {\n            // ln(1+e^x) = x + ln1p(e^{-x})\n            float z;\n            // exp_approx(-x):\n            {\n                float xl = -x * LOG2E;\n                int   ip = int(xl);\n                float fp = xl - float(ip);\n                unsigned bits = unsigned(ip + 127) << 23;\n                union { unsigned u; float f; } pun; pun.u = bits;\n                float p2i = pun.f;\n                float p2f = 1.0f + C1 * fp + C2 * fp * fp;\n                z = p2i * p2f;\n            }\n            // ln1p_poly(z): \u2248 z*(1 \u2013 z*(\u00bd \u2013 z/3))\n            sp = x + z * (1.0f - z * (0.5f - z * (1.0f/3.0f)));\n        } else {\n            // ln(1+e^x) for x<=0: ln1p(e^x)\n            float z;\n            // exp_approx(x):\n            {\n                float xl = x * LOG2E;\n                int   ip = int(xl);\n                float fp = xl - float(ip);\n                unsigned bits = unsigned(ip + 127) << 23;\n                union { unsigned u; float f; } pun; pun.u = bits;\n                float p2i = pun.f;\n                float p2f = 1.0f + C1 * fp + C2 * fp * fp;\n                z = p2i * p2f;\n            }\n            sp = z * (1.0f - z * (0.5f - z * (1.0f/3.0f)));\n        }\n\n        // --- tanh(sp) via rational approx ---\n        float tanh_sp;\n        if (sp > 4.97f) {\n            tanh_sp = 1.0f;\n        } else {\n            float y2  = sp * sp;\n            float num = sp * (135135.0f\n                           + y2 * (17325.0f\n                           + y2 * (378.0f\n                           + y2)));\n            float den = 135135.0f\n                      + y2 * (62370.0f\n                      + y2 * (3150.0f\n                      + y2 * 28.0f));\n            tanh_sp = num / den;\n        }\n\n        // --- output Mish ---\n        output[i] = bfloat16(x * tanh_sp);\n    }\n}", "program_code": "extern \"C\" {\n    void mish_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        mish_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [6.75, -1.8671875, 0.130859375, 1.6328125, -3.15625, 0.00823974609375, -0.0035552978515625, -7.03125, 4.0625, 2.40625, -2.5, -0.6875, 2.015625, -1.046875, -0.97265625, -5.8125, 2.21875, 0.49609375, 1.1015625, -6.09375, 6.59375, 0.6171875, -1.546875, 8.125, -0.181640625, -5.8125, -1.6171875, -9.125, 4.1875, -1.6640625, -2.96875, 4.28125, -6.59375, 2.140625, -8.25, -2.65625, -4.8125, 5.84375, 7.0625, -1.3203125, 3.359375, -0.71875, 2.265625, -3.015625, -6.84375, -7.21875, 1.53125, 9.0, 1.078125, -2.09375, 7.65625, 0.94921875, 0.40625, 1.0078125, -0.53125, -1.234375, -5.75, 2.0, -0.37890625, 4.78125, -1.4765625, -7.625, -0.3984375, 6.8125, -1.53125, -3.5625, -4.78125, -4.1875, -1.203125, -4.71875, 6.0, -1.1328125, 0.435546875, 5.75, 6.0, -0.8515625, 1.328125, 2.9375, -0.76953125, -7.125, 2.625, 3.578125, 1.6640625, -3.6875, -0.78515625, -2.359375, -1.1953125, 5.1875, 6.125, 2.671875, 2.1875, 2.703125, -0.049072265625, -0.302734375, -2.6875, -0.2236328125, 9.0625, 3.46875, -1.3671875, -1.890625, -3.453125, 1.5, 1.5625, -5.78125, 1.9453125, -2.28125, 5.71875, 0.62890625, 6.875, -1.8359375, -1.1484375, 1.203125, 4.21875, 2.265625, -4.9375, 0.73046875, 0.0888671875, -1.71875, -2.59375, 7.0, -1.5625, -3.390625, 2.546875, 0.5234375, -0.302734375, 3.125, 1.953125, 1.4453125, 3.859375, 1.1328125, -2.46875, -1.4453125, -2.078125, 0.83984375, -4.3125, -7.34375, 0.353515625, -5.34375, -7.8125, 1.4921875, -2.84375, 1.984375, -2.125, -4.5, -4.96875, -2.0625, -1.09375, -3.296875, -1.125, -6.15625, 0.057861328125, -7.1875, -0.77734375, 2.796875, 4.375, 6.84375, -6.21875, 3.03125, 4.8125, 3.921875, -3.71875, 1.6484375, 7.4375, -6.0, 1.90625, 4.4375, -2.78125, 2.328125, -4.28125, -3.25, -3.265625, 0.76953125, -0.36328125, 3.8125, -3.765625, -0.5234375, 3.84375, 2.25, -5.3125, 2.65625, -1.9140625, 1.5390625, 1.203125, 4.875, 0.466796875, -7.40625, -5.46875, 2.921875, -1.03125, 4.5625, 1.09375, -3.0, 4.34375, -3.234375, -8.1875, 8.25, -7.65625, 2.546875, 3.75, 0.58984375, -6.71875, 4.0625, -5.78125, -5.375, -1.4453125, 3.15625, 1.203125, 3.25, -1.7734375, -0.6875, -4.5625, -1.265625, 2.375, -1.203125, 1.8984375, -2.296875, -2.375, 0.15625, -0.78125, 2.375, 0.71484375, 6.96875, -0.87890625, -0.91015625, -4.15625, 0.09130859375, 2.734375, -2.96875, -0.1982421875, 2.875, -0.5078125, -2.078125, 3.890625, 0.388671875, 1.5859375, 4.6875, 4.59375, -1.390625, -2.109375, 1.140625, -0.53125, -7.59375, 5.09375, 0.07763671875, 2.953125, -4.6875, 5.15625, -2.359375, -0.431640625, -5.59375, -0.66796875, -0.91796875, -0.7421875, 1.7578125, 0.2412109375, 3.90625], "dtype": "bfloat16"}], "outputs": [{"output": [6.75, -0.265625, 0.083984375, 1.546875, -0.130859375, 0.00494384765625, -0.0021209716796875, -0.0062255859375, 4.0625, 2.375, -0.1962890625, -0.265625, 1.9609375, -0.306640625, -0.3046875, -0.017333984375, 2.171875, 0.37109375, 0.97265625, -0.01373291015625, 6.59375, 0.482421875, -0.296875, 8.125, -0.09814453125, -0.017333984375, -0.2890625, -0.0009918212890625, 4.1875, -0.28515625, -0.1484375, 4.28125, -0.009033203125, 2.09375, -0.0021514892578125, -0.1806640625, -0.038818359375, 5.84375, 7.0625, -0.30859375, 3.34375, -0.271484375, 2.21875, -0.14453125, -0.00732421875, -0.005279541015625, 1.4375, 9.0, 0.94921875, -0.2421875, 7.65625, 0.8125, 0.294921875, 0.875, -0.2294921875, -0.30859375, -0.018310546875, 1.9453125, -0.1806640625, 4.78125, -0.30078125, -0.00372314453125, -0.189453125, 6.8125, -0.294921875, -0.099609375, -0.039794921875, -0.06298828125, -0.310546875, -0.041748046875, 6.0, -0.306640625, 0.3203125, 5.75, 6.0, -0.291015625, 1.2109375, 2.921875, -0.279296875, -0.0057373046875, 2.609375, 3.578125, 1.578125, -0.0908203125, -0.28125, -0.2119140625, -0.30859375, 5.1875, 6.125, 2.65625, 2.140625, 2.6875, -0.028564453125, -0.15234375, -0.17578125, -0.11865234375, 9.0625, 3.46875, -0.3046875, -0.263671875, -0.10791015625, 1.40625, 1.46875, -0.017822265625, 1.8828125, -0.220703125, 5.71875, 0.494140625, 6.875, -0.26953125, -0.30859375, 1.078125, 4.21875, 2.21875, -0.03515625, 0.58984375, 0.055908203125, -0.28125, -0.1875, 7.0, -0.294921875, -0.11279296875, 2.515625, 0.396484375, -0.15234375, 3.109375, 1.890625, 1.34375, 3.859375, 1.0078125, -0.2001953125, -0.30078125, -0.2431640625, 0.703125, -0.0576171875, -0.0047607421875, 0.25, -0.025634765625, -0.0031585693359375, 1.390625, -0.16015625, 1.9296875, -0.23828125, -0.0498046875, -0.034423828125, -0.24609375, -0.30859375, -0.1201171875, -0.30859375, -0.0130615234375, 0.03564453125, -0.00543212890625, -0.279296875, 2.78125, 4.375, 6.84375, -0.012451171875, 3.015625, 4.8125, 3.921875, -0.08935546875, 1.5625, 7.4375, -0.01483154296875, 1.84375, 4.4375, -0.1669921875, 2.296875, -0.058837890625, -0.1240234375, -0.1220703125, 0.62890625, -0.1748046875, 3.8125, -0.08642578125, -0.2275390625, 3.84375, 2.203125, -0.0262451171875, 2.640625, -0.26171875, 1.4453125, 1.078125, 4.875, 0.345703125, -0.004486083984375, -0.0230712890625, 2.90625, -0.3046875, 4.5625, 0.96484375, -0.1455078125, 4.34375, -0.125, -0.0022735595703125, 8.25, -0.0036163330078125, 2.515625, 3.75, 0.45703125, -0.00811767578125, 4.0625, -0.017822265625, -0.02490234375, -0.30078125, 3.140625, 1.078125, 3.234375, -0.27734375, -0.265625, -0.04736328125, -0.30859375, 2.34375, -0.310546875, 1.828125, -0.21875, -0.2109375, 0.1015625, -0.28125, 2.34375, 0.57421875, 6.96875, -0.29296875, -0.296875, -0.064453125, 0.057373046875, 2.71875, -0.1484375, -0.10595703125, 2.859375, -0.2236328125, -0.2431640625, 3.890625, 0.279296875, 1.5, 4.6875, 4.59375, -0.3046875, -0.240234375, 1.015625, -0.2294921875, -0.0038299560546875, 5.09375, 0.048583984375, 2.9375, -0.04296875, 5.15625, -0.2119140625, -0.2001953125, -0.0208740234375, -0.26171875, -0.296875, -0.275390625, 1.6796875, 0.1630859375, 3.90625], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "mse_loss_bfloat16", "prompt": "/*\nThis AIE kernel computes the mean squared error (MSE) between two bfloat16 input vectors (length 256), returning the result as a single bfloat16.\n>>> mse_loss_bfloat16([3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375], [-1.453125, -2.765625, -3.171875, 1.21875, -2.375, -1.015625, -1.1953125, -0.10498046875])\n[15.3125]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_a size: 256\ninput_b size: 256\noutput size: 1\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid mse_loss_bfloat16(bfloat16 *input_a, bfloat16 *input_b, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n    float acc = 0.0f;\n    for (int i = 0; i < N; i++) {\n        float a = (float)input_a[i];\n        float b = (float)input_b[i];\n        float diff = a - b;\n        acc += diff * diff;\n    }\n    float mse = acc / N;\n    *output = (bfloat16)mse;\n}", "program_code": "extern \"C\" {\n    void mse_loss_bfloat16_wrapper(bfloat16 *input_a, bfloat16 *input_b, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        mse_loss_bfloat16(input_a, input_b, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_a": [3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375, -0.2060546875, 0.8203125, 0.2890625, 2.90625, 1.5234375, 0.2431640625, 0.88671875, 0.66796875, 2.984375, -0.41015625, 0.625, -1.7109375, -5.09375, 1.3046875, 1.7265625, -1.484375, 4.53125, -2.90625, 0.09130859375, -0.375, 3.0625, 2.9375, 0.310546875, 0.7578125, -1.7734375, -3.96875, -0.6953125, 0.3125, 2.453125, 2.40625, -0.7734375, -0.60546875, -2.09375, -2.84375, -3.40625, 3.90625, -1.015625, -0.875, -2.5, 1.5546875, -3.234375, -0.42578125, -1.7890625, 0.7734375, -1.0234375, -2.359375, -0.056396484375, 0.85546875, 0.1328125, 0.60546875, -1.265625, -0.7265625, -1.34375, -0.71875, -1.625, -3.453125, 0.35546875, -0.8046875, -3.265625, 0.92578125, -1.8125, 0.10400390625, 1.4609375, 0.2578125, 2.28125, -2.46875, 0.8046875, -1.3671875, -1.7421875, -1.15625, -0.625, 0.1123046875, -2.328125, 1.8046875, 0.9296875, -3.078125, 2.96875, 3.796875, 2.359375, -0.359375, -2.140625, 2.109375, -0.8046875, 2.4375, 0.416015625, 1.953125, 0.7109375, 1.4140625, 0.02099609375, 3.578125, 0.25390625, 0.8046875, 3.765625, -2.703125, -2.546875, 1.9375, -2.34375, 3.890625, -0.828125, -1.4921875, 3.84375, 2.96875, 3.734375, 1.8125, -1.71875, 3.8125, -0.53515625, 1.6015625, 1.890625, -0.310546875, 1.2265625, 1.84375, 0.75390625, -2.203125, 0.59765625, 2.65625, -1.390625, -0.298828125, -0.87109375, 3.703125, 1.34375, 0.81640625, -1.5390625, 1.078125, -1.3515625, 0.0634765625, -1.2734375, 1.3515625, 1.15625, -0.416015625, 0.79296875, -2.1875, -2.984375, 0.87890625, 0.333984375, 1.2734375, 4.78125, 1.890625, -1.828125, 2.234375, -2.625, -0.921875, -0.13671875, 3.421875, -1.4921875, -1.65625, -0.197265625, -1.328125, 2.25, -2.15625, -2.296875, -0.875, -0.99609375, 3.859375, 1.8984375, 0.1748046875, -2.453125, 1.6875, -2.0, -3.09375, 2.375, 0.6328125, 1.84375, 0.63671875, 1.7109375, -1.3046875, -2.0625, 1.359375, -1.609375, -1.3828125, -0.91015625, 0.034912109375, -0.70703125, -2.75, -1.2890625, -4.4375, 1.25, -3.203125, -2.203125, 0.1044921875, -1.4765625, 3.09375, -2.578125, 0.53515625, -0.07861328125, -2.34375, 1.046875, -0.34375, 1.546875, 1.6484375, 4.3125, 2.671875, -0.73828125, -0.478515625, 2.203125, 1.3125, 1.28125, -3.234375, -0.048583984375, -1.4765625, 0.55859375, -0.1962890625, 1.8203125, 0.6328125, 1.5703125, -0.93359375, -1.890625, -0.8203125, -0.033935546875, 0.7578125, 4.53125, -0.08447265625, -1.9140625, -0.69140625, -0.92578125, 0.96484375, -3.078125, 0.126953125, 0.3125, 0.46484375, -1.1953125, -0.4765625, -2.84375, -0.98828125, -1.0859375, 0.83203125, -2.3125, 1.5625, 2.984375, -4.125, 0.8515625, 1.3515625, -1.2734375, -0.79296875, -0.265625, -0.59375, -0.6171875, -3.359375, 2.296875, 2.15625, -1.625, -2.9375, 1.0390625, -1.1484375, 0.283203125, -0.63671875, 1.3828125, 1.390625], "dtype": "bfloat16"}, {"input_b": [-1.453125, -2.765625, -3.171875, 1.21875, -2.375, -1.015625, -1.1953125, -0.10498046875, -3.875, 0.376953125, 1.046875, 0.1767578125, -0.62109375, 0.1943359375, 0.796875, -5.53125, 3.90625, 0.78125, -1.3046875, -0.78125, 0.98828125, -0.232421875, -4.0625, 4.125, -0.220703125, 2.046875, -1.3828125, 3.078125, 0.57421875, 1.21875, -2.09375, 2.421875, 1.3828125, 2.609375, -1.2578125, -0.9609375, 4.59375, -2.125, -0.271484375, 2.28125, 0.1953125, 1.1640625, -0.80078125, 0.73828125, -2.609375, 3.3125, -0.236328125, -1.359375, 1.3359375, -0.921875, -2.671875, -2.6875, 1.390625, -0.318359375, -0.267578125, 2.15625, -2.25, -1.4609375, -0.76953125, 0.1884765625, -0.08447265625, -0.57421875, -0.123046875, -0.21484375, -1.4375, -1.625, 0.55078125, -1.78125, -2.3125, -0.625, -0.314453125, 4.5, -1.40625, 1.8828125, 1.4921875, -2.375, 1.546875, -2.375, -5.3125, 1.2109375, -3.515625, 0.90234375, -1.3671875, 3.3125, 2.140625, -0.90625, -1.375, -2.421875, -0.8828125, -0.5625, -0.73046875, 0.3125, 1.15625, 0.69921875, -1.53125, -2.875, 2.734375, -1.375, -1.3046875, -1.0390625, -3.6875, -0.95703125, -0.9609375, 1.2421875, 1.3984375, 0.007537841796875, 1.8671875, 0.6796875, -0.03125, 0.322265625, -0.380859375, -0.7890625, -0.53515625, -2.25, 0.5625, -1.984375, 1.6796875, -0.498046875, 0.09912109375, 0.98828125, 1.2890625, -3.140625, -0.4140625, 1.7578125, -3.390625, 0.7734375, -4.5, -2.046875, 0.0771484375, -3.3125, -1.96875, -2.9375, 3.296875, 0.328125, 1.1328125, -0.4453125, -0.70703125, -3.234375, -0.58203125, -1.5234375, 1.71875, 2.28125, 2.9375, 1.703125, -1.1953125, -2.234375, 1.53125, 0.7109375, -3.53125, 0.7109375, 1.6328125, 0.11767578125, -0.369140625, -1.6171875, -2.890625, 1.6015625, -0.6171875, -0.466796875, 3.46875, 1.3671875, 0.7421875, 0.283203125, 3.046875, 3.4375, 1.859375, 1.1640625, -4.1875, 0.2470703125, -0.259765625, 0.1875, 1.8828125, -5.46875, -1.140625, 0.5390625, -0.93359375, -2.828125, 1.734375, 0.5546875, -1.9453125, 0.62890625, 1.640625, 0.01055908203125, 1.6015625, 0.15625, -0.7890625, -2.3125, -0.171875, 0.388671875, 1.75, -0.23046875, 0.9140625, -1.9296875, -1.5625, -0.220703125, -2.109375, 1.640625, 0.92578125, 0.55859375, 0.6796875, 4.03125, -0.9375, -4.40625, 0.3984375, -0.10107421875, -1.03125, -1.9609375, -0.87890625, 0.36328125, -1.0078125, 4.8125, -1.921875, -1.5859375, -4.5625, 0.50390625, -4.03125, -1.078125, -0.55078125, -1.421875, 3.484375, 1.9921875, 2.640625, -1.765625, 2.25, 0.9921875, 1.5390625, 2.0625, -1.8203125, -0.84765625, 1.7265625, -5.3125, 3.03125, 1.109375, -0.09130859375, 0.44140625, -2.0625, -0.69921875, 2.203125, 2.59375, 5.40625, -0.1474609375, -1.3203125, -1.03125, -2.03125, -0.1552734375, 0.765625, -0.068359375, 2.1875, -0.46875, -0.6953125, -1.1640625, -3.265625, -3.140625, -2.359375, 2.609375, 1.7890625, 2.75], "dtype": "bfloat16"}], "outputs": [{"output": [8.1875], "dtype": "bfloat16"}]}}
{"kernel_name": "negate_bfloat16", "prompt": "/*\nA kernel that negates each element of a bfloat16 input vector and writes the result to an output vector.\n>>> negate_bfloat16([7.0625, 1.6015625, 3.921875, 8.9375, 7.46875, -3.90625, 3.796875, -0.60546875])\n[-7.0625, -1.6015625, -3.921875, -8.9375, -7.46875, 3.90625, -3.796875, 0.60546875]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid negate_bfloat16(bfloat16 *input_vector, bfloat16 *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr uint32_t vector_size = 256;\n    for (uint32_t i = 0; i < vector_size; i++) {\n        output_vector[i] = (bfloat16)(-((float)input_vector[i]));\n    }\n}", "program_code": "extern \"C\" {\n    void negate_bfloat16_wrapper(bfloat16 *input_vector, bfloat16 *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        negate_bfloat16(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [7.0625, 1.6015625, 3.921875, 8.9375, 7.46875, -3.90625, 3.796875, -0.60546875, -0.412109375, 1.640625, 0.578125, 5.8125, 3.046875, 0.486328125, 1.7734375, 1.3359375, 5.96875, -0.8203125, 1.25, -3.421875, -10.1875, 2.609375, 3.453125, -2.96875, 9.0625, -5.8125, 0.1826171875, -0.75, 6.125, 5.875, 0.62109375, 1.515625, -3.546875, -7.9375, -1.390625, 0.625, 4.90625, 4.8125, -1.546875, -1.2109375, -4.1875, -5.6875, -6.8125, 7.8125, -2.03125, -1.75, -5.0, 3.109375, -6.46875, -0.8515625, -3.578125, 1.546875, -2.046875, -4.71875, -0.11279296875, 1.7109375, 0.265625, 1.2109375, -2.53125, -1.453125, -2.6875, -1.4375, -3.25, -6.90625, 0.7109375, -1.609375, -6.53125, 1.8515625, -3.625, 0.2080078125, 2.921875, 0.515625, 4.5625, -4.9375, 1.609375, -2.734375, -3.484375, -2.3125, -1.25, 0.224609375, -4.65625, 3.609375, 1.859375, -6.15625, 5.9375, 7.59375, 4.71875, -0.71875, -4.28125, 4.21875, -1.609375, 4.875, 0.83203125, 3.90625, 1.421875, 2.828125, 0.0419921875, 7.15625, 0.5078125, 1.609375, 7.53125, -5.40625, -5.09375, 3.875, -4.6875, 7.78125, -1.65625, -2.984375, 7.6875, 5.9375, 7.46875, 3.625, -3.4375, 7.625, -1.0703125, 3.203125, 3.78125, -0.62109375, 2.453125, 3.6875, 1.5078125, -4.40625, 1.1953125, 5.3125, -2.78125, -0.59765625, -1.7421875, 7.40625, 2.6875, 1.6328125, -3.078125, 2.15625, -2.703125, 0.126953125, -2.546875, 2.703125, 2.3125, -0.83203125, 1.5859375, -4.375, -5.96875, 1.7578125, 0.66796875, 2.546875, 9.5625, 3.78125, -3.65625, 4.46875, -5.25, -1.84375, -0.2734375, 6.84375, -2.984375, -3.3125, -0.39453125, -2.65625, 4.5, -4.3125, -4.59375, -1.75, -1.9921875, 7.71875, 3.796875, 0.349609375, -4.90625, 3.375, -4.0, -6.1875, 4.75, 1.265625, 3.6875, 1.2734375, 3.421875, -2.609375, -4.125, 2.71875, -3.21875, -2.765625, -1.8203125, 0.06982421875, -1.4140625, -5.5, -2.578125, -8.875, 2.5, -6.40625, -4.40625, 0.208984375, -2.953125, 6.1875, -5.15625, 1.0703125, -0.1572265625, -4.6875, 2.09375, -0.6875, 3.09375, 3.296875, 8.625, 5.34375, -1.4765625, -0.95703125, 4.40625, 2.625, 2.5625, -6.46875, -0.09716796875, -2.953125, 1.1171875, -0.392578125, 3.640625, 1.265625, 3.140625, -1.8671875, -3.78125, -1.640625, -0.06787109375, 1.515625, 9.0625, -0.1689453125, -3.828125, -1.3828125, -1.8515625, 1.9296875, -6.15625, 0.25390625, 0.625, 0.9296875, -2.390625, -0.953125, -5.6875, -1.9765625, -2.171875, 1.6640625, -4.625, 3.125, 5.96875, -8.25, 1.703125, 2.703125, -2.546875, -1.5859375, -0.53125, -1.1875, -1.234375, -6.71875, 4.59375, 4.3125, -3.25, -5.875, 2.078125, -2.296875, 0.56640625, -1.2734375, 2.765625, 2.78125], "dtype": "bfloat16"}], "outputs": [{"output_vector": [-7.0625, -1.6015625, -3.921875, -8.9375, -7.46875, 3.90625, -3.796875, 0.60546875, 0.412109375, -1.640625, -0.578125, -5.8125, -3.046875, -0.486328125, -1.7734375, -1.3359375, -5.96875, 0.8203125, -1.25, 3.421875, 10.1875, -2.609375, -3.453125, 2.96875, -9.0625, 5.8125, -0.1826171875, 0.75, -6.125, -5.875, -0.62109375, -1.515625, 3.546875, 7.9375, 1.390625, -0.625, -4.90625, -4.8125, 1.546875, 1.2109375, 4.1875, 5.6875, 6.8125, -7.8125, 2.03125, 1.75, 5.0, -3.109375, 6.46875, 0.8515625, 3.578125, -1.546875, 2.046875, 4.71875, 0.11279296875, -1.7109375, -0.265625, -1.2109375, 2.53125, 1.453125, 2.6875, 1.4375, 3.25, 6.90625, -0.7109375, 1.609375, 6.53125, -1.8515625, 3.625, -0.2080078125, -2.921875, -0.515625, -4.5625, 4.9375, -1.609375, 2.734375, 3.484375, 2.3125, 1.25, -0.224609375, 4.65625, -3.609375, -1.859375, 6.15625, -5.9375, -7.59375, -4.71875, 0.71875, 4.28125, -4.21875, 1.609375, -4.875, -0.83203125, -3.90625, -1.421875, -2.828125, -0.0419921875, -7.15625, -0.5078125, -1.609375, -7.53125, 5.40625, 5.09375, -3.875, 4.6875, -7.78125, 1.65625, 2.984375, -7.6875, -5.9375, -7.46875, -3.625, 3.4375, -7.625, 1.0703125, -3.203125, -3.78125, 0.62109375, -2.453125, -3.6875, -1.5078125, 4.40625, -1.1953125, -5.3125, 2.78125, 0.59765625, 1.7421875, -7.40625, -2.6875, -1.6328125, 3.078125, -2.15625, 2.703125, -0.126953125, 2.546875, -2.703125, -2.3125, 0.83203125, -1.5859375, 4.375, 5.96875, -1.7578125, -0.66796875, -2.546875, -9.5625, -3.78125, 3.65625, -4.46875, 5.25, 1.84375, 0.2734375, -6.84375, 2.984375, 3.3125, 0.39453125, 2.65625, -4.5, 4.3125, 4.59375, 1.75, 1.9921875, -7.71875, -3.796875, -0.349609375, 4.90625, -3.375, 4.0, 6.1875, -4.75, -1.265625, -3.6875, -1.2734375, -3.421875, 2.609375, 4.125, -2.71875, 3.21875, 2.765625, 1.8203125, -0.06982421875, 1.4140625, 5.5, 2.578125, 8.875, -2.5, 6.40625, 4.40625, -0.208984375, 2.953125, -6.1875, 5.15625, -1.0703125, 0.1572265625, 4.6875, -2.09375, 0.6875, -3.09375, -3.296875, -8.625, -5.34375, 1.4765625, 0.95703125, -4.40625, -2.625, -2.5625, 6.46875, 0.09716796875, 2.953125, -1.1171875, 0.392578125, -3.640625, -1.265625, -3.140625, 1.8671875, 3.78125, 1.640625, 0.06787109375, -1.515625, -9.0625, 0.1689453125, 3.828125, 1.3828125, 1.8515625, -1.9296875, 6.15625, -0.25390625, -0.625, -0.9296875, 2.390625, 0.953125, 5.6875, 1.9765625, 2.171875, -1.6640625, 4.625, -3.125, -5.96875, 8.25, -1.703125, -2.703125, 2.546875, 1.5859375, 0.53125, 1.1875, 1.234375, 6.71875, -4.59375, -4.3125, 3.25, 5.875, -2.078125, 2.296875, -0.56640625, 1.2734375, -2.765625, -2.78125], "dtype": "bfloat16"}]}}
{"kernel_name": "negate_int8", "prompt": "/*\nThis AIE kernel negates each element in a vector of int8_t (length 256). The input is a buffer of 256 int8, and the output buffer receives the elementwise negation.\n>>> negate_int8([44, -118, -1, 12, -81, 42, 68, 23])\n[-44, 118, 1, -12, 81, -42, -68, -23]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid negate_int8(int8_t *input_vector, int8_t *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr uint32_t VECTOR_SIZE = 256;\n    for (uint32_t i = 0; i < VECTOR_SIZE; ++i) {\n        output_vector[i] = -input_vector[i];\n    }\n}", "program_code": "extern \"C\" {\n    void negate_int8_wrapper(int8_t *input_vector, int8_t *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        negate_int8(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [44, -118, -1, 12, -81, 42, 68, 23, -11, 38, -106, 55, 64, 76, -95, 88, -61, 51, -50, 26, 123, -46, 34, 91, 67, -10, -3, 11, -25, -3, 101, 88, -119, 36, -12, -20, 83, 94, 33, 31, -107, -47, -39, 37, 114, 86, -26, -30, -92, 55, -123, -16, -41, -70, -85, -52, -58, -68, -53, 100, 88, 61, 4, -114, -40, 26, 50, 118, 12, 77, 76, -59, -70, -71, -87, -30, 65, -62, -56, -6, 102, -3, 46, 74, -89, -54, 106, 79, -41, 40, -27, 7, 46, 72, 95, -6, -40, -34, -21, 17, -47, 11, 13, -28, 37, 102, 115, 108, -103, -62, -119, 86, -51, -21, -81, -110, -56, 24, -33, -42, -119, -101, -50, -106, 20, 23, 110, 37, -13, -120, -83, -123, 80, -109, -59, -34, 115, 18, -90, 85, 69, -98, -120, 117, 126, -57, -75, 71, -49, -121, 110, -93, 47, -99, 57, 94, 64, -119, 62, 94, -46, 59, 6, 122, -29, -32, -66, -7, 88, 39, 21, 76, 49, -4, -120, 77, 115, 2, -93, -10, -99, -125, -66, 5, 19, 66, 80, 71, 19, -116, 75, 45, 14, -69, -57, -98, 39, -31, -5, 56, -96, 93, 81, 35, 65, -65, 127, 20, -119, 77, 50, -92, 57, -54, 17, 9, -1, 82, 85, 113, -96, 34, -76, 66, -97, 90, 23, 5, 74, 66, -100, -101, 116, -56, -89, -22, 23, 96, -67, -7, 35, 106, 57, -61, 126, -7, 51, -81, 75, -83, -76, 70, -14, 43, 38, 60], "dtype": "int8"}], "outputs": [{"output_vector": [-44, 118, 1, -12, 81, -42, -68, -23, 11, -38, 106, -55, -64, -76, 95, -88, 61, -51, 50, -26, -123, 46, -34, -91, -67, 10, 3, -11, 25, 3, -101, -88, 119, -36, 12, 20, -83, -94, -33, -31, 107, 47, 39, -37, -114, -86, 26, 30, 92, -55, 123, 16, 41, 70, 85, 52, 58, 68, 53, -100, -88, -61, -4, 114, 40, -26, -50, -118, -12, -77, -76, 59, 70, 71, 87, 30, -65, 62, 56, 6, -102, 3, -46, -74, 89, 54, -106, -79, 41, -40, 27, -7, -46, -72, -95, 6, 40, 34, 21, -17, 47, -11, -13, 28, -37, -102, -115, -108, 103, 62, 119, -86, 51, 21, 81, 110, 56, -24, 33, 42, 119, 101, 50, 106, -20, -23, -110, -37, 13, 120, 83, 123, -80, 109, 59, 34, -115, -18, 90, -85, -69, 98, 120, -117, -126, 57, 75, -71, 49, 121, -110, 93, -47, 99, -57, -94, -64, 119, -62, -94, 46, -59, -6, -122, 29, 32, 66, 7, -88, -39, -21, -76, -49, 4, 120, -77, -115, -2, 93, 10, 99, 125, 66, -5, -19, -66, -80, -71, -19, 116, -75, -45, -14, 69, 57, 98, -39, 31, 5, -56, 96, -93, -81, -35, -65, 65, -127, -20, 119, -77, -50, 92, -57, 54, -17, -9, 1, -82, -85, -113, 96, -34, 76, -66, 97, -90, -23, -5, -74, -66, 100, 101, -116, 56, 89, 22, -23, -96, 67, 7, -35, -106, -57, 61, -126, 7, -51, 81, -75, 83, 76, -70, 14, -43, -38, -60], "dtype": "int8"}]}}
{"kernel_name": "pad1d_int32", "prompt": "/*\nA kernel that performs a 1D padding operation on an input vector with given padding size and padding value as runtime parameters.\n>>> pad1d_int32([2, 5, -10, -7, -7, -3, -1, 9], 2, 0)\n[0, 0, 2, 5, -10, -7, -7, -3, -1, 9, 0, 0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\npadded_vector size: 260\npad_size: 2\npad_value: 0\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid pad1d_int32(int32_t *input_vector, int32_t *padded_vector, uint32_t pad_size, int32_t pad_value) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    uint32_t padded_length = vector_size + 2 * pad_size;\n\n    for (uint32_t i = 0; i < padded_length; i++) {\n        padded_vector[i] = pad_value;\n    }\n\n    for (uint32_t i = 0; i < vector_size; i++) {\n        padded_vector[i + pad_size] = input_vector[i];\n    }\n}", "program_code": "extern \"C\" {\n    void pad1d_int32_wrapper(int32_t *input_vector, int32_t *padded_vector, uint32_t pad_size, int32_t pad_value) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        pad1d_int32(input_vector, padded_vector, pad_size, pad_value);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [2, 5, -10, -7, -7, -3, -1, 9, 8, -6, -4, 2, -9, -4, -3, 4, 7, -5, 3, -2, -1, 9, 6, 9, -5, 5, 5, -10, 8, -7, 7, 9, 9, 9, 4, -3, -10, -9, -1, -10, 0, -7, 1, 8, -8, -10, -10, -6, -5, -4, -2, 7, 5, -6, -1, 0, -9, -9, -3, -1, -7, -4, 1, 4, 8, -10, 4, -7, 2, 0, 1, -6, -4, -6, 5, -7, 2, -6, -2, 4, 5, -7, 5, 3, 6, 7, -5, -1, -7, -10, -5, -10, 7, 8, -6, -8, 6, -7, -8, 0, 3, 6, -3, -1, -10, 0, 8, 1, -8, -8, -7, -7, 8, 4, -7, 7, 8, 4, -1, -9, -6, 0, 1, -2, 1, -8, 9, 6, -10, -10, -4, 9, 4, 0, 9, -2, 3, -8, -7, -8, 1, 3, 6, -2, -2, 9, -2, -8, -7, 2, 4, -10, -6, -7, 3, 1, 3, 3, 1, 6, 4, 6, 9, -9, -2, -10, -6, -4, 3, -3, 5, -1, 8, -2, 5, 1, -4, 5, -9, 2, -7, 8, 5, -7, 0, 2, -4, -7, -5, 1, -10, 1, -2, 0, 1, -5, 5, -2, -8, 9, 9, 4, -7, -7, -3, -1, -1, -1, -7, 4, 8, 2, -7, -1, 0, 3, -3, -3, -9, 2, -8, -8, -9, -5, -2, -6, -10, 1, -8, -5, 6, -2, -9, 7, 6, -7, -2, -6, 6, -7, -3, -7, 8, 7, -9, 8, 7, -8, -5, -5, 2, 2, -8, 5, -3, -3], "dtype": "int32"}], "outputs": [{"padded_vector": [0, 0, 2, 5, -10, -7, -7, -3, -1, 9, 8, -6, -4, 2, -9, -4, -3, 4, 7, -5, 3, -2, -1, 9, 6, 9, -5, 5, 5, -10, 8, -7, 7, 9, 9, 9, 4, -3, -10, -9, -1, -10, 0, -7, 1, 8, -8, -10, -10, -6, -5, -4, -2, 7, 5, -6, -1, 0, -9, -9, -3, -1, -7, -4, 1, 4, 8, -10, 4, -7, 2, 0, 1, -6, -4, -6, 5, -7, 2, -6, -2, 4, 5, -7, 5, 3, 6, 7, -5, -1, -7, -10, -5, -10, 7, 8, -6, -8, 6, -7, -8, 0, 3, 6, -3, -1, -10, 0, 8, 1, -8, -8, -7, -7, 8, 4, -7, 7, 8, 4, -1, -9, -6, 0, 1, -2, 1, -8, 9, 6, -10, -10, -4, 9, 4, 0, 9, -2, 3, -8, -7, -8, 1, 3, 6, -2, -2, 9, -2, -8, -7, 2, 4, -10, -6, -7, 3, 1, 3, 3, 1, 6, 4, 6, 9, -9, -2, -10, -6, -4, 3, -3, 5, -1, 8, -2, 5, 1, -4, 5, -9, 2, -7, 8, 5, -7, 0, 2, -4, -7, -5, 1, -10, 1, -2, 0, 1, -5, 5, -2, -8, 9, 9, 4, -7, -7, -3, -1, -1, -1, -7, 4, 8, 2, -7, -1, 0, 3, -3, -3, -9, 2, -8, -8, -9, -5, -2, -6, -10, 1, -8, -5, 6, -2, -9, 7, 6, -7, -2, -6, 6, -7, -3, -7, 8, 7, -9, 8, 7, -8, -5, -5, 2, 2, -8, 5, -3, -3, 0, 0], "dtype": "int32"}], "rtps": [{"pad_size": 2, "dtype": "uint32"}, {"pad_value": 0, "dtype": "int32"}]}}
{"kernel_name": "pad2d_int32", "prompt": "/*\nA kernel that performs a 2D padding operation on an input matrix with given padding size and padding value as runtime parameters.\n>>> pad2d_int32([[2, 5, -10, -7], [7, -5, 3, -2], [9, 9, 4, -3], [-5, -4, -2, 7]], 2, 0)\n[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 5, -10, -7, 0, 0], [0, 0, 7, -5, 3, -2, 0, 0], [0, 0, 9, 9, 4, -3, 0, 0], [0, 0, -5, -4, -2, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_matrix size: 256\npadded_matrix size: 400\npad_size: 2\npad_value: 0\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid pad2d_int32(int32_t *input_matrix, int32_t *padded_matrix, uint32_t pad_size, int32_t pad_value) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr uint32_t input_rows = 16;\n    constexpr uint32_t input_cols = 16;\n    uint32_t padded_rows = input_rows + 2 * pad_size;\n    uint32_t padded_cols = input_cols + 2 * pad_size;\n\n    for (uint32_t i = 0; i < padded_rows; i++) {\n        for (uint32_t j = 0; j < padded_cols; j++) {\n            padded_matrix[i * padded_cols + j] = pad_value;\n        }\n    }\n\n    for (uint32_t i = 0; i < input_rows; i++) {\n        for (uint32_t j = 0; j < input_cols; j++) {\n            padded_matrix[(i + pad_size) * padded_cols + (j + pad_size)] = input_matrix[i * input_cols + j];\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void pad2d_int32_wrapper(int32_t *input_matrix, int32_t *padded_matrix, uint32_t pad_size, int32_t pad_value) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        pad2d_int32(input_matrix, padded_matrix, pad_size, pad_value);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_matrix": [[2, 5, -10, -7, -7, -3, -1, 9, 8, -6, -4, 2, -9, -4, -3, 4], [7, -5, 3, -2, -1, 9, 6, 9, -5, 5, 5, -10, 8, -7, 7, 9], [9, 9, 4, -3, -10, -9, -1, -10, 0, -7, 1, 8, -8, -10, -10, -6], [-5, -4, -2, 7, 5, -6, -1, 0, -9, -9, -3, -1, -7, -4, 1, 4], [8, -10, 4, -7, 2, 0, 1, -6, -4, -6, 5, -7, 2, -6, -2, 4], [5, -7, 5, 3, 6, 7, -5, -1, -7, -10, -5, -10, 7, 8, -6, -8], [6, -7, -8, 0, 3, 6, -3, -1, -10, 0, 8, 1, -8, -8, -7, -7], [8, 4, -7, 7, 8, 4, -1, -9, -6, 0, 1, -2, 1, -8, 9, 6], [-10, -10, -4, 9, 4, 0, 9, -2, 3, -8, -7, -8, 1, 3, 6, -2], [-2, 9, -2, -8, -7, 2, 4, -10, -6, -7, 3, 1, 3, 3, 1, 6], [4, 6, 9, -9, -2, -10, -6, -4, 3, -3, 5, -1, 8, -2, 5, 1], [-4, 5, -9, 2, -7, 8, 5, -7, 0, 2, -4, -7, -5, 1, -10, 1], [-2, 0, 1, -5, 5, -2, -8, 9, 9, 4, -7, -7, -3, -1, -1, -1], [-7, 4, 8, 2, -7, -1, 0, 3, -3, -3, -9, 2, -8, -8, -9, -5], [-2, -6, -10, 1, -8, -5, 6, -2, -9, 7, 6, -7, -2, -6, 6, -7], [-3, -7, 8, 7, -9, 8, 7, -8, -5, -5, 2, 2, -8, 5, -3, -3]], "dtype": "int32"}], "outputs": [{"padded_matrix": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 5, -10, -7, -7, -3, -1, 9, 8, -6, -4, 2, -9, -4, -3, 4, 0, 0], [0, 0, 7, -5, 3, -2, -1, 9, 6, 9, -5, 5, 5, -10, 8, -7, 7, 9, 0, 0], [0, 0, 9, 9, 4, -3, -10, -9, -1, -10, 0, -7, 1, 8, -8, -10, -10, -6, 0, 0], [0, 0, -5, -4, -2, 7, 5, -6, -1, 0, -9, -9, -3, -1, -7, -4, 1, 4, 0, 0], [0, 0, 8, -10, 4, -7, 2, 0, 1, -6, -4, -6, 5, -7, 2, -6, -2, 4, 0, 0], [0, 0, 5, -7, 5, 3, 6, 7, -5, -1, -7, -10, -5, -10, 7, 8, -6, -8, 0, 0], [0, 0, 6, -7, -8, 0, 3, 6, -3, -1, -10, 0, 8, 1, -8, -8, -7, -7, 0, 0], [0, 0, 8, 4, -7, 7, 8, 4, -1, -9, -6, 0, 1, -2, 1, -8, 9, 6, 0, 0], [0, 0, -10, -10, -4, 9, 4, 0, 9, -2, 3, -8, -7, -8, 1, 3, 6, -2, 0, 0], [0, 0, -2, 9, -2, -8, -7, 2, 4, -10, -6, -7, 3, 1, 3, 3, 1, 6, 0, 0], [0, 0, 4, 6, 9, -9, -2, -10, -6, -4, 3, -3, 5, -1, 8, -2, 5, 1, 0, 0], [0, 0, -4, 5, -9, 2, -7, 8, 5, -7, 0, 2, -4, -7, -5, 1, -10, 1, 0, 0], [0, 0, -2, 0, 1, -5, 5, -2, -8, 9, 9, 4, -7, -7, -3, -1, -1, -1, 0, 0], [0, 0, -7, 4, 8, 2, -7, -1, 0, 3, -3, -3, -9, 2, -8, -8, -9, -5, 0, 0], [0, 0, -2, -6, -10, 1, -8, -5, 6, -2, -9, 7, 6, -7, -2, -6, 6, -7, 0, 0], [0, 0, -3, -7, 8, 7, -9, 8, 7, -8, -5, -5, 2, 2, -8, 5, -3, -3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "dtype": "int32"}], "rtps": [{"pad_size": 2, "dtype": "uint32"}, {"pad_value": 0, "dtype": "int32"}]}}
{"kernel_name": "reciprocal_bfloat16", "prompt": "/*\nThis AIE kernel computes the elementwise reciprocal (1/x) of a bfloat16 input vector of size 256, writing the result to an output buffer.\n>>> reciprocal_bfloat16([0.9765625, 4.3125, 2.0625, 0.8984375, -1.5234375, 2.921875, -1.25, 7.84375])\n[1.0234375, 0.2314453125, 0.484375, 1.109375, -0.65625, 0.341796875, -0.80078125, 0.1279296875]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid reciprocal_bfloat16(bfloat16 *input_vector, bfloat16 *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    for (uint32_t i = 0; i < vector_size; i++) {\n        float x = (float)input_vector[i];\n        output_vector[i] = (bfloat16)(1.0f / x);\n    }\n}", "program_code": "extern \"C\" {\n    void reciprocal_bfloat16_wrapper(bfloat16 *input_vector, bfloat16 *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        reciprocal_bfloat16(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [0.9765625, 4.3125, 2.0625, 0.8984375, -1.5234375, 2.921875, -1.25, 7.84375, 9.25, -2.328125, 5.84375, 0.578125, 1.359375, 8.5, -8.5625, -8.25, -9.625, 6.65625, 5.5625, 7.40625, 9.5625, 5.96875, -0.76953125, 5.625, -7.625, 2.796875, -7.125, 8.875, 0.4375, -1.703125, -4.71875, 5.5, -0.87890625, 1.3671875, -9.625, 2.359375, 2.234375, 2.34375, 8.875, 3.640625, -2.8125, -1.2578125, 3.953125, -8.8125, 3.328125, 3.40625, -5.78125, -7.40625, -3.6875, -2.71875, 1.40625, -1.2265625, 9.75, -7.96875, -5.8125, -6.78125, 3.0625, -4.9375, -0.671875, -5.125, -6.8125, -7.78125, 3.125, -7.25, -6.0625, -2.625, 6.40625, -8.0625, 6.75, -8.0625, 9.5, -0.62890625, 9.5625, 2.09375, 4.78125, -9.1875, -4.34375, -7.59375, -4.0625, -7.625, -3.640625, -1.7109375, -8.6875, 3.84375, 1.328125, -4.6875, 0.46484375, -8.125, 1.515625, 8.5625, -3.625, 3.34375, -7.375, 4.3125, -4.21875, -6.34375, 1.7265625, -9.625, 6.59375, -9.875, 3.5625, -4.59375, 4.71875, 9.25, -5.03125, 1.5234375, 1.84375, 1.4453125, -5.53125, 9.0625, -1.0546875, 6.9375, 3.984375, -4.0625, 6.28125, -2.0625, 7.625, 1.625, 7.625, 3.84375, 4.5, 0.0264892578125, 9.125, 2.875, -1.5234375, 2.125, -9.625, -3.96875, 3.203125, -4.1875, 2.359375, -1.421875, -7.28125, -4.03125, 1.3984375, 1.8203125, 1.484375, 3.0625, 3.046875, -1.375, 7.9375, -2.65625, -1.28125, 7.84375, 6.125, 4.0625, -8.0, 8.375, 4.28125, 10.0, -7.0, 7.375, -6.75, 2.3125, -7.53125, 6.96875, 6.15625, 1.3828125, -1.859375, -8.625, 3.953125, -0.9296875, 4.4375, 7.3125, 9.5, 7.125, -9.75, -2.796875, 4.59375, -6.5625, 0.419921875, -8.9375, -6.0, -9.625, 5.875, -5.53125, -3.09375, 8.5625, 4.09375, -9.375, -6.71875, 2.421875, 1.546875, -5.25, 8.6875, 2.28125, 0.7109375, 1.796875, 4.59375, -3.765625, -2.03125, -5.8125, -6.28125, 8.875, 4.78125, -0.1904296875, -5.4375, -4.90625, -8.8125, -1.3125, -3.765625, 3.921875, -2.4375, -6.40625, -9.5, -8.625, 3.59375, -0.92578125, 0.73046875, 7.9375, 9.8125, -5.65625, 3.265625, -4.71875, -9.5625, 5.15625, -3.59375, -2.328125, 1.765625, 6.625, 2.578125, 7.4375, -4.53125, 5.96875, -6.28125, 9.0625, 3.75, -5.6875, 8.9375, 4.625, -4.90625, -5.71875, 0.36328125, -9.5, -5.84375, -1.5078125, -2.515625, -0.7265625, -4.4375, 1.734375, 7.28125, -7.65625, 0.34765625, -7.34375, 4.34375, -2.078125, 1.3046875, -6.34375, -7.09375, -0.2392578125, -2.890625, 8.8125, 5.3125, 4.96875, 8.0625, -8.3125], "dtype": "bfloat16"}], "outputs": [{"output_vector": [1.0234375, 0.2314453125, 0.484375, 1.109375, -0.65625, 0.341796875, -0.80078125, 0.1279296875, 0.10791015625, -0.4296875, 0.1708984375, 1.7265625, 0.734375, 0.11767578125, -0.11669921875, -0.12109375, -0.10400390625, 0.150390625, 0.1796875, 0.134765625, 0.1044921875, 0.16796875, -1.296875, 0.177734375, -0.130859375, 0.357421875, -0.140625, 0.11279296875, 2.28125, -0.5859375, -0.2119140625, 0.181640625, -1.140625, 0.73046875, -0.10400390625, 0.423828125, 0.447265625, 0.42578125, 0.11279296875, 0.275390625, -0.35546875, -0.796875, 0.25390625, -0.11328125, 0.30078125, 0.29296875, -0.1728515625, -0.134765625, -0.271484375, -0.3671875, 0.7109375, -0.81640625, 0.1025390625, -0.1259765625, -0.171875, -0.1474609375, 0.326171875, -0.2021484375, -1.4921875, -0.1953125, -0.146484375, -0.12890625, 0.3203125, -0.1376953125, -0.1650390625, -0.380859375, 0.15625, -0.1240234375, 0.1484375, -0.1240234375, 0.10546875, -1.59375, 0.1044921875, 0.478515625, 0.208984375, -0.10888671875, -0.23046875, -0.1318359375, -0.24609375, -0.130859375, -0.275390625, -0.5859375, -0.115234375, 0.259765625, 0.75390625, -0.212890625, 2.15625, -0.123046875, 0.66015625, 0.11669921875, -0.275390625, 0.298828125, -0.1357421875, 0.2314453125, -0.2373046875, -0.1572265625, 0.578125, -0.10400390625, 0.1513671875, -0.10107421875, 0.28125, -0.2177734375, 0.2119140625, 0.10791015625, -0.19921875, 0.65625, 0.54296875, 0.69140625, -0.1806640625, 0.1103515625, -0.94921875, 0.14453125, 0.251953125, -0.24609375, 0.1591796875, -0.484375, 0.130859375, 0.6171875, 0.130859375, 0.259765625, 0.22265625, 37.75, 0.109375, 0.34765625, -0.65625, 0.470703125, -0.10400390625, -0.251953125, 0.3125, -0.2392578125, 0.423828125, -0.703125, -0.1376953125, -0.248046875, 0.71484375, 0.55078125, 0.671875, 0.326171875, 0.328125, -0.7265625, 0.1259765625, -0.376953125, -0.78125, 0.1279296875, 0.1630859375, 0.24609375, -0.125, 0.11962890625, 0.2333984375, 0.10009765625, -0.142578125, 0.1357421875, -0.1484375, 0.431640625, -0.1328125, 0.1435546875, 0.162109375, 0.72265625, -0.5390625, -0.11572265625, 0.25390625, -1.078125, 0.2255859375, 0.13671875, 0.10546875, 0.140625, -0.1025390625, -0.357421875, 0.2177734375, -0.15234375, 2.375, -0.11181640625, -0.1669921875, -0.10400390625, 0.169921875, -0.1806640625, -0.322265625, 0.11669921875, 0.244140625, -0.1064453125, -0.1484375, 0.412109375, 0.64453125, -0.1904296875, 0.115234375, 0.4375, 1.40625, 0.5546875, 0.2177734375, -0.265625, -0.4921875, -0.171875, -0.1591796875, 0.11279296875, 0.208984375, -5.25, -0.18359375, -0.2041015625, -0.11328125, -0.76171875, -0.265625, 0.255859375, -0.41015625, -0.15625, -0.10546875, -0.11572265625, 0.27734375, -1.078125, 1.3671875, 0.1259765625, 0.10205078125, -0.1767578125, 0.306640625, -0.2119140625, -0.1044921875, 0.1943359375, -0.27734375, -0.4296875, 0.56640625, 0.1513671875, 0.388671875, 0.134765625, -0.220703125, 0.16796875, -0.1591796875, 0.1103515625, 0.267578125, -0.17578125, 0.11181640625, 0.2158203125, -0.2041015625, -0.1748046875, 2.75, -0.10546875, -0.1708984375, -0.6640625, -0.3984375, -1.375, -0.2255859375, 0.578125, 0.1376953125, -0.130859375, 2.875, -0.1357421875, 0.23046875, -0.48046875, 0.765625, -0.1572265625, -0.140625, -4.1875, -0.345703125, 0.11328125, 0.1884765625, 0.201171875, 0.1240234375, -0.1201171875], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.02, "rtol": 0.02}}
{"kernel_name": "reduce_add_relu_int8", "prompt": "/*\nThis AIE kernel sums all 128 elements of an int8_t input buffer, applies a ReLU (sets negative sums to zero), and outputs the saturated result as a single int8_t to out_buffer.\n>>> reduce_add_relu_int8([4, -30, -28, 7, 2, 28, -17, -2])\n0\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 128\nout_buffer size: 1\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid reduce_add_relu_int8(int8_t *in_buffer, int8_t *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t NUM_ELEMENTS = 128;\n    int32_t sum = 0;\n    for (int i = 0; i < NUM_ELEMENTS; i++) {\n        sum += in_buffer[i];\n    }\n    if (sum < 0)\n        sum = 0;\n    if (sum > 127) sum = 127;\n    if (sum < -128) sum = -128;\n    *out_buffer = (int8_t)sum;\n}", "program_code": "extern \"C\" {\n    void reduce_add_relu_int8_wrapper(int8_t *in_buffer, int8_t *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        reduce_add_relu_int8(in_buffer, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [4, -30, -28, 7, 2, 28, -17, -2, -18, 15, 24, 36, -7, 27, 11, 38, -14, -6, 27, -29, -31, -4, -7, -9, -19, -3, -4, 15, -35, 18, 3, 36, 30, 20, 35, 21, -36, -26, -14, 10, -28, 37, 36, 29, 18, 17, 1, 25, 26, 32, 6, 34, -1, 34, 39, 0, -33, 6, 32, -23, -29, -27, -3, -15, 26, -31, 37, 7, -22, 32, -16, -31, -13, 38, -18, -20, -17, -3, -32, 5, -35, -21, 29, -22, -2, 29, -10, -32, 31, 13, 31, 39, -33, -5, 7, -11, 17, 24, -31, 22, 19, -34, 22, -1, -19, 36, 9, -32, 37, -38, -5, -11, -37, 22, -35, -21, 26, 31, -21, -28, 35, 5, -26, 19, 31, -10, -1, 16], "dtype": "int8"}], "outputs": [{"out_buffer": 127, "dtype": "int8"}]}}
{"kernel_name": "reducemin_bfloat16", "prompt": "/*\nThis AIE kernel calculates the min of an input bfloat16 vector and outputs the result to an output buffer.\n>>> reducemin_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875])\n-0.9765625\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 64\nout_buffer size: 1\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid reducemin_bfloat16(bfloat16 *in_buffer, bfloat16 *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t num_elements = 64;\n    bfloat16 min_value = in_buffer[0];\n    for (int i = 1; i < num_elements; i++) {\n        if (min_value > in_buffer[i]) {\n            min_value = in_buffer[i];\n        }\n    }\n    *out_buffer = min_value;\n}", "program_code": "extern \"C\" {\n    void reducemin_bfloat16_wrapper(bfloat16 *in_buffer, bfloat16 *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        reducemin_bfloat16(in_buffer, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625], "dtype": "bfloat16"}], "outputs": [{"out_buffer": -2.546875, "dtype": "bfloat16"}]}}
{"kernel_name": "relu6_bfloat16", "prompt": "/*\nThis AIE kernel applies the ReLU6 activation function elementwise to a bfloat16 input vector of size 256. ReLU6 clamps each value to [0, 6].\n>>> relu6_bfloat16([12.125, 1.203125, 5.84375, 15.9375, 12.9375, -9.8125, 5.59375, -3.203125])\n[6.0, 1.203125, 5.84375, 6.0, 6.0, 0.0, 5.59375, 0.0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid relu6_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t N = 256;\n    for (int i = 0; i < N; ++i) {\n        float x = float(input[i]);\n        float y = x > 0.0f ? x : 0.0f;\n        y = y < 6.0f ? y : 6.0f;\n        output[i] = bfloat16(y);\n    }\n}", "program_code": "extern \"C\" {\n    void relu6_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        relu6_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [12.125, 1.203125, 5.84375, 15.9375, 12.9375, -9.8125, 5.59375, -3.203125, -2.828125, 1.28125, -0.84765625, 9.625, 4.09375, -1.0234375, 1.5546875, 0.66796875, 9.9375, -3.640625, 0.50390625, -8.8125, -22.375, 3.234375, 4.90625, -7.9375, 16.125, -13.625, -1.6328125, -3.5, 10.25, 9.75, -0.76171875, 1.0234375, -9.125, -17.875, -4.78125, -0.75, 7.84375, 7.625, -5.09375, -4.40625, -10.375, -13.375, -15.625, 13.625, -6.0625, -5.5, -12.0, 4.21875, -14.9375, -3.703125, -9.1875, 1.09375, -6.09375, -11.4375, -2.21875, 1.4296875, -1.46875, 0.419921875, -7.0625, -4.90625, -7.375, -4.875, -8.5, -15.8125, -0.58203125, -5.21875, -15.0625, 1.703125, -9.25, -1.5859375, 3.828125, -0.96875, 7.125, -11.875, 1.21875, -7.46875, -8.9375, -6.625, -4.5, -1.546875, -11.3125, 5.21875, 1.7265625, -14.3125, 9.875, 13.1875, 7.4375, -3.4375, -10.5625, 6.4375, -5.21875, 7.78125, -0.333984375, 5.8125, 0.8515625, 3.65625, -1.9140625, 12.3125, -0.984375, 1.21875, 13.0625, -12.8125, -12.1875, 5.75, -11.375, 13.5625, -5.3125, -7.96875, 13.375, 9.875, 12.9375, 5.25, -8.875, 13.25, -4.15625, 4.40625, 5.5625, -3.234375, 2.90625, 5.375, 1.0078125, -10.8125, 0.38671875, 8.625, -7.5625, -3.203125, -5.46875, 12.8125, 3.375, 1.2578125, -8.1875, 2.3125, -7.40625, -1.7421875, -7.09375, 3.40625, 2.609375, -3.671875, 1.171875, -10.75, -13.9375, 1.515625, -0.66796875, 3.078125, 17.125, 5.5625, -9.3125, 6.9375, -12.5, -5.6875, -2.546875, 11.6875, -7.96875, -8.625, -2.78125, -7.3125, 7.0, -10.625, -11.1875, -5.5, -5.96875, 13.4375, 5.59375, -1.296875, -11.8125, 4.75, -10.0, -14.375, 7.5, 0.53515625, 5.375, 0.55078125, 4.84375, -7.21875, -10.25, 3.453125, -8.4375, -7.53125, -5.65625, -1.859375, -4.84375, -13.0, -7.15625, -19.75, 3.0, -14.8125, -10.8125, -1.5859375, -7.90625, 10.375, -12.3125, 0.13671875, -2.3125, -11.375, 2.1875, -3.375, 4.1875, 4.59375, 15.3125, 8.6875, -4.96875, -3.921875, 6.8125, 3.234375, 3.125, -14.9375, -2.1875, -7.90625, 0.2392578125, -2.78125, 5.28125, 0.5390625, 4.28125, -5.71875, -9.5625, -5.28125, -2.140625, 1.03125, 16.125, -2.34375, -9.625, -4.78125, -5.71875, 1.8515625, -14.3125, -1.4921875, -0.74609375, -0.142578125, -6.78125, -3.90625, -13.375, -5.9375, -6.34375, 1.328125, -11.25, 4.25, 9.9375, -18.5, 1.40625, 3.421875, -7.09375, -5.1875, -3.0625, -4.375, -4.46875, -15.4375, 7.21875, 6.625, -8.5, -13.75, 2.171875, -6.59375, -0.86328125, -4.5625, 3.53125, 3.5625], "dtype": "bfloat16"}], "outputs": [{"output": [6.0, 1.203125, 5.84375, 6.0, 6.0, 0.0, 5.59375, 0.0, 0.0, 1.28125, 0.0, 6.0, 4.09375, 0.0, 1.5546875, 0.66796875, 6.0, 0.0, 0.50390625, 0.0, 0.0, 3.234375, 4.90625, 0.0, 6.0, 0.0, 0.0, 0.0, 6.0, 6.0, 0.0, 1.0234375, 0.0, 0.0, 0.0, 0.0, 6.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 0.0, 0.0, 0.0, 4.21875, 0.0, 0.0, 0.0, 1.09375, 0.0, 0.0, 0.0, 1.4296875, 0.0, 0.419921875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.703125, 0.0, 0.0, 3.828125, 0.0, 6.0, 0.0, 1.21875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.21875, 1.7265625, 0.0, 6.0, 6.0, 6.0, 0.0, 0.0, 6.0, 0.0, 6.0, 0.0, 5.8125, 0.8515625, 3.65625, 0.0, 6.0, 0.0, 1.21875, 6.0, 0.0, 0.0, 5.75, 0.0, 6.0, 0.0, 0.0, 6.0, 6.0, 6.0, 5.25, 0.0, 6.0, 0.0, 4.40625, 5.5625, 0.0, 2.90625, 5.375, 1.0078125, 0.0, 0.38671875, 6.0, 0.0, 0.0, 0.0, 6.0, 3.375, 1.2578125, 0.0, 2.3125, 0.0, 0.0, 0.0, 3.40625, 2.609375, 0.0, 1.171875, 0.0, 0.0, 1.515625, 0.0, 3.078125, 6.0, 5.5625, 0.0, 6.0, 0.0, 0.0, 0.0, 6.0, 0.0, 0.0, 0.0, 0.0, 6.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.59375, 0.0, 0.0, 4.75, 0.0, 0.0, 6.0, 0.53515625, 5.375, 0.55078125, 4.84375, 0.0, 0.0, 3.453125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 0.0, 0.13671875, 0.0, 0.0, 2.1875, 0.0, 4.1875, 4.59375, 6.0, 6.0, 0.0, 0.0, 6.0, 3.234375, 3.125, 0.0, 0.0, 0.0, 0.2392578125, 0.0, 5.28125, 0.5390625, 4.28125, 0.0, 0.0, 0.0, 0.0, 1.03125, 6.0, 0.0, 0.0, 0.0, 0.0, 1.8515625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.328125, 0.0, 4.25, 6.0, 0.0, 1.40625, 3.421875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 6.0, 0.0, 0.0, 2.171875, 0.0, 0.0, 0.0, 3.53125, 3.5625], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "relu_bfloat16", "prompt": "/*\nThis AIE kernel performs a ReLU activation on a bfloat16 input vector of fixed size.\n>>> relu_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875])\n[1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, 0.0, 0.94921875, 0.0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 256\nout_buffer size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid relu_bfloat16(bfloat16 *in_buffer, bfloat16 *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t num_elements = 256;\n    for (uint32_t i = 0; i < num_elements; ++i) {\n        out_buffer[i] = in_buffer[i] < 0 ? 0 : in_buffer[i];\n    }\n}", "program_code": "extern \"C\" {\n    void relu_bfloat16_wrapper(bfloat16 *in_buffer, bfloat16 *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        relu_bfloat16(in_buffer, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625, 0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625, 0.671875, 0.408203125, -0.76953125, 0.5390625, -0.67578125, 0.03173828125, -0.63671875, 0.67578125, 0.578125, -0.2080078125, 0.396484375, -1.09375, -1.4921875, 0.439453125, 0.1669921875, 0.63671875, 2.390625, 0.9453125, -0.9140625, 1.1171875, -1.3125, -0.4609375, -0.068359375, 1.7109375, -0.74609375, -0.828125, -0.0986328125, -0.6640625, 1.125, -1.078125, -1.1484375, -0.4375, -0.498046875, 1.9296875, 0.94921875, 0.08740234375, -1.2265625, 0.84375, -1.0, -1.546875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.65234375, -1.03125, 0.6796875, -0.8046875, -0.69140625, -0.455078125, 0.0174560546875, -0.353515625, -1.375, -0.64453125, -2.21875, 0.625, -1.6015625, -1.1015625, 0.05224609375, -0.73828125, 1.546875, -1.2890625, 0.267578125, -0.039306640625, -1.171875, 0.5234375, -0.171875, 0.7734375, 0.82421875, 2.15625, 1.3359375, -0.369140625, -0.2392578125, 1.1015625, 0.65625, 0.640625, -1.6171875, -0.0242919921875, -0.73828125, 0.279296875, -0.09814453125, 0.91015625, 0.31640625, 0.78515625, -0.466796875, -0.9453125, -0.41015625, -0.0169677734375, 0.37890625, 2.265625, -0.042236328125, -0.95703125, -0.345703125, -0.462890625, 0.482421875, -1.5390625, 0.0634765625, 0.15625, 0.232421875, -0.59765625, -0.23828125, -1.421875, -0.494140625, -0.54296875, 0.416015625, -1.15625, 0.78125, 1.4921875, -2.0625, 0.42578125, 0.67578125, -0.63671875, -0.396484375, -0.1328125, -0.296875, -0.30859375, -1.6796875, 1.1484375, 1.078125, -0.8125, -1.46875, 0.51953125, -0.57421875, 0.1416015625, -0.318359375, 0.69140625, 0.6953125], "dtype": "bfloat16"}], "outputs": [{"out_buffer": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, 0.0, 0.94921875, 0.0, 0.0, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, 0.0, 0.3125, 0.0, 0.0, 0.65234375, 0.86328125, 0.0, 2.265625, 0.0, 0.045654296875, 0.0, 1.53125, 1.46875, 0.1552734375, 0.37890625, 0.0, 0.0, 0.0, 0.15625, 1.2265625, 1.203125, 0.0, 0.0, 0.0, 0.0, 0.0, 1.953125, 0.0, 0.0, 0.0, 0.77734375, 0.0, 0.0, 0.0, 0.38671875, 0.0, 0.0, 0.0, 0.427734375, 0.06640625, 0.302734375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.177734375, 0.0, 0.0, 0.462890625, 0.0, 0.052001953125, 0.73046875, 0.12890625, 1.140625, 0.0, 0.40234375, 0.0, 0.0, 0.0, 0.0, 0.05615234375, 0.0, 0.90234375, 0.46484375, 0.0, 1.484375, 1.8984375, 1.1796875, 0.0, 0.0, 1.0546875, 0.0, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, 0.0, 0.0, 0.96875, 0.0, 1.9453125, 0.0, 0.0, 1.921875, 1.484375, 1.8671875, 0.90625, 0.0, 1.90625, 0.0, 0.80078125, 0.9453125, 0.0, 0.61328125, 0.921875, 0.376953125, 0.0, 0.298828125, 1.328125, 0.0, 0.0, 0.0, 1.8515625, 0.671875, 0.408203125, 0.0, 0.5390625, 0.0, 0.03173828125, 0.0, 0.67578125, 0.578125, 0.0, 0.396484375, 0.0, 0.0, 0.439453125, 0.1669921875, 0.63671875, 2.390625, 0.9453125, 0.0, 1.1171875, 0.0, 0.0, 0.0, 1.7109375, 0.0, 0.0, 0.0, 0.0, 1.125, 0.0, 0.0, 0.0, 0.0, 1.9296875, 0.94921875, 0.08740234375, 0.0, 0.84375, 0.0, 0.0, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, 0.0, 0.0, 0.6796875, 0.0, 0.0, 0.0, 0.0174560546875, 0.0, 0.0, 0.0, 0.0, 0.625, 0.0, 0.0, 0.05224609375, 0.0, 1.546875, 0.0, 0.267578125, 0.0, 0.0, 0.5234375, 0.0, 0.7734375, 0.82421875, 2.15625, 1.3359375, 0.0, 0.0, 1.1015625, 0.65625, 0.640625, 0.0, 0.0, 0.0, 0.279296875, 0.0, 0.91015625, 0.31640625, 0.78515625, 0.0, 0.0, 0.0, 0.0, 0.37890625, 2.265625, 0.0, 0.0, 0.0, 0.0, 0.482421875, 0.0, 0.0634765625, 0.15625, 0.232421875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.416015625, 0.0, 0.78125, 1.4921875, 0.0, 0.42578125, 0.67578125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1484375, 1.078125, 0.0, 0.0, 0.51953125, 0.0, 0.1416015625, 0.0, 0.69140625, 0.6953125], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "relu_bfloat16_cast_uint8", "prompt": "/*\nThis AIE kernel applies ReLU to a bfloat16 input vector (negative values become zero), then rounds to the nearest positive integer, clamps between 0 and 255, and casts to uint8_t.\n>>> relu_bfloat16_cast_uint8([226.0, 51.25, 125.5, 286.0, 239.0, -125.0, 121.5, -19.375])\n[226, 51, 126, 255, 239, 0, 122, 0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid relu_bfloat16_cast_uint8(bfloat16 *input_vector, uint8_t *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t VECTOR_SIZE = 256;\n    for (uint32_t i = 0; i < VECTOR_SIZE; i++) {\n        float x        = (float)input_vector[i];\n        float relu_val = x > 0.0f ? x : 0.0f;\n\n        int   ip   = (int)relu_val;\n        float frac = relu_val - (float)ip;\n        if (frac > 0.5f) {\n            ip += 1;\n        }\n        else if (frac == 0.5f && (ip & 1)) {\n            ip += 1;\n        }\n\n        if      (ip <  0)   ip = 0;\n        else if (ip > 255)  ip = 255;\n\n        output_vector[i] = (uint8_t)ip;\n    }\n}", "program_code": "extern \"C\" {\n    void relu_bfloat16_cast_uint8_wrapper(bfloat16 *input_vector, uint8_t *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        relu_bfloat16_cast_uint8(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [226.0, 51.25, 125.5, 286.0, 239.0, -125.0, 121.5, -19.375, -13.1875, 52.5, 18.5, 186.0, 97.5, 15.5625, 56.75, 42.75, 191.0, -26.25, 40.0, -109.5, -326.0, 83.5, 110.5, -95.0, 290.0, -186.0, 5.84375, -24.0, 196.0, 188.0, 19.875, 48.5, -113.5, -254.0, -44.5, 20.0, 157.0, 154.0, -49.5, -38.75, -134.0, -182.0, -218.0, 250.0, -65.0, -56.0, -160.0, 99.5, -207.0, -27.25, -114.5, 49.5, -65.5, -151.0, -3.609375, 54.75, 8.5, 38.75, -81.0, -46.5, -86.0, -46.0, -104.0, -221.0, 22.75, -51.5, -209.0, 59.25, -116.0, 6.65625, 93.5, 16.5, 146.0, -158.0, 51.5, -87.5, -111.5, -74.0, -40.0, 7.1875, -149.0, 115.5, 59.5, -197.0, 190.0, 243.0, 151.0, -23.0, -137.0, 135.0, -51.5, 156.0, 26.625, 125.0, 45.5, 90.5, 1.34375, 229.0, 16.25, 51.5, 241.0, -173.0, -163.0, 124.0, -150.0, 249.0, -53.0, -95.5, 246.0, 190.0, 239.0, 116.0, -110.0, 244.0, -34.25, 102.5, 121.0, -19.875, 78.5, 118.0, 48.25, -141.0, 38.25, 170.0, -89.0, -19.125, -55.75, 237.0, 86.0, 52.25, -98.5, 69.0, -86.5, 4.0625, -81.5, 86.5, 74.0, -26.625, 50.75, -140.0, -191.0, 56.25, 21.375, 81.5, 306.0, 121.0, -117.0, 143.0, -168.0, -59.0, -8.75, 219.0, -95.5, -106.0, -12.625, -85.0, 144.0, -138.0, -147.0, -56.0, -63.75, 247.0, 121.5, 11.1875, -157.0, 108.0, -128.0, -198.0, 152.0, 40.5, 118.0, 40.75, 109.5, -83.5, -132.0, 87.0, -103.0, -88.5, -58.25, 2.234375, -45.25, -176.0, -82.5, -284.0, 80.0, -205.0, -141.0, 6.6875, -94.5, 198.0, -165.0, 34.25, -5.03125, -150.0, 67.0, -22.0, 99.0, 105.5, 276.0, 171.0, -47.25, -30.625, 141.0, 84.0, 82.0, -207.0, -3.109375, -94.5, 35.75, -12.5625, 116.5, 40.5, 100.5, -59.75, -121.0, -52.5, -2.171875, 48.5, 290.0, -5.40625, -122.5, -44.25, -59.25, 61.75, -197.0, 8.125, 20.0, 29.75, -76.5, -30.5, -182.0, -63.25, -69.5, 53.25, -148.0, 100.0, 191.0, -264.0, 54.5, 86.5, -81.5, -50.75, -17.0, -38.0, -39.5, -215.0, 147.0, 138.0, -104.0, -188.0, 66.5, -73.5, 18.125, -40.75, 88.5, 89.0], "dtype": "bfloat16"}], "outputs": [{"output_vector": [226, 51, 126, 255, 239, 0, 122, 0, 0, 52, 18, 186, 98, 16, 57, 43, 191, 0, 40, 0, 0, 84, 110, 0, 255, 0, 6, 0, 196, 188, 20, 48, 0, 0, 0, 20, 157, 154, 0, 0, 0, 0, 0, 250, 0, 0, 0, 100, 0, 0, 0, 50, 0, 0, 0, 55, 8, 39, 0, 0, 0, 0, 0, 0, 23, 0, 0, 59, 0, 7, 94, 16, 146, 0, 52, 0, 0, 0, 0, 7, 0, 116, 60, 0, 190, 243, 151, 0, 0, 135, 0, 156, 27, 125, 46, 90, 1, 229, 16, 52, 241, 0, 0, 124, 0, 249, 0, 0, 246, 190, 239, 116, 0, 244, 0, 102, 121, 0, 78, 118, 48, 0, 38, 170, 0, 0, 0, 237, 86, 52, 0, 69, 0, 4, 0, 86, 74, 0, 51, 0, 0, 56, 21, 82, 255, 121, 0, 143, 0, 0, 0, 219, 0, 0, 0, 0, 144, 0, 0, 0, 0, 247, 122, 11, 0, 108, 0, 0, 152, 40, 118, 41, 110, 0, 0, 87, 0, 0, 0, 2, 0, 0, 0, 0, 80, 0, 0, 7, 0, 198, 0, 34, 0, 0, 67, 0, 99, 106, 255, 171, 0, 0, 141, 84, 82, 0, 0, 0, 36, 0, 116, 40, 100, 0, 0, 0, 0, 48, 255, 0, 0, 0, 0, 62, 0, 8, 20, 30, 0, 0, 0, 0, 0, 53, 0, 100, 191, 0, 54, 86, 0, 0, 0, 0, 0, 0, 147, 138, 0, 0, 66, 0, 18, 0, 88, 89], "dtype": "uint8"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "relu_int8", "prompt": "/*\nThis AIE kernel performs a ReLU activation on an int8 input vector of size num_elements.\n>>> relu_int8([44, -118, -1, 12, -81, 42, 68, 23])\n[44, 0, 0, 12, 0, 42, 68, 23]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer size: 1024\nout_buffer size: 1024\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid relu_int8(int8_t *in_buffer, int8_t *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t num_elements = 1024;\n    for (uint32_t i = 0; i < num_elements; i++) {\n        int8_t v = in_buffer[i];\n        out_buffer[i] = (v > 0) ? v : 0;\n    }\n}", "program_code": "extern \"C\" {\n    void relu_int8_wrapper(int8_t *in_buffer, int8_t *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        relu_int8(in_buffer, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer": [44, -118, -1, 12, -81, 42, 68, 23, -11, 38, -106, 55, 64, 76, -95, 88, -61, 51, -50, 26, 123, -46, 34, 91, 67, -10, -3, 11, -25, -3, 101, 88, -119, 36, -12, -20, 83, 94, 33, 31, -107, -47, -39, 37, 114, 86, -26, -30, -92, 55, -123, -16, -41, -70, -85, -52, -58, -68, -53, 100, 88, 61, 4, -114, -40, 26, 50, 118, 12, 77, 76, -59, -70, -71, -87, -30, 65, -62, -56, -6, 102, -3, 46, 74, -89, -54, 106, 79, -41, 40, -27, 7, 46, 72, 95, -6, -40, -34, -21, 17, -47, 11, 13, -28, 37, 102, 115, 108, -103, -62, -119, 86, -51, -21, -81, -110, -56, 24, -33, -42, -119, -101, -50, -106, 20, 23, 110, 37, -13, -120, -83, -123, 80, -109, -59, -34, 115, 18, -90, 85, 69, -98, -120, 117, 126, -57, -75, 71, -49, -121, 110, -93, 47, -99, 57, 94, 64, -119, 62, 94, -46, 59, 6, 122, -29, -32, -66, -7, 88, 39, 21, 76, 49, -4, -120, 77, 115, 2, -93, -10, -99, -125, -66, 5, 19, 66, 80, 71, 19, -116, 75, 45, 14, -69, -57, -98, 39, -31, -5, 56, -96, 93, 81, 35, 65, -65, 20, -119, 77, 50, -92, 57, -54, 17, 9, -1, 82, 85, 113, -96, 34, -76, 66, -97, 90, 23, 5, 74, 66, -100, -101, 116, -56, -89, -22, 23, 96, -67, -7, 35, 106, 57, -61, 126, -7, 51, -81, 75, -83, -76, 70, -14, 43, 38, 60, 55, -60, 70, -12, -100, 88, -17, -73, -94, 99, 4, 17, 0, 40, 29, -94, 0, -24, 79, -124, 36, 103, 122, -46, -75, -36, -99, 30, 5, -105, -47, -90, -90, -50, 50, 28, 104, -115, 106, -72, 116, -30, 111, 29, -111, 113, 112, -30, -49, -7, 25, 113, 4, 49, -112, 103, -23, 70, 11, 46, -86, 108, -81, -13, 58, 53, -120, -36, -97, 58, 113, 28, -8, -45, 97, -17, -127, -47, -128, 103, -63, 117, 23, 50, 103, -17, -22, -103, 41, 111, -22, -113, -71, -24, -59, 120, -93, -71, 49, 42, -26, -81, -76, 39, -9, 108, 46, 43, -117, 59, 64, -85, 46, 33, 91, -75, -46, 92, 47, -37, -37, -48, -127, -95, 0, 119, -84, 64, 14, 105, 63, -48, -29, 74, 26, 27, -75, -90, -100, -35, 12, -53, -74, -45, -7, -22, 120, 17, 42, -65, 86, -119, -44, -80, -56, -16, 75, 72, -33, 34, -60, -111, -122, 125, -122, 51, -3, 117, 68, 27, -97, -102, -81, -60, -99, 39, -1, 114, -8, -75, 116, -73, 19, 34, 3, 20, -53, -87, 76, 115, 75, 126, -28, -101, -78, 39, 52, -92, 116, 20, 104, 55, 87, -64, -50, -113, -108, -22, 15, -92, -32, -9, 20, 70, 5, -7, 99, 44, 18, -66, 58, -37, 30, 31, -105, -69, 50, -88, 79, 42, 7, -42, 13, 11, -63, -100, -11, 17, 60, 44, -43, -73, -123, 40, -80, -94, -76, -47, -79, 117, -33, -93, -59, 38, -63, 71, 41, -72, -45, -78, 35, -106, -105, 115, 64, 69, -28, -34, -33, -36, 27, 41, 69, 28, -84, 82, -34, -18, -7, -125, -128, 33, 91, -104, -15, 87, -14, 31, 50, 14, 3, 86, -92, 117, -12, 44, 34, 103, 25, -104, -80, -29, 81, 120, -35, -65, 121, 121, 3, -55, 81, 96, -30, 6, 121, -9, -86, 62, -10, 2, 77, -125, -115, 122, -16, -47, -61, -114, 103, -89, 87, 26, 21, -85, -1, -13, 73, -32, -64, 61, -1, 105, -99, -123, -128, -74, -120, -118, 10, 119, -109, -15, -14, -119, -26, -56, -85, -78, 70, 122, 58, -77, 69, -98, -1, 13, -124, -36, -105, 88, 79, -53, 59, 86, -101, -5, 2, 112, -28, -98, -7, -103, -52, 48, -30, -40, -25, -47, -66, 94, -26, 97, 35, -93, -115, -22, 94, -6, -111, 107, -5, 120, -21, -112, 67, 39, 1, -73, -46, 90, -59, 49, 46, -73, 48, 16, 99, 74, -116, 17, 20, -36, -9, 93, 81, 16, 112, -61, -78, 74, -53, 2, 27, 21, 115, 5, -114, -37, 46, 106, -87, -4, -116, -104, -70, 124, 80, 107, 65, -70, -15, 19, -92, 92, -58, -107, -118, -37, 102, 109, -42, 16, -104, -57, -85, 60, 13, -47, -24, -77, -27, -126, -117, -24, 91, 42, -126, 59, 35, 87, -77, 1, 61, -95, -48, -76, 45, 37, -96, -72, -31, 55, 54, -108, -27, 87, 0, 4, -106, -54, -90, -37, 69, -61, -109, 33, 101, -82, 46, 20, 87, -27, -86, 54, -91, 22, -13, 53, 5, 13, 56, 68, -91, -123, 60, 9, -71, -86, 104, -23, -75, 84, -51, 62, 43, -34, -98, 57, -77, -127, -104, -75, -3, -91, -3, -30, 5, 45, -126, 3, 82, 17, -125, -66, -97, -59, -34, -96, -88, 52, 98, 44, -75, 60, -21, 23, 89, -55, -115, 125, -47, 118, -16, 119, 107, -18, -88, -55, 46, -65, -56, -75, 16, 65, -109, -116, -1, 19, -33, 50, -26, -27, -56, -113, 16, 23, 26, 69, -30, 101, 66, -103, -1, 18, 120, -44, 16, 35, 52, 96, -101, -71, -61, 105, -68, 100, 108, -37, 103, 115, -67, -97, -104, 46, -114, 79, -10, -14, -32, 31, 126, -14, -124, -67, 46, 88, 67, 31, 3, 122, 109, -110, -111, 51, 11, -24, 63, -99, 124, 83, -92, -52, -42, 42, -37, 68, 77, -115, -43, 80, -7, -117, -19, -23, -19, -26, 1, -27, -53, 19, 105, 44, 56, 122, 15, 97, -112, 38, 114, -65, 24, -52, 78, 20, 29, -109, -81, -48, 21, -24, 57, 97, -18, 4, -91, 119, -103, 64, -55, 49, 80, 37, 37, 22, 60, -61, 42, 57, -7, -121, 96, 40, -10, 75, -42, 0, -11, -76, 0, 8, 61, 101, 65, 116, -45, -74, -124, -69, 33, 10, 92, 36, -24, -89, -106, -27, 32, 67, 1, -20, 100, -68, -22, 30, 123, 21, -68, 27, 123, 106, 16, -7, -7, 88, 105, -124, -58, 21, -38, -8, 85, -127, -76, -51, -97, 41, -48, 55, -115], "dtype": "int8"}], "outputs": [{"out_buffer": [44, 0, 0, 12, 0, 42, 68, 23, 0, 38, 0, 55, 64, 76, 0, 88, 0, 51, 0, 26, 123, 0, 34, 91, 67, 0, 0, 11, 0, 0, 101, 88, 0, 36, 0, 0, 83, 94, 33, 31, 0, 0, 0, 37, 114, 86, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 88, 61, 4, 0, 0, 26, 50, 118, 12, 77, 76, 0, 0, 0, 0, 0, 65, 0, 0, 0, 102, 0, 46, 74, 0, 0, 106, 79, 0, 40, 0, 7, 46, 72, 95, 0, 0, 0, 0, 17, 0, 11, 13, 0, 37, 102, 115, 108, 0, 0, 0, 86, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 23, 110, 37, 0, 0, 0, 0, 80, 0, 0, 0, 115, 18, 0, 85, 69, 0, 0, 117, 126, 0, 0, 71, 0, 0, 110, 0, 47, 0, 57, 94, 64, 0, 62, 94, 0, 59, 6, 122, 0, 0, 0, 0, 88, 39, 21, 76, 49, 0, 0, 77, 115, 2, 0, 0, 0, 0, 0, 5, 19, 66, 80, 71, 19, 0, 75, 45, 14, 0, 0, 0, 39, 0, 0, 56, 0, 93, 81, 35, 65, 0, 20, 0, 77, 50, 0, 57, 0, 17, 9, 0, 82, 85, 113, 0, 34, 0, 66, 0, 90, 23, 5, 74, 66, 0, 0, 116, 0, 0, 0, 23, 96, 0, 0, 35, 106, 57, 0, 126, 0, 51, 0, 75, 0, 0, 70, 0, 43, 38, 60, 55, 0, 70, 0, 0, 88, 0, 0, 0, 99, 4, 17, 0, 40, 29, 0, 0, 0, 79, 0, 36, 103, 122, 0, 0, 0, 0, 30, 5, 0, 0, 0, 0, 0, 50, 28, 104, 0, 106, 0, 116, 0, 111, 29, 0, 113, 112, 0, 0, 0, 25, 113, 4, 49, 0, 103, 0, 70, 11, 46, 0, 108, 0, 0, 58, 53, 0, 0, 0, 58, 113, 28, 0, 0, 97, 0, 0, 0, 0, 103, 0, 117, 23, 50, 103, 0, 0, 0, 41, 111, 0, 0, 0, 0, 0, 120, 0, 0, 49, 42, 0, 0, 0, 39, 0, 108, 46, 43, 0, 59, 64, 0, 46, 33, 91, 0, 0, 92, 47, 0, 0, 0, 0, 0, 0, 119, 0, 64, 14, 105, 63, 0, 0, 74, 26, 27, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 120, 17, 42, 0, 86, 0, 0, 0, 0, 0, 75, 72, 0, 34, 0, 0, 0, 125, 0, 51, 0, 117, 68, 27, 0, 0, 0, 0, 0, 39, 0, 114, 0, 0, 116, 0, 19, 34, 3, 20, 0, 0, 76, 115, 75, 126, 0, 0, 0, 39, 52, 0, 116, 20, 104, 55, 87, 0, 0, 0, 0, 0, 15, 0, 0, 0, 20, 70, 5, 0, 99, 44, 18, 0, 58, 0, 30, 31, 0, 0, 50, 0, 79, 42, 7, 0, 13, 11, 0, 0, 0, 17, 60, 44, 0, 0, 0, 40, 0, 0, 0, 0, 0, 117, 0, 0, 0, 38, 0, 71, 41, 0, 0, 0, 35, 0, 0, 115, 64, 69, 0, 0, 0, 0, 27, 41, 69, 28, 0, 82, 0, 0, 0, 0, 0, 33, 91, 0, 0, 87, 0, 31, 50, 14, 3, 86, 0, 117, 0, 44, 34, 103, 25, 0, 0, 0, 81, 120, 0, 0, 121, 121, 3, 0, 81, 96, 0, 6, 121, 0, 0, 62, 0, 2, 77, 0, 0, 122, 0, 0, 0, 0, 103, 0, 87, 26, 21, 0, 0, 0, 73, 0, 0, 61, 0, 105, 0, 0, 0, 0, 0, 0, 10, 119, 0, 0, 0, 0, 0, 0, 0, 0, 70, 122, 58, 0, 69, 0, 0, 13, 0, 0, 0, 88, 79, 0, 59, 86, 0, 0, 2, 112, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 94, 0, 97, 35, 0, 0, 0, 94, 0, 0, 107, 0, 120, 0, 0, 67, 39, 1, 0, 0, 90, 0, 49, 46, 0, 48, 16, 99, 74, 0, 17, 20, 0, 0, 93, 81, 16, 112, 0, 0, 74, 0, 2, 27, 21, 115, 5, 0, 0, 46, 106, 0, 0, 0, 0, 0, 124, 80, 107, 65, 0, 0, 19, 0, 92, 0, 0, 0, 0, 102, 109, 0, 16, 0, 0, 0, 60, 13, 0, 0, 0, 0, 0, 0, 0, 91, 42, 0, 59, 35, 87, 0, 1, 61, 0, 0, 0, 45, 37, 0, 0, 0, 55, 54, 0, 0, 87, 0, 4, 0, 0, 0, 0, 69, 0, 0, 33, 101, 0, 46, 20, 87, 0, 0, 54, 0, 22, 0, 53, 5, 13, 56, 68, 0, 0, 60, 9, 0, 0, 104, 0, 0, 84, 0, 62, 43, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 5, 45, 0, 3, 82, 17, 0, 0, 0, 0, 0, 0, 0, 52, 98, 44, 0, 60, 0, 23, 89, 0, 0, 125, 0, 118, 0, 119, 107, 0, 0, 0, 46, 0, 0, 0, 16, 65, 0, 0, 0, 19, 0, 50, 0, 0, 0, 0, 16, 23, 26, 69, 0, 101, 66, 0, 0, 18, 120, 0, 16, 35, 52, 96, 0, 0, 0, 105, 0, 100, 108, 0, 103, 115, 0, 0, 0, 46, 0, 79, 0, 0, 0, 31, 126, 0, 0, 0, 46, 88, 67, 31, 3, 122, 109, 0, 0, 51, 11, 0, 63, 0, 124, 83, 0, 0, 0, 42, 0, 68, 77, 0, 0, 80, 0, 0, 0, 0, 0, 0, 1, 0, 0, 19, 105, 44, 56, 122, 15, 97, 0, 38, 114, 0, 24, 0, 78, 20, 29, 0, 0, 0, 21, 0, 57, 97, 0, 4, 0, 119, 0, 64, 0, 49, 80, 37, 37, 22, 60, 0, 42, 57, 0, 0, 96, 40, 0, 75, 0, 0, 0, 0, 0, 8, 61, 101, 65, 116, 0, 0, 0, 0, 33, 10, 92, 36, 0, 0, 0, 0, 32, 67, 1, 0, 100, 0, 0, 30, 123, 21, 0, 27, 123, 106, 16, 0, 0, 88, 105, 0, 0, 21, 0, 0, 85, 0, 0, 0, 0, 41, 0, 55, 0], "dtype": "int8"}]}}
{"kernel_name": "round_bfloat16", "prompt": "/*\nThis AIE kernel rounds each element of a bfloat16 input vector (to nearest integer, ties to +inf), writing the result as bfloat16.\n>>> round_bfloat16([7.0625, 1.6015625, 3.921875, 8.9375, 7.46875, -3.90625, 3.796875, -0.60546875])\n[7.0, 2.0, 4.0, 9.0, 7.0, -4.0, 4.0, -1.0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid round_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n    for (int i = 0; i < N; ++i) {\n        float x  = float(input[i]);\n        float t  = x + 0.5f;\n        int   xi = int(t);\n        if (t < 0.0f && float(xi) != t) {\n            xi -= 1;\n        }\n        output[i] = bfloat16(float(xi));\n    }\n}", "program_code": "extern \"C\" {\n    void round_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        round_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [7.0625, 1.6015625, 3.921875, 8.9375, 7.46875, -3.90625, 3.796875, -0.60546875, -0.412109375, 1.640625, 0.578125, 5.8125, 3.046875, 0.486328125, 1.7734375, 1.3359375, 5.96875, -0.8203125, 1.25, -3.421875, -10.1875, 2.609375, 3.453125, -2.96875, 9.0625, -5.8125, 0.1826171875, -0.75, 6.125, 5.875, 0.62109375, 1.515625, -3.546875, -7.9375, -1.390625, 0.625, 4.90625, 4.8125, -1.546875, -1.2109375, -4.1875, -5.6875, -6.8125, 7.8125, -2.03125, -1.75, -5.0, 3.109375, -6.46875, -0.8515625, -3.578125, 1.546875, -2.046875, -4.71875, -0.11279296875, 1.7109375, 0.265625, 1.2109375, -2.53125, -1.453125, -2.6875, -1.4375, -3.25, -6.90625, 0.7109375, -1.609375, -6.53125, 1.8515625, -3.625, 0.2080078125, 2.921875, 0.515625, 4.5625, -4.9375, 1.609375, -2.734375, -3.484375, -2.3125, -1.25, 0.224609375, -4.65625, 3.609375, 1.859375, -6.15625, 5.9375, 7.59375, 4.71875, -0.71875, -4.28125, 4.21875, -1.609375, 4.875, 0.83203125, 3.90625, 1.421875, 2.828125, 0.0419921875, 7.15625, 0.5078125, 1.609375, 7.53125, -5.40625, -5.09375, 3.875, -4.6875, 7.78125, -1.65625, -2.984375, 7.6875, 5.9375, 7.46875, 3.625, -3.4375, 7.625, -1.0703125, 3.203125, 3.78125, -0.62109375, 2.453125, 3.6875, 1.5078125, -4.40625, 1.1953125, 5.3125, -2.78125, -0.59765625, -1.7421875, 7.40625, 2.6875, 1.6328125, -3.078125, 2.15625, -2.703125, 0.126953125, -2.546875, 2.703125, 2.3125, -0.83203125, 1.5859375, -4.375, -5.96875, 1.7578125, 0.66796875, 2.546875, 9.5625, 3.78125, -3.65625, 4.46875, -5.25, -1.84375, -0.2734375, 6.84375, -2.984375, -3.3125, -0.39453125, -2.65625, 4.5, -4.3125, -4.59375, -1.75, -1.9921875, 7.71875, 3.796875, 0.349609375, -4.90625, 3.375, -4.0, -6.1875, 4.75, 1.265625, 3.6875, 1.2734375, 3.421875, -2.609375, -4.125, 2.71875, -3.21875, -2.765625, -1.8203125, 0.06982421875, -1.4140625, -5.5, -2.578125, -8.875, 2.5, -6.40625, -4.40625, 0.208984375, -2.953125, 6.1875, -5.15625, 1.0703125, -0.1572265625, -4.6875, 2.09375, -0.6875, 3.09375, 3.296875, 8.625, 5.34375, -1.4765625, -0.95703125, 4.40625, 2.625, 2.5625, -6.46875, -0.09716796875, -2.953125, 1.1171875, -0.392578125, 3.640625, 1.265625, 3.140625, -1.8671875, -3.78125, -1.640625, -0.06787109375, 1.515625, 9.0625, -0.1689453125, -3.828125, -1.3828125, -1.8515625, 1.9296875, -6.15625, 0.25390625, 0.625, 0.9296875, -2.390625, -0.953125, -5.6875, -1.9765625, -2.171875, 1.6640625, -4.625, 3.125, 5.96875, -8.25, 1.703125, 2.703125, -2.546875, -1.5859375, -0.53125, -1.1875, -1.234375, -6.71875, 4.59375, 4.3125, -3.25, -5.875, 2.078125, -2.296875, 0.56640625, -1.2734375, 2.765625, 2.78125], "dtype": "bfloat16"}], "outputs": [{"output": [7.0, 2.0, 4.0, 9.0, 7.0, -4.0, 4.0, -1.0, 0.0, 2.0, 1.0, 6.0, 3.0, 0.0, 2.0, 1.0, 6.0, -1.0, 1.0, -3.0, -10.0, 3.0, 3.0, -3.0, 9.0, -6.0, 0.0, -1.0, 6.0, 6.0, 1.0, 2.0, -4.0, -8.0, -1.0, 1.0, 5.0, 5.0, -2.0, -1.0, -4.0, -6.0, -7.0, 8.0, -2.0, -2.0, -5.0, 3.0, -6.0, -1.0, -4.0, 2.0, -2.0, -5.0, 0.0, 2.0, 0.0, 1.0, -3.0, -1.0, -3.0, -1.0, -3.0, -7.0, 1.0, -2.0, -7.0, 2.0, -4.0, 0.0, 3.0, 1.0, 5.0, -5.0, 2.0, -3.0, -3.0, -2.0, -1.0, 0.0, -5.0, 4.0, 2.0, -6.0, 6.0, 8.0, 5.0, -1.0, -4.0, 4.0, -2.0, 5.0, 1.0, 4.0, 1.0, 3.0, 0.0, 7.0, 1.0, 2.0, 8.0, -5.0, -5.0, 4.0, -5.0, 8.0, -2.0, -3.0, 8.0, 6.0, 7.0, 4.0, -3.0, 8.0, -1.0, 3.0, 4.0, -1.0, 2.0, 4.0, 2.0, -4.0, 1.0, 5.0, -3.0, -1.0, -2.0, 7.0, 3.0, 2.0, -3.0, 2.0, -3.0, 0.0, -3.0, 3.0, 2.0, -1.0, 2.0, -4.0, -6.0, 2.0, 1.0, 3.0, 10.0, 4.0, -4.0, 4.0, -5.0, -2.0, 0.0, 7.0, -3.0, -3.0, 0.0, -3.0, 5.0, -4.0, -5.0, -2.0, -2.0, 8.0, 4.0, 0.0, -5.0, 3.0, -4.0, -6.0, 5.0, 1.0, 4.0, 1.0, 3.0, -3.0, -4.0, 3.0, -3.0, -3.0, -2.0, 0.0, -1.0, -5.0, -3.0, -9.0, 3.0, -6.0, -4.0, 0.0, -3.0, 6.0, -5.0, 1.0, 0.0, -5.0, 2.0, -1.0, 3.0, 3.0, 9.0, 5.0, -1.0, -1.0, 4.0, 3.0, 3.0, -6.0, 0.0, -3.0, 1.0, 0.0, 4.0, 1.0, 3.0, -2.0, -4.0, -2.0, 0.0, 2.0, 9.0, 0.0, -4.0, -1.0, -2.0, 2.0, -6.0, 0.0, 1.0, 1.0, -2.0, -1.0, -6.0, -2.0, -2.0, 2.0, -5.0, 3.0, 6.0, -8.0, 2.0, 3.0, -3.0, -2.0, -1.0, -1.0, -1.0, -7.0, 5.0, 4.0, -3.0, -6.0, 2.0, -2.0, 1.0, -1.0, 3.0, 3.0], "dtype": "bfloat16"}]}}
{"kernel_name": "rsqrt_bfloat16", "prompt": "/*\nThis AIE kernel computes the reciprocal square root (1/sqrt(x)) for each element of the bfloat16 input vector of length 256, producing a bfloat16 output vector. Nonpositive inputs yield 0 by convention.\n>>> rsqrt_bfloat16([1.8671875, 0.5, 1.078125, 2.34375, 1.96875, 0.0, 1.046875, 0.251953125])\n[0.73046875, 1.4140625, 0.9609375, 0.65234375, 0.7109375, 0.0, 0.9765625, 2.0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid rsqrt_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n    constexpr float THREE_HALFS = 1.5f;\n    constexpr float HALF = 0.5f;\n\n    for (int i = 0; i < N; ++i) {\n        float x = float(input[i]);\n        if (x <= 0.0f) {\n            output[i] = bfloat16(0.0f);\n            continue;\n        }\n\n        union { uint32_t u; float f; } fu{ .f = x };\n        union { uint32_t u; float f; } gu{ .u = 0x5f3759dfu - (fu.u >> 1) };\n        float y = gu.f;\n\n        y = y * (THREE_HALFS - HALF * x * y * y);\n        y = y * (THREE_HALFS - HALF * x * y * y);\n\n        output[i] = bfloat16(y);\n    }\n}", "program_code": "extern \"C\" {\n    void rsqrt_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        rsqrt_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [1.8671875, 0.5, 1.078125, 2.34375, 1.96875, 0.0, 1.046875, 0.251953125, 0.203125, 0.51171875, -1.0, 1.5546875, 0.859375, 0.2216796875, 0.54296875, 0.43359375, 1.59375, 0.3046875, 0.412109375, 0.953125, 2.65625, 0.75390625, 0.96484375, 0.84375, 2.375, 1.5546875, 0.1455078125, 0.287109375, 1.6328125, 1.5703125, 0.255859375, 0.478515625, 0.98828125, 2.078125, 0.447265625, 0.255859375, 1.328125, 1.3046875, 0.48828125, 0.40234375, 1.1484375, 1.5234375, 1.8046875, 2.046875, 0.609375, 0.5390625, 1.3515625, 0.87890625, 1.7109375, 0.3125, 0.99609375, 0.486328125, 0.609375, 1.28125, 0.1279296875, 0.52734375, 0.1669921875, 0.40234375, 0.734375, 0.462890625, 0.7734375, 0.458984375, 0.9140625, 1.828125, 0.27734375, 0.5, 1.7265625, 0.5625, 1.0078125, 0.15234375, 0.828125, 0.228515625, 1.2421875, 1.3359375, 0.50390625, 0.78515625, 0.97265625, 0.6796875, 0.412109375, 0.15625, 1.265625, 1.0, 0.56640625, 1.6328125, 1.5859375, 1.9921875, 1.28125, 0.279296875, 1.171875, 1.15625, 0.50390625, 1.3203125, 0.30859375, 1.078125, 0.45703125, 0.8046875, 0.1103515625, 1.8828125, 0.2265625, 0.50390625, 1.984375, 1.4453125, 1.3671875, 1.0703125, 1.2734375, 2.046875, 0.51171875, 0.84765625, 2.015625, 1.578125, 1.96875, 1.0078125, 0.9609375, 2.015625, 0.3671875, 0.90234375, 1.046875, 0.255859375, 0.71484375, 1.0234375, 0.4765625, 1.203125, 0.3984375, 1.4296875, 0.79296875, 0.25, 0.53515625, 1.953125, 0.7734375, 0.5078125, 0.87109375, 0.640625, 0.7734375, 0.1318359375, 0.734375, 0.77734375, 0.67578125, 0.30859375, 0.49609375, 1.1953125, 1.59375, 0.5390625, 0.267578125, 0.734375, 2.484375, 1.046875, 1.015625, 1.21875, 1.4140625, 0.5625, 0.16796875, 1.8125, 0.84375, 0.92578125, 0.1982421875, 0.76171875, 1.2265625, 1.1796875, 1.25, 0.5390625, 0.59765625, 2.03125, 1.046875, 0.1875, 1.328125, 0.9453125, 1.1015625, 1.6484375, 1.2890625, 0.416015625, 1.0234375, 0.41796875, 0.95703125, 0.75, 1.1328125, 0.78125, 0.90234375, 0.7890625, 0.5546875, 0.11767578125, 0.453125, 1.4765625, 0.7421875, 2.328125, 0.7265625, 1.703125, 1.203125, 0.15234375, 0.83984375, 1.640625, 1.390625, 0.3671875, 0.1396484375, 1.265625, 0.625, 0.271484375, 0.87109375, 0.921875, 2.265625, 1.4375, 0.46875, 0.33984375, 1.203125, 0.75390625, 0.73828125, 1.71875, 0.12451171875, 0.83984375, 0.380859375, 0.1982421875, 1.0078125, 0.41796875, 0.88671875, 0.56640625, 1.046875, 0.51171875, 0.1171875, 0.478515625, 2.359375, 0.142578125, 1.0546875, 0.4453125, 0.5625, 0.58203125, 1.640625, 0.1630859375, 0.255859375, 0.33203125, 0.69921875, 0.337890625, 1.5234375, 0.59375, 0.64453125, 0.515625, 1.2578125, 0.8828125, 1.59375, 2.171875, 0.52734375, 0.77734375, 0.73828125, 0.498046875, 0.232421875, 0.3984375, 0.408203125, 1.7734375, 1.25, 1.1796875, 0.9140625, 1.5703125, 0.62109375, 0.67578125, 0.2421875, 0.419921875, 0.79296875, 0.79296875], "dtype": "bfloat16"}], "outputs": [{"output": [0.73046875, 1.4140625, 0.9609375, 0.65234375, 0.7109375, 0.0, 0.9765625, 2.0, 2.21875, 1.3984375, 0.0, 0.80078125, 1.078125, 2.125, 1.3515625, 1.515625, 0.7890625, 1.8125, 1.5625, 1.0234375, 0.61328125, 1.15625, 1.0234375, 1.0859375, 0.6484375, 0.80078125, 2.625, 1.8671875, 0.78125, 0.80078125, 1.984375, 1.4453125, 1.0078125, 0.69140625, 1.5, 1.984375, 0.86328125, 0.875, 1.4296875, 1.578125, 0.93359375, 0.80859375, 0.74609375, 0.69921875, 1.28125, 1.359375, 0.859375, 1.0703125, 0.765625, 1.7890625, 1.0078125, 1.4296875, 1.28125, 0.8828125, 2.796875, 1.375, 2.453125, 1.578125, 1.171875, 1.46875, 1.140625, 1.4765625, 1.046875, 0.73828125, 1.8984375, 1.4140625, 0.76171875, 1.3359375, 1.0, 2.5625, 1.1015625, 2.09375, 0.89453125, 0.86328125, 1.40625, 1.125, 1.015625, 1.2109375, 1.5625, 2.53125, 0.890625, 1.0, 1.328125, 0.78125, 0.796875, 0.70703125, 0.8828125, 1.8984375, 0.921875, 0.92578125, 1.40625, 0.87109375, 1.8046875, 0.9609375, 1.4765625, 1.109375, 3.015625, 0.7265625, 2.09375, 1.40625, 0.7109375, 0.83203125, 0.8515625, 0.96875, 0.890625, 0.69921875, 1.3984375, 1.0859375, 0.703125, 0.796875, 0.7109375, 1.0, 1.0234375, 0.703125, 1.6484375, 1.0546875, 0.9765625, 1.984375, 1.1875, 0.9921875, 1.4453125, 0.9140625, 1.578125, 0.8359375, 1.125, 2.0, 1.3671875, 0.71484375, 1.140625, 1.40625, 1.0703125, 1.25, 1.140625, 2.75, 1.171875, 1.1328125, 1.21875, 1.8046875, 1.421875, 0.9140625, 0.7890625, 1.359375, 1.9375, 1.171875, 0.6328125, 0.9765625, 0.9921875, 0.90625, 0.84375, 1.3359375, 2.4375, 0.74609375, 1.0859375, 1.0390625, 2.25, 1.1484375, 0.90234375, 0.921875, 0.89453125, 1.359375, 1.2890625, 0.703125, 0.9765625, 2.3125, 0.86328125, 1.03125, 0.95703125, 0.78125, 0.8828125, 1.5546875, 0.9921875, 1.5390625, 1.0234375, 1.15625, 0.94140625, 1.1328125, 1.0546875, 1.125, 1.34375, 2.90625, 1.4921875, 0.8203125, 1.15625, 0.65625, 1.171875, 0.765625, 0.9140625, 2.5625, 1.0859375, 0.78125, 0.84765625, 1.6484375, 2.6875, 0.890625, 1.265625, 1.921875, 1.0703125, 1.0390625, 0.6640625, 0.8359375, 1.4609375, 1.71875, 0.9140625, 1.15625, 1.1640625, 0.76171875, 2.828125, 1.0859375, 1.6171875, 2.25, 1.0, 1.5390625, 1.0625, 1.328125, 0.9765625, 1.3984375, 2.921875, 1.4453125, 0.6484375, 2.65625, 0.9765625, 1.5, 1.3359375, 1.3125, 0.78125, 2.46875, 1.984375, 1.7265625, 1.1953125, 1.71875, 0.80859375, 1.296875, 1.2421875, 1.390625, 0.890625, 1.0625, 0.7890625, 0.67578125, 1.375, 1.1328125, 1.1640625, 1.4140625, 2.078125, 1.578125, 1.5625, 0.75390625, 0.89453125, 0.921875, 1.046875, 0.80078125, 1.265625, 1.21875, 2.03125, 1.5390625, 1.125, 1.125], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "shuffle_int32", "prompt": "/*\nThis AIE kernel performs an in-place Fisher\u2013Yates shuffle of a length-256 int32 vector, using a runtime-provided seed parameter. The input is copied to output and then shuffled.\n>>> shuffle_int32([-316, -441, 653, 216, -165, -237, 731, 383], 12345)\n[-441, -237, -316, 216, 383, 731, -165, 653]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\noutput size: 256\nseed: 12345\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid shuffle_int32(int32_t *input, int32_t *output, int32_t seed) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t N = 256;\n\n    for (int i = 0; i < N; ++i) {\n        output[i] = input[i];\n    }\n\n    uint32_t state = static_cast<uint32_t>(seed);\n\n    for (int i = N - 1; i > 0; --i) {\n        state ^= state << 13;\n        state ^= state >> 17;\n        state ^= state << 5;\n\n        int j = static_cast<int>(state % uint32_t(i + 1));\n        int32_t tmp = output[i];\n        output[i] = output[j];\n        output[j] = tmp;\n    }\n}", "program_code": "extern \"C\" {\n    void shuffle_int32_wrapper(int32_t *input, int32_t *output, int32_t seed) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        shuffle_int32(input, output, seed);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [-316, -441, 653, 216, -165, -237, 731, 383, 33, 747, -723, 778, 828, -401, 94, 496, -400, 420, -686, -295, 510, -449, -913, -826, 624, -151, 701, -463, -155, -928, -223, 940, -885, -24, -245, 733, 871, 455, -552, -150, -901, 201, -245, -203, -341, 171, -90, -577, 312, 985, 289, -303, -361, -456, -457, -286, -756, -849, -325, -490, 483, -118, 207, -972, -198, -872, -872, 956, 77, 925, 574, 512, -244, -727, -665, -612, 641, 66, 466, -457, -112, -743, 345, 961, -943, -709, 894, 143, -221, -570, 106, -909, 920, -602, -389, 589, -92, -367, 962, -916, -797, -676, -226, -36, 71, -361, 155, -28, -132, 204, 870, 167, 684, 251, -46, -209, -281, -91, -627, 877, -440, 329, 605, -831, 699, 472, 119, 221, 630, -744, 905, 714, 316, 954, -184, 885, -613, 634, 578, -27, -632, -83, -799, -617, 536, 930, -630, -445, -46, 407, -977, 723, -870, -623, -902, 598, -69, -266, -877, 987, -406, 966, -261, 172, -791, -438, 435, -218, 65, 82, -295, 60, -222, -914, 67, -128, -989, -230, -693, 104, -968, 206, 152, -194, -725, 198, 578, 395, 208, -556, -512, 613, -714, 304, -363, -230, 539, -906, 250, 899, 293, 904, -704, 352, 43, -393, 864, 434, -550, 272, -820, -677, 4, 853, 806, 888, 284, 987, -251, -861, 20, -402, 485, -111, 645, -157, -304, 552, 176, -75, -851, 134, -975, 488, -44, 913, -114, 141, 469, 619, -327, 896, -72, 252, 531, -237, -879, 350, -531, -713, -475, 863, 720, 176, -409, -959], "dtype": "int32"}], "outputs": [{"output": [-83, 312, -743, -361, 905, 488, -194, -709, -877, -623, -46, -799, 152, -756, -223, 864, -989, -46, 251, -744, 885, -550, -713, -612, 395, 206, 94, -677, 167, -797, 293, -266, 134, -909, -389, -184, -165, -531, -463, 496, 896, -218, -150, 67, -393, -490, -128, 250, -831, 899, 619, 33, -295, -968, -237, -901, 172, 733, 176, 641, 871, 954, -456, 888, 216, 920, 624, 407, 987, 956, 966, 420, -676, -251, 329, -316, 316, 472, 77, 701, -879, -157, 483, 434, -327, -281, 961, -28, -155, 352, 747, -928, -943, -209, -75, -438, 435, 208, -406, -975, -725, 455, -972, 613, 913, -222, -90, -714, -325, 466, 940, 20, 894, -870, -449, 904, -230, 469, 598, 985, 66, 350, 699, -151, -230, -791, -361, -441, -552, 634, -245, 578, -686, -861, -512, -723, 201, -363, -114, -226, 272, -820, -570, -92, 962, -221, 720, -906, -826, 510, 589, -245, -959, 574, 221, -303, -111, 653, 345, 207, 176, -475, -627, 71, 930, 141, -727, -632, -91, -409, -132, 143, 731, -341, 289, 531, -112, -665, 539, 60, 645, 828, 630, -613, -72, -602, -916, 106, 714, -36, -914, -261, 383, -617, 853, -851, 684, 284, 723, -198, -440, 43, 104, -849, 863, -630, -237, 252, -367, -118, -977, -402, 870, -295, -902, -913, -872, -203, -401, -693, -286, 778, -44, 171, 155, 877, -400, 4, 512, -24, 925, 204, -872, -304, 82, -445, -27, -457, -704, -556, 485, 987, 119, 806, 304, -69, -457, 536, 198, 65, -577, 552, -885, 578, -244, 605], "dtype": "int32"}], "rtps": [{"seed": 12345, "dtype": "int32"}]}}
{"kernel_name": "sigmoid_bfloat16", "prompt": "/*\nThis AIE kernel implements the sigmoid activation function on a bfloat16 vector\n>>> sigmoid_bfloat16([5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125])\n[0.9921875, 0.76953125, 0.94921875, 1.0, 1.0, 0.05029296875, 0.94921875, 0.390625]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid sigmoid_bfloat16(bfloat16 *input_vector, bfloat16 *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    constexpr float exp_high = 88.3762626647949f;\n    constexpr float exp_low = -87.3362626647949f;\n    \n    for (uint32_t i = 0; i < vector_size; i++) {\n        float x = (float)input_vector[i];\n        float result;\n\n        if (x > exp_high) {\n            result = 1.0f;\n        }\n        else if (x < exp_low) {\n            result = 0.0f;\n        }\n        else {\n            float t = -x;\n            if (t > 0) {\n                float sum = 1.0f + t;\n                float term = t;\n                for(int k = 2; k <= 6; k++) {\n                    term *= (t / k);\n                    sum += term;\n                }\n                result = 1.0f / (1.0f + sum);\n            }\n            else {\n                t = -t;\n                float sum = 1.0f + t;\n                float term = t;\n                for(int k = 2; k <= 6; k++) {\n                    term *= (t / k);\n                    sum += term;\n                }\n                result = sum / (1.0f + sum);\n            }\n        }\n        output_vector[i] = (bfloat16)result;\n    }\n}", "program_code": "extern \"C\" {\n    void sigmoid_bfloat16_wrapper(bfloat16 *input_vector, bfloat16 *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        sigmoid_bfloat16(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125, -0.310546875, 1.234375, 0.431640625, 4.375, 2.28125, 0.365234375, 1.328125, 1.0, 4.46875, -0.6171875, 0.9375, -2.5625, -7.65625, 1.9609375, 2.59375, -2.21875, 6.8125, -4.375, 0.1376953125, -0.5625, 4.59375, 4.40625, 0.46484375, 1.1328125, -2.65625, -5.9375, -1.046875, 0.46875, 3.6875, 3.609375, -1.1640625, -0.90625, -3.140625, -4.25, -5.125, 5.84375, -1.53125, -1.3125, -3.765625, 2.328125, -4.84375, -0.63671875, -2.6875, 1.1640625, -1.53125, -3.546875, -0.08447265625, 1.28125, 0.19921875, 0.90625, -1.90625, -1.0859375, -2.015625, -1.078125, -2.4375, -5.1875, 0.53125, -1.203125, -4.875, 1.390625, -2.71875, 0.15625, 2.1875, 0.38671875, 3.421875, -3.703125, 1.203125, -2.046875, -2.609375, -1.734375, -0.93359375, 0.1689453125, -3.5, 2.703125, 1.3984375, -4.59375, 4.46875, 5.6875, 3.53125, -0.5390625, -3.21875, 3.15625, -1.2109375, 3.671875, 0.625, 2.9375, 1.0703125, 2.125, 0.031494140625, 5.34375, 0.380859375, 1.203125, 5.65625, -4.03125, -3.8125, 2.90625, -3.515625, 5.84375, -1.2421875, -2.25, 5.78125, 4.4375, 5.59375, 2.71875, -2.578125, 5.71875, -0.8046875, 2.40625, 2.84375, -0.46484375, 1.84375, 2.765625, 1.1328125, -3.296875, 0.89453125, 3.984375, -2.078125, -0.44921875, -1.3046875, 5.5625, 2.015625, 1.21875, -2.3125, 1.6171875, -2.015625, 0.095703125, -1.90625, 2.03125, 1.7265625, -0.625, 1.1875, -3.28125, -4.46875, 1.3203125, 0.5, 1.90625, 7.15625, 2.828125, -2.734375, 3.34375, -3.953125, -1.3828125, -0.205078125, 5.125, -2.234375, -2.484375, -0.294921875, -1.9921875, 3.375, -3.234375, -3.4375, -1.3125, -1.4921875, 5.78125, 2.84375, 0.26171875, -3.671875, 2.53125, -3.0, -4.625, 3.5625, 0.94921875, 2.765625, 0.95703125, 2.578125, -1.953125, -3.109375, 2.046875, -2.40625, -2.0625, -1.3671875, 0.052490234375, -1.0625, -4.125, -1.9296875, -6.65625, 1.875, -4.8125, -3.3125, 0.15625, -2.21875, 4.625, -3.875, 0.80078125, -0.11767578125, -3.5, 1.5703125, -0.515625, 2.3125, 2.46875, 6.5, 4.0, -1.109375, -0.71875, 3.296875, 1.96875, 1.921875, -4.84375, -0.07275390625, -2.21875, 0.83984375, -0.294921875, 2.734375, 0.953125, 2.359375, -1.3984375, -2.828125, -1.2265625, -0.051025390625, 1.140625, 6.78125, -0.126953125, -2.875, -1.0390625, -1.390625, 1.4453125, -4.625, 0.189453125, 0.46875, 0.6953125, -1.7890625, -0.71484375, -4.28125, -1.4765625, -1.625, 1.25, -3.46875, 2.34375, 4.46875, -6.21875, 1.28125, 2.03125, -1.9140625, -1.1953125, -0.3984375, -0.89453125, -0.92578125, -5.03125, 3.453125, 3.234375, -2.4375, -4.40625, 1.5625, -1.7265625, 0.42578125, -0.95703125, 2.078125, 2.078125], "dtype": "bfloat16"}], "outputs": [{"output_vector": [0.9921875, 0.76953125, 0.94921875, 1.0, 1.0, 0.05029296875, 0.94921875, 0.390625, 0.421875, 0.77734375, 0.60546875, 0.984375, 0.90625, 0.58984375, 0.7890625, 0.73046875, 0.9921875, 0.3515625, 0.71875, 0.07177734375, 0.0004730224609375, 0.875, 0.92578125, 0.09814453125, 1.0, 0.012451171875, 0.53515625, 0.36328125, 0.9921875, 0.984375, 0.6171875, 0.7578125, 0.0654296875, 0.00262451171875, 0.259765625, 0.6171875, 0.9765625, 0.9765625, 0.2392578125, 0.2890625, 0.04150390625, 0.01409912109375, 0.00592041015625, 1.0, 0.177734375, 0.2119140625, 0.0225830078125, 0.9140625, 0.0078125, 0.345703125, 0.06396484375, 0.76171875, 0.177734375, 0.0279541015625, 0.478515625, 0.78125, 0.55078125, 0.7109375, 0.1298828125, 0.251953125, 0.11767578125, 0.25390625, 0.08056640625, 0.00555419921875, 0.62890625, 0.2314453125, 0.007568359375, 0.80078125, 0.0615234375, 0.5390625, 0.90234375, 0.59375, 0.96875, 0.0240478515625, 0.76953125, 0.1142578125, 0.06884765625, 0.150390625, 0.28125, 0.54296875, 0.0294189453125, 0.93359375, 0.80078125, 0.010009765625, 0.9921875, 1.0, 0.96875, 0.3671875, 0.03857421875, 0.9609375, 0.228515625, 0.9765625, 0.65234375, 0.94921875, 0.74609375, 0.89453125, 0.5078125, 0.9921875, 0.59375, 0.76953125, 1.0, 0.0174560546875, 0.0216064453125, 0.94921875, 0.02880859375, 1.0, 0.2236328125, 0.09521484375, 1.0, 0.984375, 1.0, 0.94140625, 0.0703125, 1.0, 0.30859375, 0.9140625, 0.94921875, 0.384765625, 0.86328125, 0.94140625, 0.7578125, 0.03564453125, 0.7109375, 0.984375, 0.111328125, 0.390625, 0.212890625, 1.0, 0.8828125, 0.76953125, 0.08984375, 0.8359375, 0.11767578125, 0.5234375, 0.1298828125, 0.8828125, 0.84765625, 0.34765625, 0.765625, 0.0361328125, 0.0113525390625, 0.7890625, 0.62109375, 0.87109375, 1.0, 0.94140625, 0.06103515625, 0.9609375, 0.0189208984375, 0.2001953125, 0.451171875, 0.9921875, 0.09716796875, 0.0771484375, 0.42578125, 0.11962890625, 0.96875, 0.037841796875, 0.03125, 0.2119140625, 0.18359375, 1.0, 0.94921875, 0.56640625, 0.02490234375, 0.92578125, 0.04736328125, 0.00970458984375, 0.96875, 0.71875, 0.94140625, 0.72265625, 0.92578125, 0.1240234375, 0.042724609375, 0.890625, 0.0830078125, 0.11279296875, 0.2021484375, 0.51171875, 0.2578125, 0.0159912109375, 0.126953125, 0.00128936767578125, 0.86328125, 0.008056640625, 0.03515625, 0.5390625, 0.09814453125, 0.9921875, 0.020263671875, 0.6875, 0.470703125, 0.0294189453125, 0.82421875, 0.375, 0.90625, 0.921875, 1.0, 0.984375, 0.248046875, 0.328125, 0.9609375, 0.875, 0.87109375, 0.0078125, 0.48046875, 0.09814453125, 0.69921875, 0.42578125, 0.94140625, 0.72265625, 0.9140625, 0.197265625, 0.055908203125, 0.2265625, 0.484375, 0.7578125, 1.0, 0.470703125, 0.05322265625, 0.26171875, 0.19921875, 0.80859375, 0.00970458984375, 0.546875, 0.6171875, 0.66796875, 0.1435546875, 0.328125, 0.01361083984375, 0.1865234375, 0.1640625, 0.77734375, 0.0302734375, 0.9140625, 0.9921875, 0.001983642578125, 0.78125, 0.8828125, 0.12890625, 0.2314453125, 0.400390625, 0.2890625, 0.283203125, 0.006500244140625, 0.96875, 0.9609375, 0.08056640625, 0.01202392578125, 0.82421875, 0.1513671875, 0.60546875, 0.27734375, 0.890625, 0.890625], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "sign_int8", "prompt": "/*\nThis AIE kernel computes the elementwise sign of a vector of int8 values. For each input value: if positive return 1, if negative return -1, otherwise 0.\n>>> sign_int8([21, -42, -7, 31, 60, 32, -61, 40])\n[1, -1, -1, 1, 1, 1, -1, 1]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid sign_int8(int8_t *input_vector, int8_t *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    for (uint32_t i = 0; i < vector_size; i++) {\n        int8_t val = input_vector[i];\n        if (val > 0)\n            output_vector[i] = 1;\n        else if (val < 0)\n            output_vector[i] = -1;\n        else\n            output_vector[i] = 0;\n    }\n}", "program_code": "extern \"C\" {\n    void sign_int8_wrapper(int8_t *input_vector, int8_t *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        sign_int8(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [21, -42, -7, 31, 60, 32, -61, 40, 56, -22, -30, -21, 31, -46, -22, 22, -21, 17, -53, -29, -8, 56, 33, -16, 23, 56, 8, 8, 27, -2, -49, -50, 36, 57, 10, 16, 26, -51, -1, -1, -39, -46, 57, -13, -44, -50, 63, -37, -6, -24, -20, -16, -39, -5, -23, 36, -42, -2, 0, 25, 6, 9, 48, 38, -41, -31, 19, 16, -18, 33, -18, 63, 24, -16, -44, 35, -65, -44, -54, 28, 0, -16, -34, 46, -4, -24, 48, 9, 39, -40, -45, -36, 31, -47, -22, -44, -60, 64, -25, -49, 26, -1, 22, -44, 27, -27, -3, 64, -64, -18, 48, -56, -18, 59, 25, 53, 4, -22, -11, 27, -57, 11, 9, -10, -53, -7, -24, 15, 49, 60, -5, -59, 27, 11, -26, -45, -45, 38, 18, -10, -1, 46, 43, -53, -32, 64, 52, 37, 42, 29, 33, 42, -44, -49, -60, -13, 41, 4, 26, -3, 13, -10, 64, -52, 43, 10, 22, 9, -51, -32, -48, -29, 44, 64, -52, 34, -35, -43, -21, -49, 1, 51, 62, -47, 63, 33, 62, -25, 3, 29, -1, 39, 19, 23, -53, -8, -51, 55, 8, 45, -64, -31, -43, 61, -10, -20, -46, 10, 7, 34, -44, -24, -19, 22, 35, -51, 39, -13, -34, -57, -12, 17, -18, -53, -7, 30, 32, 3, -19, 54, -22, 15, 8, -29, -22, -59, -25, -5, 36, 45, -54, 48, -24, 2, -35, 5, -63, 63, 3, 38, 4, -63, -28, 44, 48, -40], "dtype": "int8"}], "outputs": [{"output_vector": [1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 0, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 0, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1], "dtype": "int8"}]}}
{"kernel_name": "silu_bfloat16", "prompt": "/*\nThis AIE kernel computes the SiLU (Sigmoid Linear Unit, also known as Swish) activation, elementwise on a bfloat16 input vector (length 256). Each output is computed as x*sigmoid(x) with sigmoid(x)=1/(1+exp(-x)).\n>>> silu_bfloat16([5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125])\n[5.25, 0.92578125, 2.796875, 6.71875, 5.5625, -0.1474609375, 2.6875, -0.17578125]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid silu_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n    // constants for exp2-approximation\n    const float LOG2E = 1.4426950408889634f;  // log2(e)\n    const float C1    = 0.6931471805599453f;  // ln2\n    const float C2    = 0.2402265069591010f;  // (ln2)^2/2\n    const float C3    = 0.05550410866482158f; // (ln2)^3/6\n    \n    for (int i = 0; i < N; ++i) {\n        float x = float(input[i]);\n        float sigmoid;\n        \n        // Calculate sigmoid(x) = 1/(1+e^(-x))\n        if (x > 16.0f) {\n            // For very large x, sigmoid(x) \u2248 1\n            sigmoid = 1.0f;\n        }\n        else if (x < -16.0f) {\n            // For very negative x, sigmoid(x) \u2248 0\n            sigmoid = 0.0f;\n        }\n        else {\n            // Calculate e^(-x) using the same exp approximation as in softplus\n            float t = -x * LOG2E;\n            int   ip = int(t);\n            float fp = t - float(ip);\n            unsigned bits = unsigned(ip + 127) << 23;\n            union { unsigned u; float f; } pun; pun.u = bits;\n            float p2i = pun.f;\n            float p2f = 1.0f\n                      + C1 * fp\n                      + C2 * fp * fp\n                      + C3 * fp * fp * fp;\n            float exp_neg_x = p2i * p2f;\n            \n            // sigmoid(x) = 1/(1+e^(-x))\n            sigmoid = 1.0f / (1.0f + exp_neg_x);\n        }\n        \n        // SiLU(x) = x * sigmoid(x)\n        output[i] = bfloat16(x * sigmoid);\n    }\n}", "program_code": "extern \"C\" {\n    void silu_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        silu_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125, -0.310546875, 1.234375, 0.431640625, 4.375, 2.28125, 0.365234375, 1.328125, 1.0, 4.46875, -0.6171875, 0.9375, -2.5625, -7.65625, 1.9609375, 2.59375, -2.21875, 6.8125, -4.375, 0.1376953125, -0.5625, 4.59375, 4.40625, 0.46484375, 1.1328125, -2.65625, -5.9375, -1.046875, 0.46875, 3.6875, 3.609375, -1.1640625, -0.90625, -3.140625, -4.25, -5.125, 5.84375, -1.53125, -1.3125, -3.765625, 2.328125, -4.84375, -0.63671875, -2.6875, 1.1640625, -1.53125, -3.546875, -0.08447265625, 1.28125, 0.19921875, 0.90625, -1.90625, -1.0859375, -2.015625, -1.078125, -2.4375, -5.1875, 0.53125, -1.203125, -4.875, 1.390625, -2.71875, 0.15625, 2.1875, 0.38671875, 3.421875, -3.703125, 1.203125, -2.046875, -2.609375, -1.734375, -0.93359375, 0.1689453125, -3.5, 2.703125, 1.3984375, -4.59375, 4.46875, 5.6875, 3.53125, -0.5390625, -3.21875, 3.15625, -1.2109375, 3.671875, 0.625, 2.9375, 1.0703125, 2.125, 0.031494140625, 5.34375, 0.380859375, 1.203125, 5.65625, -4.03125, -3.8125, 2.90625, -3.515625, 5.84375, -1.2421875, -2.25, 5.78125, 4.4375, 5.59375, 2.71875, -2.578125, 5.71875, -0.8046875, 2.40625, 2.84375, -0.46484375, 1.84375, 2.765625, 1.1328125, -3.296875, 0.89453125, 3.984375, -2.078125, -0.44921875, -1.3046875, 5.5625, 2.015625, 1.21875, -2.3125, 1.6171875, -2.015625, 0.095703125, -1.90625, 2.03125, 1.7265625, -0.625, 1.1875, -3.28125, -4.46875, 1.3203125, 0.5, 1.90625, 7.15625, 2.828125, -2.734375, 3.34375, -3.953125, -1.3828125, -0.205078125, 5.125, -2.234375, -2.484375, -0.294921875, -1.9921875, 3.375, -3.234375, -3.4375, -1.3125, -1.4921875, 5.78125, 2.84375, 0.26171875, -3.671875, 2.53125, -3.0, -4.625, 3.5625, 0.94921875, 2.765625, 0.95703125, 2.578125, -1.953125, -3.109375, 2.046875, -2.40625, -2.0625, -1.3671875, 0.052490234375, -1.0625, -4.125, -1.9296875, -6.65625, 1.875, -4.8125, -3.3125, 0.15625, -2.21875, 4.625, -3.875, 0.80078125, -0.11767578125, -3.5, 1.5703125, -0.515625, 2.3125, 2.46875, 6.5, 4.0, -1.109375, -0.71875, 3.296875, 1.96875, 1.921875, -4.84375, -0.07275390625, -2.21875, 0.83984375, -0.294921875, 2.734375, 0.953125, 2.359375, -1.3984375, -2.828125, -1.2265625, -0.051025390625, 1.140625, 6.78125, -0.126953125, -2.875, -1.0390625, -1.390625, 1.4453125, -4.625, 0.189453125, 0.46875, 0.6953125, -1.7890625, -0.71484375, -4.28125, -1.4765625, -1.625, 1.25, -3.46875, 2.34375, 4.46875, -6.21875, 1.28125, 2.03125, -1.9140625, -1.1953125, -0.3984375, -0.89453125, -0.92578125, -5.03125, 3.453125, 3.234375, -2.4375, -4.40625, 1.5625, -1.7265625, 0.42578125, -0.95703125, 2.078125, 2.078125], "dtype": "bfloat16"}], "outputs": [{"output": [5.25, 0.92578125, 2.796875, 6.71875, 5.5625, -0.1474609375, 2.6875, -0.17578125, -0.1318359375, 0.95703125, 0.26171875, 4.3125, 2.0625, 0.2158203125, 1.046875, 0.73046875, 4.40625, -0.2158203125, 0.671875, -0.18359375, -0.0036163330078125, 1.71875, 2.40625, -0.2177734375, 6.8125, -0.054443359375, 0.07373046875, -0.2041015625, 4.5625, 4.34375, 0.28515625, 0.85546875, -0.173828125, -0.015625, -0.271484375, 0.2890625, 3.59375, 3.515625, -0.27734375, -0.26171875, -0.1298828125, -0.059814453125, -0.0302734375, 5.8125, -0.271484375, -0.279296875, -0.08544921875, 2.125, -0.037841796875, -0.220703125, -0.1708984375, 0.88671875, -0.271484375, -0.09912109375, -0.04052734375, 1.0, 0.109375, 0.64453125, -0.2470703125, -0.2734375, -0.2373046875, -0.2734375, -0.1962890625, -0.02880859375, 0.333984375, -0.27734375, -0.036865234375, 1.1171875, -0.16796875, 0.083984375, 1.96875, 0.23046875, 3.3125, -0.0888671875, 0.92578125, -0.234375, -0.1787109375, -0.259765625, -0.263671875, 0.091796875, -0.1025390625, 2.53125, 1.125, -0.0458984375, 4.40625, 5.65625, 3.4375, -0.1982421875, -0.1240234375, 3.03125, -0.27734375, 3.578125, 0.40625, 2.796875, 0.796875, 1.8984375, 0.0159912109375, 5.3125, 0.2265625, 0.92578125, 5.625, -0.0703125, -0.08251953125, 2.75, -0.1015625, 5.8125, -0.27734375, -0.21484375, 5.75, 4.375, 5.5625, 2.546875, -0.181640625, 5.6875, -0.2490234375, 2.203125, 2.6875, -0.1796875, 1.59375, 2.609375, 0.85546875, -0.11767578125, 0.63671875, 3.90625, -0.2314453125, -0.1748046875, -0.279296875, 5.53125, 1.78125, 0.94140625, -0.2080078125, 1.3515625, -0.2373046875, 0.050048828125, -0.2470703125, 1.796875, 1.46875, -0.2177734375, 0.91015625, -0.11865234375, -0.050537109375, 1.0390625, 0.310546875, 1.65625, 7.15625, 2.671875, -0.1669921875, 3.234375, -0.07421875, -0.27734375, -0.09228515625, 5.09375, -0.2158203125, -0.19140625, -0.1259765625, -0.2392578125, 3.265625, -0.12255859375, -0.10693359375, -0.279296875, -0.2734375, 5.75, 2.6875, 0.1474609375, -0.0908203125, 2.34375, -0.142578125, -0.044921875, 3.46875, 0.68359375, 2.609375, 0.69140625, 2.390625, -0.2421875, -0.1328125, 1.8125, -0.19921875, -0.232421875, -0.27734375, 0.0269775390625, -0.2734375, -0.0654296875, -0.2451171875, -0.008544921875, 1.625, -0.038818359375, -0.1162109375, 0.083984375, -0.2177734375, 4.59375, -0.07861328125, 0.55078125, -0.055419921875, -0.1025390625, 1.296875, -0.1923828125, 2.109375, 2.28125, 6.5, 3.921875, -0.275390625, -0.2353515625, 3.171875, 1.7265625, 1.6796875, -0.037841796875, -0.03515625, -0.2177734375, 0.5859375, -0.1259765625, 2.5625, 0.6875, 2.15625, -0.27734375, -0.158203125, -0.27734375, -0.02490234375, 0.86328125, 6.78125, -0.0595703125, -0.1533203125, -0.271484375, -0.27734375, 1.171875, -0.044921875, 0.103515625, 0.2890625, 0.46484375, -0.255859375, -0.234375, -0.058349609375, -0.275390625, -0.267578125, 0.97265625, -0.10498046875, 2.140625, 4.40625, -0.01239013671875, 1.0, 1.796875, -0.24609375, -0.27734375, -0.16015625, -0.259765625, -0.263671875, -0.03271484375, 3.34375, 3.109375, -0.1962890625, -0.05322265625, 1.2890625, -0.26171875, 0.2578125, -0.265625, 1.84375, 1.84375], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "sin_bfloat16", "prompt": "/*\nThis AIE kernel implements the sine function on a bfloat16 vector\n>>> sin_bfloat16([0.61328125, 2.703125, 1.2890625, 0.5625, -0.9609375, 1.8359375, -0.78515625, 4.9375])\n[0.57421875, 0.423828125, 0.9609375, 0.53515625, -0.8203125, 0.96484375, -0.70703125, -0.9765625]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid sin_bfloat16(bfloat16 *input_vector, bfloat16 *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    constexpr float PI = 3.14159265359f;\n\n    for (uint32_t i = 0; i < vector_size; i++) {\n        float x = (float)input_vector[i];\n\n        while (x > PI) x -= 2.0f * PI;\n        while (x < -PI) x += 2.0f * PI;\n\n        float x2 = x * x;\n        float x3 = x2 * x;\n        float x5 = x3 * x2;\n        float x7 = x5 * x2;\n        float x9 = x7 * x2;\n        float x11 = x9 * x2;\n\n        float result = x \n                    - x3 * 0.166666666667f\n                    + x5 * 0.00833333333333f\n                    - x7 * 0.000198412698413f\n                    + x9 * 0.00000275573192f\n                    - x11 * 0.0000000250521084f;\n\n        output_vector[i] = (bfloat16)result;\n    }\n}", "program_code": "extern \"C\" {\n    void sin_bfloat16_wrapper(bfloat16 *input_vector, bfloat16 *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        sin_bfloat16(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [0.61328125, 2.703125, 1.2890625, 0.5625, -0.9609375, 1.8359375, -0.78515625, 4.9375, 5.8125, -1.4609375, 3.671875, 0.36328125, 0.85546875, 5.34375, -5.375, -5.1875, -6.03125, 4.1875, 3.5, 4.65625, 6.0, 3.765625, -0.484375, 3.53125, -4.8125, 1.7578125, -4.46875, 5.59375, 0.275390625, -1.0703125, -2.953125, 3.453125, -0.55078125, 0.859375, -6.0625, 1.4765625, 1.40625, 1.46875, 5.5625, 2.28125, -1.765625, -0.79296875, 2.484375, -5.53125, 2.09375, 2.140625, -3.640625, -4.65625, -2.3125, -1.7109375, 0.8828125, -0.7734375, 6.125, -5.0, -3.65625, -4.25, 1.921875, -3.09375, -0.423828125, -3.21875, -4.28125, -4.90625, 1.9609375, -4.53125, -3.8125, -1.6484375, 4.03125, -5.0625, 4.25, -5.0625, 6.0, -0.39453125, 6.0, 1.3203125, 3.0, -5.78125, -2.734375, -4.78125, -2.5625, -4.78125, -2.28125, -1.078125, -5.46875, 2.421875, 0.8359375, -2.953125, 0.29296875, -5.09375, 0.953125, 5.40625, -2.28125, 2.109375, -4.625, 2.71875, -2.640625, -3.984375, 1.0859375, -6.03125, 4.125, -6.21875, 2.234375, -2.890625, 2.953125, 5.8125, -3.15625, 0.95703125, 1.15625, 0.90625, -3.484375, 5.6875, -0.6640625, 4.34375, 2.5, -2.546875, 3.9375, -1.296875, 4.78125, 1.0234375, 4.8125, 2.421875, 2.828125, 0.0166015625, 5.71875, 1.8125, -0.95703125, 1.3359375, -6.03125, -2.5, 2.015625, -2.640625, 1.484375, -0.89453125, -4.59375, -2.53125, 0.87890625, 1.140625, 0.93359375, 1.921875, 1.9140625, -0.86328125, 4.96875, -1.6640625, -0.8046875, 4.9375, 3.84375, 2.5625, -5.03125, 5.28125, 2.6875, 6.28125, -4.40625, 4.625, -4.25, 1.453125, -4.71875, 4.375, 3.859375, 0.8671875, -1.1640625, -5.40625, 2.484375, -0.58203125, 2.796875, 4.59375, 5.96875, 4.46875, -6.125, -1.7578125, 2.890625, -4.125, 0.263671875, -5.59375, -3.765625, -6.0625, 3.6875, -3.46875, -1.9453125, 5.375, 2.5625, -5.875, -4.21875, 1.5234375, 0.96875, -3.296875, 5.46875, 1.4296875, 0.447265625, 1.1328125, 2.890625, -2.359375, -1.28125, -3.640625, -3.9375, 5.59375, 3.015625, -0.1201171875, -3.421875, -3.09375, -5.5625, -0.82421875, -2.359375, 2.46875, -1.5390625, -4.03125, -5.96875, -5.4375, 2.25, -0.58203125, 0.458984375, 5.0, 6.15625, -3.5625, 2.046875, -2.96875, -6.03125, 3.25, -2.265625, -1.4609375, 1.109375, 4.15625, 1.6171875, 4.6875, -2.84375, 3.75, -3.953125, 5.6875, 2.359375, -3.578125, 5.625, 2.90625, -3.09375, -3.609375, 0.228515625, -5.96875, -3.671875, -0.9453125, -1.578125, -0.45703125, -2.796875, 1.09375, 4.5625, -4.8125, 0.21875, -4.625, 2.71875, -1.3046875, 0.8203125, -3.984375, -4.46875, -0.150390625, -1.8125, 5.53125, 3.328125, 3.125, 5.0625, -5.25], "dtype": "bfloat16"}], "outputs": [{"output_vector": [0.57421875, 0.423828125, 0.9609375, 0.53515625, -0.8203125, 0.96484375, -0.70703125, -0.9765625, -0.453125, -0.9921875, -0.50390625, 0.35546875, 0.75390625, -0.80859375, 0.7890625, 0.890625, 0.2490234375, -0.8671875, -0.3515625, -1.0, -0.279296875, -0.5859375, -0.46484375, -0.37890625, 0.99609375, 0.984375, 0.96875, -0.63671875, 0.271484375, -0.87890625, -0.1875, -0.306640625, -0.5234375, 0.7578125, 0.21875, 0.99609375, 0.98828125, 0.99609375, -0.66015625, 0.7578125, -0.98046875, -0.7109375, 0.609375, 0.68359375, 0.8671875, 0.84375, 0.478515625, 1.0, -0.73828125, -0.98828125, 0.7734375, -0.69921875, -0.1572265625, 0.95703125, 0.4921875, 0.89453125, 0.9375, -0.0478515625, -0.412109375, 0.0771484375, 0.91015625, 0.98046875, 0.92578125, 0.984375, 0.62109375, -0.99609375, -0.77734375, 0.9375, -0.89453125, 0.9375, -0.279296875, -0.384765625, -0.279296875, 0.96875, 0.1416015625, 0.48046875, -0.396484375, 0.99609375, -0.546875, 0.99609375, -0.7578125, -0.8828125, 0.7265625, 0.66015625, 0.7421875, -0.1875, 0.2890625, 0.9296875, 0.81640625, -0.76953125, -0.7578125, 0.859375, 0.99609375, 0.41015625, -0.48046875, 0.74609375, 0.8828125, 0.2490234375, -0.83203125, 0.064453125, 0.7890625, -0.248046875, 0.1875, -0.453125, 0.0146484375, 0.81640625, 0.9140625, 0.7890625, 0.3359375, -0.5625, -0.6171875, -0.93359375, 0.59765625, -0.55859375, -0.71484375, -0.9609375, -0.99609375, 0.85546875, -0.99609375, 0.66015625, 0.30859375, 0.0166015625, -0.53515625, 0.97265625, -0.81640625, 0.97265625, 0.2490234375, -0.59765625, 0.90234375, -0.48046875, 0.99609375, -0.78125, 0.9921875, -0.57421875, 0.76953125, 0.91015625, 0.8046875, 0.9375, 0.94140625, -0.76171875, -0.96875, -0.99609375, -0.71875, -0.9765625, -0.64453125, 0.546875, 0.94921875, -0.84375, 0.439453125, -0.0019378662109375, 0.953125, -0.99609375, 0.89453125, 0.9921875, 1.0, -0.9453125, -0.65625, 0.76171875, -0.91796875, 0.76953125, 0.609375, -0.55078125, 0.337890625, -0.9921875, -0.30859375, -0.96875, 0.1572265625, -0.984375, 0.248046875, 0.83203125, 0.259765625, 0.63671875, 0.5859375, 0.21875, -0.51953125, 0.322265625, -0.9296875, -0.7890625, 0.546875, 0.396484375, 0.87890625, 1.0, 0.82421875, 0.154296875, -0.7265625, 0.98828125, 0.431640625, 0.90625, 0.248046875, -0.703125, -0.95703125, 0.478515625, 0.71484375, -0.63671875, 0.1259765625, -0.11962890625, 0.27734375, -0.0478515625, 0.66015625, -0.734375, -0.703125, 0.625, -1.0, 0.77734375, 0.30859375, 0.75, 0.77734375, -0.55078125, 0.443359375, -0.95703125, -0.126953125, 0.408203125, 0.890625, -0.171875, 0.2490234375, -0.1083984375, -0.76953125, -0.9921875, 0.89453125, -0.84765625, 1.0, -1.0, -0.29296875, -0.5703125, 0.7265625, -0.5625, 0.703125, 0.421875, -0.61328125, 0.2333984375, -0.0478515625, 0.451171875, 0.2265625, 0.30859375, 0.50390625, -0.8125, -1.0, -0.44140625, -0.337890625, 0.88671875, -0.98828125, 0.99609375, 0.216796875, 0.99609375, 0.41015625, -0.96484375, 0.73046875, 0.74609375, 0.96875, -0.1494140625, -0.97265625, -0.68359375, -0.185546875, 0.0166015625, -0.9375, 0.859375], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.02, "rtol": 0.02}}
{"kernel_name": "softmax_bfloat16", "prompt": "/*\nThis AIE kernel implements the softmax function on a bfloat16 vector\n>>> softmax_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875])\n[0.197265625, 0.05029296875, 0.09033203125, 0.314453125, 0.2177734375, 0.01263427734375, 0.08740234375, 0.0289306640625]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 64\noutput_vector size: 64\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid softmax_bfloat16(bfloat16 *input_vector, bfloat16 *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 64;\n    float max_val = (float)input_vector[0];\n    for (uint32_t i = 1; i < vector_size; i++) {\n        float val = (float)input_vector[i];\n        if (val > max_val) {\n            max_val = val;\n        }\n    }\n    float sum = 0.0f;\n    for (uint32_t i = 0; i < vector_size; i++) {\n        float x = (float)input_vector[i] - max_val;\n        int32_t ix = (int32_t)(x * 1.442695040888963f);\n        float fx = x * 1.442695040888963f - ix;\n        ix = (ix + 127) << 23;\n        float pow2_ix;\n        memcpy(&pow2_ix, &ix, sizeof(float));\n        float pow2_fx = 1.0f + 0.6931471805599453f * fx + 0.2401598148889220f * fx * fx;\n        float result = pow2_ix * pow2_fx;\n        output_vector[i] = (bfloat16)result;\n        sum += result;\n    }\n    constexpr float eps = 1e-7f;\n    sum = sum + eps;\n    float inv_sum = 1.0f / sum;\n    for (uint32_t i = 0; i < vector_size; i++) {\n        float val = (float)output_vector[i] * inv_sum;\n        output_vector[i] = (bfloat16)val;\n    }\n}", "program_code": "extern \"C\" {\n    void softmax_bfloat16_wrapper(bfloat16 *input_vector, bfloat16 *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        softmax_bfloat16(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625], "dtype": "bfloat16"}], "outputs": [{"output_vector": [0.0517578125, 0.01318359375, 0.023681640625, 0.0830078125, 0.057373046875, 0.003326416015625, 0.0230712890625, 0.007598876953125, 0.0079345703125, 0.01336669921875, 0.01025390625, 0.037841796875, 0.01904296875, 0.01007080078125, 0.01385498046875, 0.012451171875, 0.03955078125, 0.007232666015625, 0.01214599609375, 0.003753662109375, 0.00069427490234375, 0.01708984375, 0.02099609375, 0.0042724609375, 0.08544921875, 0.0020751953125, 0.00933837890625, 0.007354736328125, 0.041015625, 0.03857421875, 0.0103759765625, 0.012939453125, 0.003631591796875, 0.001220703125, 0.006317138671875, 0.0103759765625, 0.0302734375, 0.029541015625, 0.006011962890625, 0.006591796875, 0.00311279296875, 0.00213623046875, 0.001617431640625, 0.0625, 0.00531005859375, 0.0057373046875, 0.0025482177734375, 0.0194091796875, 0.00177764892578125, 0.00714111328125, 0.003631591796875, 0.01312255859375, 0.00531005859375, 0.0027618408203125, 0.00860595703125, 0.01361083984375, 0.00946044921875, 0.01202392578125, 0.004669189453125, 0.006195068359375, 0.004547119140625, 0.006195068359375, 0.003936767578125, 0.00156402587890625], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "sqrt_bfloat16", "prompt": "/*\nA kernel that computes the elementwise square root of a bfloat16 vector. Negative values are clamped to 0.0 in the output.\n>>> sqrt_bfloat16([5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125])\n[2.296875, 1.09375, 1.7109375, 2.59375, 2.359375, 0.0, 1.6875, 0.0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid sqrt_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n\n    for (int i = 0; i < N; ++i) {\n        float x = float(input[i]);\n        if (x <= 0.0f) {\n            output[i] = bfloat16(0.0f);\n            continue;\n        }\n\n        union { uint32_t u; float f; } fu{ .f = x };\n        union { uint32_t u; float f; } gu{ .u = (fu.u >> 1) + 0x1F800000u };\n        float y = gu.f;\n\n        y = 0.5f * (y + x / y);\n        y = 0.5f * (y + x / y);\n\n        output[i] = bfloat16(y);\n    }\n}", "program_code": "extern \"C\" {\n    void sqrt_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        sqrt_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125, -0.310546875, 1.234375, 0.431640625, 4.375, 2.28125, 0.365234375, 1.328125, 1.0, 4.46875, -0.6171875, 0.9375, -2.5625, -7.65625, 1.9609375, 2.59375, -2.21875, 6.8125, -4.375, 0.1376953125, -0.5625, 4.59375, 4.40625, 0.46484375, 1.1328125, -2.65625, -5.9375, -1.046875, 0.46875, 3.6875, 3.609375, -1.1640625, -0.90625, -3.140625, -4.25, -5.125, 5.84375, -1.53125, -1.3125, -3.765625, 2.328125, -4.84375, -0.63671875, -2.6875, 1.1640625, -1.53125, -3.546875, -0.08447265625, 1.28125, 0.19921875, 0.90625, -1.90625, -1.0859375, -2.015625, -1.078125, -2.4375, -5.1875, 0.53125, -1.203125, -4.875, 1.390625, -2.71875, 0.15625, 2.1875, 0.38671875, 3.421875, -3.703125, 1.203125, -2.046875, -2.609375, -1.734375, -0.93359375, 0.1689453125, -3.5, 2.703125, 1.3984375, -4.59375, 4.46875, 5.6875, 3.53125, -0.5390625, -3.21875, 3.15625, -1.2109375, 3.671875, 0.625, 2.9375, 1.0703125, 2.125, 0.031494140625, 5.34375, 0.380859375, 1.203125, 5.65625, -4.03125, -3.8125, 2.90625, -3.515625, 5.84375, -1.2421875, -2.25, 5.78125, 4.4375, 5.59375, 2.71875, -2.578125, 5.71875, -0.8046875, 2.40625, 2.84375, -0.46484375, 1.84375, 2.765625, 1.1328125, -3.296875, 0.89453125, 3.984375, -2.078125, -0.44921875, -1.3046875, 5.5625, 2.015625, 1.21875, -2.3125, 1.6171875, -2.015625, 0.095703125, -1.90625, 2.03125, 1.7265625, -0.625, 1.1875, -3.28125, -4.46875, 1.3203125, 0.5, 1.90625, 7.15625, 2.828125, -2.734375, 3.34375, -3.953125, -1.3828125, -0.205078125, 5.125, -2.234375, -2.484375, -0.294921875, -1.9921875, 3.375, -3.234375, -3.4375, -1.3125, -1.4921875, 5.78125, 2.84375, 0.26171875, -3.671875, 2.53125, -3.0, -4.625, 3.5625, 0.94921875, 2.765625, 0.95703125, 2.578125, -1.953125, -3.109375, 2.046875, -2.40625, -2.0625, -1.3671875, 0.052490234375, -1.0625, -4.125, -1.9296875, -6.65625, 1.875, -4.8125, -3.3125, 0.15625, -2.21875, 4.625, -3.875, 0.80078125, -0.11767578125, -3.5, 1.5703125, -0.515625, 2.3125, 2.46875, 6.5, 4.0, -1.109375, -0.71875, 3.296875, 1.96875, 1.921875, -4.84375, -0.07275390625, -2.21875, 0.83984375, -0.294921875, 2.734375, 0.953125, 2.359375, -1.3984375, -2.828125, -1.2265625, -0.051025390625, 1.140625, 6.78125, -0.126953125, -2.875, -1.0390625, -1.390625, 1.4453125, -4.625, 0.189453125, 0.46875, 0.6953125, -1.7890625, -0.71484375, -4.28125, -1.4765625, -1.625, 1.25, -3.46875, 2.34375, 4.46875, -6.21875, 1.28125, 2.03125, -1.9140625, -1.1953125, -0.3984375, -0.89453125, -0.92578125, -5.03125, 3.453125, 3.234375, -2.4375, -4.40625, 1.5625, -1.7265625, 0.42578125, -0.95703125, 2.078125, 2.078125], "dtype": "bfloat16"}], "outputs": [{"output": [2.296875, 1.09375, 1.7109375, 2.59375, 2.359375, 0.0, 1.6875, 0.0, 0.0, 1.109375, 0.65625, 2.09375, 1.5078125, 0.60546875, 1.15625, 1.0, 2.109375, 0.0, 0.96875, 0.0, 0.0, 1.3984375, 1.609375, 0.0, 2.609375, 0.0, 0.37109375, 0.0, 2.140625, 2.09375, 0.68359375, 1.0625, 0.0, 0.0, 0.0, 0.68359375, 1.921875, 1.8984375, 0.0, 0.0, 0.0, 0.0, 0.0, 2.421875, 0.0, 0.0, 0.0, 1.5234375, 0.0, 0.0, 0.0, 1.078125, 0.0, 0.0, 0.0, 1.1328125, 0.447265625, 0.953125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.73046875, 0.0, 0.0, 1.1796875, 0.0, 0.39453125, 1.4765625, 0.62109375, 1.8515625, 0.0, 1.09375, 0.0, 0.0, 0.0, 0.0, 0.41015625, 0.0, 1.640625, 1.1796875, 0.0, 2.109375, 2.390625, 1.8828125, 0.0, 0.0, 1.7734375, 0.0, 1.9140625, 0.7890625, 1.7109375, 1.03125, 1.4609375, 0.177734375, 2.3125, 0.6171875, 1.09375, 2.375, 0.0, 0.0, 1.703125, 0.0, 2.421875, 0.0, 0.0, 2.40625, 2.109375, 2.359375, 1.6484375, 0.0, 2.390625, 0.0, 1.5546875, 1.6875, 0.0, 1.359375, 1.6640625, 1.0625, 0.0, 0.9453125, 1.9921875, 0.0, 0.0, 0.0, 2.359375, 1.421875, 1.1015625, 0.0, 1.2734375, 0.0, 0.30859375, 0.0, 1.421875, 1.3125, 0.0, 1.0859375, 0.0, 0.0, 1.1484375, 0.70703125, 1.3828125, 2.671875, 1.6796875, 0.0, 1.828125, 0.0, 0.0, 0.0, 2.265625, 0.0, 0.0, 0.0, 0.0, 1.8359375, 0.0, 0.0, 0.0, 0.0, 2.40625, 1.6875, 0.51171875, 0.0, 1.59375, 0.0, 0.0, 1.890625, 0.97265625, 1.6640625, 0.9765625, 1.609375, 0.0, 0.0, 1.4296875, 0.0, 0.0, 0.0, 0.2294921875, 0.0, 0.0, 0.0, 0.0, 1.3671875, 0.0, 0.0, 0.39453125, 0.0, 2.15625, 0.0, 0.89453125, 0.0, 0.0, 1.25, 0.0, 1.5234375, 1.5703125, 2.546875, 2.0, 0.0, 0.0, 1.8125, 1.40625, 1.3828125, 0.0, 0.0, 0.0, 0.91796875, 0.0, 1.65625, 0.9765625, 1.5390625, 0.0, 0.0, 0.0, 0.0, 1.0703125, 2.609375, 0.0, 0.0, 0.0, 0.0, 1.203125, 0.0, 0.435546875, 0.68359375, 0.83203125, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1171875, 0.0, 1.53125, 2.109375, 0.0, 1.1328125, 1.421875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.859375, 1.796875, 0.0, 0.0, 1.25, 0.0, 0.65234375, 0.0, 1.4453125, 1.4453125], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "tan_bfloat16", "prompt": "/*\nThis AIE kernel computes the elementwise tangent (tan) function for a bfloat16 input vector of size 256.\n>>> tan_bfloat16([0.29296875, 1.2890625, 0.6171875, 0.26953125, -0.458984375, 0.875, -0.375, 2.34375])\n[0.30078125, 3.453125, 0.7109375, 0.275390625, -0.494140625, 1.1953125, -0.39453125, -1.0234375]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid tan_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n    constexpr float PI      = 3.14159265358979323846f;\n    constexpr float PI_2    = 1.57079632679489661923f;\n    constexpr float PI_4    = 0.78539816339744830962f;\n    constexpr float INV_PI  = 0.31830988618379067154f;\n\n    for (int i = 0; i < N; ++i) {\n        float x = float(input[i]);\n        float z = x * INV_PI;\n        int k_int = int(z + (z >= 0.0f ? 0.5f : -0.5f));\n        float y = x - float(k_int) * PI;\n\n        bool recip = false;\n        if (y > PI_4) {\n            y = PI_2 - y;\n            recip = true;\n        } else if (y < -PI_4) {\n            y = -PI_2 - y;\n            recip = true;\n        }\n\n        float y2 = y * y;\n        float y3 = y2 * y;\n        float y5 = y3 * y2;\n        float y7 = y5 * y2;\n        float t  = y\n                 + y3 * (1.0f / 3.0f)\n                 + y5 * (2.0f / 15.0f)\n                 + y7 * (17.0f / 315.0f);\n\n        float result = recip ? (1.0f / t) : t;\n        output[i] = bfloat16(result);\n    }\n}", "program_code": "extern \"C\" {\n    void tan_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        tan_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [0.29296875, 1.2890625, 0.6171875, 0.26953125, -0.458984375, 0.875, -0.375, 2.34375, 2.78125, -0.69921875, 1.75, 0.173828125, 0.408203125, 2.546875, -2.578125, -2.484375, -2.875, 1.9921875, 1.671875, 2.21875, 2.875, 1.796875, -0.2314453125, 1.6796875, -2.296875, 0.83984375, -2.140625, 2.671875, 0.130859375, -0.51171875, -1.4140625, 1.6484375, -0.263671875, 0.41015625, -2.890625, 0.70703125, 0.671875, 0.703125, 2.65625, 1.09375, -0.84375, -0.376953125, 1.1875, -2.640625, 1.0, 1.0234375, -1.734375, -2.21875, -1.109375, -0.81640625, 0.421875, -0.369140625, 2.9375, -2.390625, -1.75, -2.03125, 0.91796875, -1.4765625, -0.2021484375, -1.53125, -2.046875, -2.34375, 0.9375, -2.171875, -1.8203125, -0.7890625, 1.9296875, -2.421875, 2.03125, -2.421875, 2.859375, -0.1884765625, 2.859375, 0.62890625, 1.4375, -2.765625, -1.3046875, -2.28125, -1.2265625, -2.28125, -1.09375, -0.515625, -2.609375, 1.15625, 0.400390625, -1.40625, 0.1396484375, -2.4375, 0.455078125, 2.578125, -1.0859375, 1.0078125, -2.203125, 1.296875, -1.265625, -1.8984375, 0.51953125, -2.875, 1.9765625, -2.96875, 1.0703125, -1.3828125, 1.4140625, 2.765625, -1.5078125, 0.45703125, 0.55078125, 0.43359375, -1.6640625, 2.71875, -0.31640625, 2.078125, 1.1953125, -1.21875, 1.8828125, -0.62109375, 2.28125, 0.48828125, 2.296875, 1.15625, 1.3515625, 0.0079345703125, 2.734375, 0.86328125, -0.45703125, 0.63671875, -2.890625, -1.1875, 0.9609375, -1.2578125, 0.70703125, -0.427734375, -2.1875, -1.2109375, 0.419921875, 0.546875, 0.4453125, 0.91796875, 0.9140625, -0.412109375, 2.375, -0.79296875, -0.384765625, 2.34375, 1.8359375, 1.2265625, -2.40625, 2.515625, 1.2890625, 3.0, -2.109375, 2.203125, -2.03125, 0.69140625, -2.25, 2.09375, 1.84375, 0.4140625, -0.55859375, -2.578125, 1.1875, -0.279296875, 1.3359375, 2.203125, 2.859375, 2.140625, -2.9375, -0.83984375, 1.3828125, -1.96875, 0.1259765625, -2.671875, -1.796875, -2.890625, 1.765625, -1.65625, -0.9296875, 2.5625, 1.2265625, -2.8125, -2.015625, 0.73046875, 0.462890625, -1.5703125, 2.609375, 0.68359375, 0.2138671875, 0.5390625, 1.3828125, -1.125, -0.609375, -1.7421875, -1.8828125, 2.671875, 1.4375, -0.05712890625, -1.6328125, -1.4765625, -2.65625, -0.392578125, -1.1328125, 1.1796875, -0.734375, -1.921875, -2.859375, -2.59375, 1.078125, -0.27734375, 0.2197265625, 2.375, 2.9375, -1.6953125, 0.9765625, -1.421875, -2.875, 1.546875, -1.078125, -0.69921875, 0.53125, 1.984375, 0.7734375, 2.234375, -1.359375, 1.7890625, -1.8828125, 2.71875, 1.125, -1.703125, 2.6875, 1.3828125, -1.4765625, -1.71875, 0.109375, -2.84375, -1.7578125, -0.451171875, -0.75390625, -0.21875, -1.3359375, 0.51953125, 2.1875, -2.296875, 0.1044921875, -2.203125, 1.3046875, -0.625, 0.392578125, -1.8984375, -2.125, -0.07177734375, -0.8671875, 2.640625, 1.59375, 1.4921875, 2.421875, -2.5], "dtype": "bfloat16"}], "outputs": [{"output": [0.30078125, 3.453125, 0.7109375, 0.275390625, -0.494140625, 1.1953125, -0.39453125, -1.0234375, -0.376953125, -0.83984375, -5.53125, 0.17578125, 0.431640625, -0.67578125, 0.6328125, 0.7734375, 0.2734375, -2.234375, -9.875, -1.3203125, -0.2734375, -4.34375, -0.2353515625, -9.125, 1.125, 1.1171875, 1.5625, -0.5078125, 0.1318359375, -0.5625, -6.3125, -12.875, -0.26953125, 0.435546875, 0.255859375, 0.85546875, 0.796875, 0.84765625, -0.52734375, 1.9375, -1.125, -0.396484375, 2.484375, 0.546875, 1.5546875, 1.640625, 6.0625, 1.3203125, -2.015625, -1.0625, 0.44921875, -0.38671875, -0.20703125, 0.93359375, 5.53125, 2.015625, 1.3046875, -10.5625, -0.205078125, -25.25, 1.9375, 1.0234375, 1.359375, 1.4609375, 3.921875, -1.0078125, -2.671875, 0.875, -2.015625, 0.875, -0.2890625, -0.1904296875, -0.2890625, 0.7265625, 7.46875, 0.39453125, -3.671875, 1.1640625, -2.796875, 1.1640625, -1.9375, -0.56640625, 0.58984375, 2.265625, 0.423828125, -6.03125, 0.140625, 0.84765625, 0.490234375, -0.6328125, -1.8984375, 1.5859375, 1.3671875, 3.5625, -3.171875, 2.9375, 0.5703125, 0.2734375, -2.328125, 0.1748046875, 1.828125, -5.25, 6.3125, -0.39453125, -15.875, 0.4921875, 0.61328125, 0.462890625, 10.6875, -0.44921875, -0.328125, -1.796875, 2.53125, -2.71875, -3.09375, -0.71484375, -1.1640625, 0.53125, -1.125, 2.265625, 4.5, 0.0079345703125, -0.431640625, 1.171875, -0.4921875, 0.73828125, 0.255859375, -2.484375, 1.4296875, -3.09375, 0.85546875, -0.455078125, 1.4140625, -2.65625, 0.447265625, 0.609375, 0.4765625, 1.3046875, 1.296875, -0.4375, -0.96484375, -1.015625, -0.404296875, -1.0234375, -3.6875, 2.796875, 0.90625, -0.72265625, 3.453125, -0.142578125, 1.671875, -1.3671875, 2.015625, 0.828125, 1.2421875, -1.734375, -3.578125, 0.439453125, -0.625, 0.6328125, 2.484375, -0.287109375, 4.1875, -1.3671875, -0.2890625, -1.5625, 0.20703125, -1.1171875, 5.25, 2.375, 0.126953125, 0.5078125, 4.34375, 0.255859375, -5.0625, 11.6875, -1.34375, -0.65234375, 2.796875, 0.341796875, 2.09375, 0.89453125, 0.5, -2064.0, -0.58984375, 0.81640625, 0.216796875, 0.59765625, 5.25, -2.09375, -0.69921875, 5.78125, 3.09375, -0.5078125, 7.46875, -0.05712890625, 16.125, -10.5625, 0.52734375, -0.4140625, -2.140625, 2.421875, -0.90234375, 2.734375, 0.2890625, 0.609375, 1.859375, -0.28515625, 0.2236328125, -0.96484375, -0.20703125, 8.0, 1.4765625, -6.65625, 0.2734375, 41.75, -1.859375, -0.83984375, 0.5859375, -2.28125, 0.9765625, -1.28125, -4.65625, -4.5, 3.09375, -0.44921875, 2.09375, 7.5, -0.48828125, 5.25, -10.5625, 6.71875, 0.10986328125, 0.306640625, 5.28125, -0.484375, -0.9375, -0.22265625, -4.1875, 0.5703125, -1.4140625, 1.125, 0.10498046875, 1.3671875, 3.671875, -0.72265625, 0.4140625, 2.9375, 1.6171875, -0.07177734375, -1.1796875, -0.546875, -43.5, 12.6875, -0.875, 0.74609375], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "tanh_bfloat16", "prompt": "/*\nThis AIE kernel implements the tanh activation function on a bfloat16 vector\n>>> tanh_bfloat16([3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375])\n[1.0, 0.6640625, 0.9609375, 1.0, 1.0, -0.9609375, 0.95703125, -0.29296875]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_vector size: 256\noutput_vector size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid tanh_bfloat16(bfloat16 *input_vector, bfloat16 *output_vector) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int vector_size = 256;\n    for (uint32_t i = 0; i < vector_size; i++) {\n        float x = (float)input_vector[i];\n        if (x > 4.97f) {\n            output_vector[i] = (bfloat16)1.0f;\n            continue;\n        }\n        if (x < -4.97f) {\n            output_vector[i] = (bfloat16)-1.0f;\n            continue;\n        }\n        float abs_x = x < 0 ? -x : x;\n        float x2 = abs_x * abs_x;\n        float numerator = abs_x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));\n        float denominator = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));\n        float result = numerator / denominator;\n        result = x < 0 ? -result : result;\n        output_vector[i] = (bfloat16)result;\n    }\n}", "program_code": "extern \"C\" {\n    void tanh_bfloat16_wrapper(bfloat16 *input_vector, bfloat16 *output_vector) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        tanh_bfloat16(input_vector, output_vector);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_vector": [3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375, -0.2060546875, 0.8203125, 0.2890625, 2.90625, 1.5234375, 0.2431640625, 0.88671875, 0.66796875, 2.984375, -0.41015625, 0.625, -1.7109375, -5.09375, 1.3046875, 1.7265625, -1.484375, 4.53125, -2.90625, 0.09130859375, -0.375, 3.0625, 2.9375, 0.310546875, 0.7578125, -1.7734375, -3.96875, -0.6953125, 0.3125, 2.453125, 2.40625, -0.7734375, -0.60546875, -2.09375, -2.84375, -3.40625, 3.90625, -1.015625, -0.875, -2.5, 1.5546875, -3.234375, -0.42578125, -1.7890625, 0.7734375, -1.0234375, -2.359375, -0.056396484375, 0.85546875, 0.1328125, 0.60546875, -1.265625, -0.7265625, -1.34375, -0.71875, -1.625, -3.453125, 0.35546875, -0.8046875, -3.265625, 0.92578125, -1.8125, 0.10400390625, 1.4609375, 0.2578125, 2.28125, -2.46875, 0.8046875, -1.3671875, -1.7421875, -1.15625, -0.625, 0.1123046875, -2.328125, 1.8046875, 0.9296875, -3.078125, 2.96875, 3.796875, 2.359375, -0.359375, -2.140625, 2.109375, -0.8046875, 2.4375, 0.416015625, 1.953125, 0.7109375, 1.4140625, 0.02099609375, 3.578125, 0.25390625, 0.8046875, 3.765625, -2.703125, -2.546875, 1.9375, -2.34375, 3.890625, -0.828125, -1.4921875, 3.84375, 2.96875, 3.734375, 1.8125, -1.71875, 3.8125, -0.53515625, 1.6015625, 1.890625, -0.310546875, 1.2265625, 1.84375, 0.75390625, -2.203125, 0.59765625, 2.65625, -1.390625, -0.298828125, -0.87109375, 3.703125, 1.34375, 0.81640625, -1.5390625, 1.078125, -1.3515625, 0.0634765625, -1.2734375, 1.3515625, 1.15625, -0.416015625, 0.79296875, -2.1875, -2.984375, 0.87890625, 0.333984375, 1.2734375, 4.78125, 1.890625, -1.828125, 2.234375, -2.625, -0.921875, -0.13671875, 3.421875, -1.4921875, -1.65625, -0.197265625, -1.328125, 2.25, -2.15625, -2.296875, -0.875, -0.99609375, 3.859375, 1.8984375, 0.1748046875, -2.453125, 1.6875, -2.0, -3.09375, 2.375, 0.6328125, 1.84375, 0.63671875, 1.7109375, -1.3046875, -2.0625, 1.359375, -1.609375, -1.3828125, -0.91015625, 0.034912109375, -0.70703125, -2.75, -1.2890625, -4.4375, 1.25, -3.203125, -2.203125, 0.1044921875, -1.4765625, 3.09375, -2.578125, 0.53515625, -0.07861328125, -2.34375, 1.046875, -0.34375, 1.546875, 1.6484375, 4.3125, 2.671875, -0.73828125, -0.478515625, 2.203125, 1.3125, 1.28125, -3.234375, -0.048583984375, -1.4765625, 0.55859375, -0.1962890625, 1.8203125, 0.6328125, 1.5703125, -0.93359375, -1.890625, -0.8203125, -0.033935546875, 0.7578125, 4.53125, -0.08447265625, -1.9140625, -0.69140625, -0.92578125, 0.96484375, -3.078125, 0.126953125, 0.3125, 0.46484375, -1.1953125, -0.4765625, -2.84375, -0.98828125, -1.0859375, 0.83203125, -2.3125, 1.5625, 2.984375, -4.125, 0.8515625, 1.3515625, -1.2734375, -0.79296875, -0.265625, -0.59375, -0.6171875, -3.359375, 2.296875, 2.15625, -1.625, -2.9375, 1.0390625, -1.1484375, 0.283203125, -0.63671875, 1.3828125, 1.390625], "dtype": "bfloat16"}], "outputs": [{"output_vector": [1.0, 0.6640625, 0.9609375, 1.0, 1.0, -0.9609375, 0.95703125, -0.29296875, -0.203125, 0.67578125, 0.28125, 0.9921875, 0.91015625, 0.23828125, 0.7109375, 0.58203125, 0.99609375, -0.388671875, 0.5546875, -0.9375, -1.0, 0.86328125, 0.9375, -0.90234375, 1.0, -0.9921875, 0.0908203125, -0.357421875, 0.99609375, 0.99609375, 0.30078125, 0.640625, -0.9453125, -1.0, -0.6015625, 0.302734375, 0.984375, 0.984375, -0.6484375, -0.5390625, -0.96875, -0.9921875, -0.99609375, 1.0, -0.76953125, -0.703125, -0.98828125, 0.9140625, -0.99609375, -0.40234375, -0.9453125, 0.6484375, -0.76953125, -0.98046875, -0.056396484375, 0.6953125, 0.1318359375, 0.5390625, -0.8515625, -0.62109375, -0.87109375, -0.6171875, -0.92578125, -0.99609375, 0.341796875, -0.66796875, -0.99609375, 0.73046875, -0.94921875, 0.103515625, 0.8984375, 0.251953125, 0.98046875, -0.984375, 0.66796875, -0.87890625, -0.94140625, -0.8203125, -0.5546875, 0.11181640625, -0.98046875, 0.94921875, 0.73046875, -0.99609375, 0.99609375, 1.0, 0.98046875, -0.34375, -0.97265625, 0.97265625, -0.66796875, 0.984375, 0.39453125, 0.9609375, 0.609375, 0.88671875, 0.02099609375, 1.0, 0.2490234375, 0.66796875, 1.0, -0.9921875, -0.98828125, 0.9609375, -0.98046875, 1.0, -0.6796875, -0.90234375, 1.0, 0.99609375, 1.0, 0.94921875, -0.9375, 1.0, -0.490234375, 0.921875, 0.95703125, -0.30078125, 0.83984375, 0.94921875, 0.63671875, -0.9765625, 0.53515625, 0.98828125, -0.8828125, -0.291015625, -0.703125, 1.0, 0.87109375, 0.671875, -0.91015625, 0.79296875, -0.875, 0.0634765625, -0.85546875, 0.875, 0.8203125, -0.39453125, 0.66015625, -0.9765625, -0.99609375, 0.70703125, 0.322265625, 0.85546875, 1.0, 0.95703125, -0.94921875, 0.9765625, -0.98828125, -0.7265625, -0.1357421875, 0.99609375, -0.90234375, -0.9296875, -0.1943359375, -0.8671875, 0.9765625, -0.97265625, -0.98046875, -0.703125, -0.76171875, 1.0, 0.95703125, 0.1728515625, -0.984375, 0.93359375, -0.96484375, -0.99609375, 0.984375, 0.55859375, 0.94921875, 0.5625, 0.9375, -0.86328125, -0.96875, 0.875, -0.921875, -0.8828125, -0.72265625, 0.034912109375, -0.609375, -0.9921875, -0.859375, -1.0, 0.84765625, -0.99609375, -0.9765625, 0.10400390625, -0.90234375, 0.99609375, -0.98828125, 0.490234375, -0.07861328125, -0.98046875, 0.78125, -0.330078125, 0.9140625, 0.9296875, 1.0, 0.9921875, -0.62890625, -0.4453125, 0.9765625, 0.86328125, 0.85546875, -0.99609375, -0.048583984375, -0.90234375, 0.5078125, -0.193359375, 0.94921875, 0.55859375, 0.91796875, -0.73046875, -0.95703125, -0.67578125, -0.033935546875, 0.640625, 1.0, -0.08447265625, -0.95703125, -0.59765625, -0.73046875, 0.74609375, -0.99609375, 0.1259765625, 0.302734375, 0.43359375, -0.83203125, -0.443359375, -0.9921875, -0.7578125, -0.796875, 0.6796875, -0.98046875, 0.9140625, 0.99609375, -1.0, 0.69140625, 0.875, -0.85546875, -0.66015625, -0.259765625, -0.53125, -0.55078125, -0.99609375, 0.98046875, 0.97265625, -0.92578125, -0.99609375, 0.77734375, -0.81640625, 0.275390625, -0.5625, 0.8828125, 0.8828125], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "variance_bfloat16", "prompt": "/*\nThis kernel computes the variance of a bfloat16 input vector (length 256) using the definition Var(X) = E[X^2] - (E[X])^2, and writes the scalar (bfloat16) result to the output buffer (length 1).\n>>> variance_bfloat16([5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125])\n[9.375]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput size: 256\noutput size: 1\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid variance_bfloat16(bfloat16 *input, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int N = 256;\n    float sum = 0.0f;\n    float sum_sq = 0.0f;\n\n    for (int i = 0; i < N; ++i) {\n        float val = float(input[i]);\n        sum += val;\n        sum_sq += val * val;\n    }\n    float mean = sum / float(N);\n    float var = (sum_sq / float(N)) - (mean * mean);\n\n    // Clamp to zero if round-off yields small negatives:\n    if (var < 0.0f) var = 0.0f;\n\n    *output = bfloat16(var);\n}", "program_code": "extern \"C\" {\n    void variance_bfloat16_wrapper(bfloat16 *input, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        variance_bfloat16(input, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input": [5.28125, 1.203125, 2.9375, 6.71875, 5.59375, -2.9375, 2.84375, -0.453125, -0.310546875, 1.234375, 0.431640625, 4.375, 2.28125, 0.365234375, 1.328125, 1.0, 4.46875, -0.6171875, 0.9375, -2.5625, -7.65625, 1.9609375, 2.59375, -2.21875, 6.8125, -4.375, 0.1376953125, -0.5625, 4.59375, 4.40625, 0.46484375, 1.1328125, -2.65625, -5.9375, -1.046875, 0.46875, 3.6875, 3.609375, -1.1640625, -0.90625, -3.140625, -4.25, -5.125, 5.84375, -1.53125, -1.3125, -3.765625, 2.328125, -4.84375, -0.63671875, -2.6875, 1.1640625, -1.53125, -3.546875, -0.08447265625, 1.28125, 0.19921875, 0.90625, -1.90625, -1.0859375, -2.015625, -1.078125, -2.4375, -5.1875, 0.53125, -1.203125, -4.875, 1.390625, -2.71875, 0.15625, 2.1875, 0.38671875, 3.421875, -3.703125, 1.203125, -2.046875, -2.609375, -1.734375, -0.93359375, 0.1689453125, -3.5, 2.703125, 1.3984375, -4.59375, 4.46875, 5.6875, 3.53125, -0.5390625, -3.21875, 3.15625, -1.2109375, 3.671875, 0.625, 2.9375, 1.0703125, 2.125, 0.031494140625, 5.34375, 0.380859375, 1.203125, 5.65625, -4.03125, -3.8125, 2.90625, -3.515625, 5.84375, -1.2421875, -2.25, 5.78125, 4.4375, 5.59375, 2.71875, -2.578125, 5.71875, -0.8046875, 2.40625, 2.84375, -0.46484375, 1.84375, 2.765625, 1.1328125, -3.296875, 0.89453125, 3.984375, -2.078125, -0.44921875, -1.3046875, 5.5625, 2.015625, 1.21875, -2.3125, 1.6171875, -2.015625, 0.095703125, -1.90625, 2.03125, 1.7265625, -0.625, 1.1875, -3.28125, -4.46875, 1.3203125, 0.5, 1.90625, 7.15625, 2.828125, -2.734375, 3.34375, -3.953125, -1.3828125, -0.205078125, 5.125, -2.234375, -2.484375, -0.294921875, -1.9921875, 3.375, -3.234375, -3.4375, -1.3125, -1.4921875, 5.78125, 2.84375, 0.26171875, -3.671875, 2.53125, -3.0, -4.625, 3.5625, 0.94921875, 2.765625, 0.95703125, 2.578125, -1.953125, -3.109375, 2.046875, -2.40625, -2.0625, -1.3671875, 0.052490234375, -1.0625, -4.125, -1.9296875, -6.65625, 1.875, -4.8125, -3.3125, 0.15625, -2.21875, 4.625, -3.875, 0.80078125, -0.11767578125, -3.5, 1.5703125, -0.515625, 2.3125, 2.46875, 6.5, 4.0, -1.109375, -0.71875, 3.296875, 1.96875, 1.921875, -4.84375, -0.07275390625, -2.21875, 0.83984375, -0.294921875, 2.734375, 0.953125, 2.359375, -1.3984375, -2.828125, -1.2265625, -0.051025390625, 1.140625, 6.78125, -0.126953125, -2.875, -1.0390625, -1.390625, 1.4453125, -4.625, 0.189453125, 0.46875, 0.6953125, -1.7890625, -0.71484375, -4.28125, -1.4765625, -1.625, 1.25, -3.46875, 2.34375, 4.46875, -6.21875, 1.28125, 2.03125, -1.9140625, -1.1953125, -0.3984375, -0.89453125, -0.92578125, -5.03125, 3.453125, 3.234375, -2.4375, -4.40625, 1.5625, -1.7265625, 0.42578125, -0.95703125, 2.078125, 2.078125], "dtype": "bfloat16"}], "outputs": [{"output": [8.75], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.03, "rtol": 0.03}}
{"kernel_name": "vectoradd_bfloat16", "prompt": "/*\nThis AIE kernel computes the elementwise addition of two bfloat16 input vectors of size 256, writing the result to an output bfloat16 vector.\n>>> vectoradd_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875], [-0.7265625, -1.3828125, -1.5859375, 0.609375, -1.1875, -0.5078125, -0.59765625, -0.052490234375])\n[1.0390625, -0.984375, -0.60546875, 2.84375, 0.6796875, -1.484375, 0.3515625, -0.2041015625]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin0 size: 256\nin1 size: 256\nout size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid vectoradd_bfloat16(bfloat16 *in0, bfloat16 *in1, bfloat16 *out) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t N = 256;\n    for (int i = 0; i < N; i++) {\n        out[i] = in0[i] + in1[i];\n    }\n}", "program_code": "extern \"C\" {\n    void vectoradd_bfloat16_wrapper(bfloat16 *in0, bfloat16 *in1, bfloat16 *out) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        vectoradd_bfloat16(in0, in1, out);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in0": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625, 0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625, 0.671875, 0.408203125, -0.76953125, 0.5390625, -0.67578125, 0.03173828125, -0.63671875, 0.67578125, 0.578125, -0.2080078125, 0.396484375, -1.09375, -1.4921875, 0.439453125, 0.1669921875, 0.63671875, 2.390625, 0.9453125, -0.9140625, 1.1171875, -1.3125, -0.4609375, -0.068359375, 1.7109375, -0.74609375, -0.828125, -0.0986328125, -0.6640625, 1.125, -1.078125, -1.1484375, -0.4375, -0.498046875, 1.9296875, 0.94921875, 0.08740234375, -1.2265625, 0.84375, -1.0, -1.546875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.65234375, -1.03125, 0.6796875, -0.8046875, -0.69140625, -0.455078125, 0.0174560546875, -0.353515625, -1.375, -0.64453125, -2.21875, 0.625, -1.6015625, -1.1015625, 0.05224609375, -0.73828125, 1.546875, -1.2890625, 0.267578125, -0.039306640625, -1.171875, 0.5234375, -0.171875, 0.7734375, 0.82421875, 2.15625, 1.3359375, -0.369140625, -0.2392578125, 1.1015625, 0.65625, 0.640625, -1.6171875, -0.0242919921875, -0.73828125, 0.279296875, -0.09814453125, 0.91015625, 0.31640625, 0.78515625, -0.466796875, -0.9453125, -0.41015625, -0.0169677734375, 0.37890625, 2.265625, -0.042236328125, -0.95703125, -0.345703125, -0.462890625, 0.482421875, -1.5390625, 0.0634765625, 0.15625, 0.232421875, -0.59765625, -0.23828125, -1.421875, -0.494140625, -0.54296875, 0.416015625, -1.15625, 0.78125, 1.4921875, -2.0625, 0.42578125, 0.67578125, -0.63671875, -0.396484375, -0.1328125, -0.296875, -0.30859375, -1.6796875, 1.1484375, 1.078125, -0.8125, -1.46875, 0.51953125, -0.57421875, 0.1416015625, -0.318359375, 0.69140625, 0.6953125], "dtype": "bfloat16"}, {"in1": [-0.7265625, -1.3828125, -1.5859375, 0.609375, -1.1875, -0.5078125, -0.59765625, -0.052490234375, -1.9375, 0.1884765625, 0.5234375, 0.08837890625, -0.310546875, 0.09716796875, 0.3984375, -2.765625, 1.953125, 0.390625, -0.65234375, -0.390625, 0.494140625, -0.1162109375, -2.03125, 2.0625, -0.1103515625, 1.0234375, -0.69140625, 1.5390625, 0.287109375, 0.609375, -1.046875, 1.2109375, 0.69140625, 1.3046875, -0.62890625, -0.48046875, 2.296875, -1.0625, -0.1357421875, 1.140625, 0.09765625, 0.58203125, -0.400390625, 0.369140625, -1.3046875, 1.65625, -0.1181640625, -0.6796875, 0.66796875, -0.4609375, -1.3359375, -1.34375, 0.6953125, -0.1591796875, -0.1337890625, 1.078125, -1.125, -0.73046875, -0.384765625, 0.09423828125, -0.042236328125, -0.287109375, -0.0615234375, -0.107421875, -0.71875, -0.8125, 0.275390625, -0.890625, -1.15625, -0.3125, -0.1572265625, 2.25, -0.703125, 0.94140625, 0.74609375, -1.1875, 0.7734375, -1.1875, -2.65625, 0.60546875, -1.7578125, 0.451171875, -0.68359375, 1.65625, 1.0703125, -0.453125, -0.6875, -1.2109375, -0.44140625, -0.28125, -0.365234375, 0.15625, 0.578125, 0.349609375, -0.765625, -1.4375, 1.3671875, -0.6875, -0.65234375, -0.51953125, -1.84375, -0.478515625, -0.48046875, 0.62109375, 0.69921875, 0.0037689208984375, 0.93359375, 0.33984375, -0.015625, 0.1611328125, -0.1904296875, -0.39453125, -0.267578125, -1.125, 0.28125, -0.9921875, 0.83984375, -0.2490234375, 0.049560546875, 0.494140625, 0.64453125, -1.5703125, -0.20703125, 0.87890625, -1.6953125, 0.38671875, -2.25, -1.0234375, 0.03857421875, -1.65625, -0.984375, -1.46875, 1.6484375, 0.1640625, 0.56640625, -0.22265625, -0.353515625, -1.6171875, -0.291015625, -0.76171875, 0.859375, 1.140625, 1.46875, 0.8515625, -0.59765625, -1.1171875, 0.765625, 0.35546875, -1.765625, 0.35546875, 0.81640625, 0.058837890625, -0.1845703125, -0.80859375, -1.4453125, 0.80078125, -0.30859375, -0.2333984375, 1.734375, 0.68359375, 0.37109375, 0.1416015625, 1.5234375, 1.71875, 0.9296875, 0.58203125, -2.09375, 0.12353515625, -0.1298828125, 0.09375, 0.94140625, -2.734375, -0.5703125, 0.26953125, -0.466796875, -1.4140625, 0.8671875, 0.27734375, -0.97265625, 0.314453125, 0.8203125, 0.005279541015625, 0.80078125, 0.078125, -0.39453125, -1.15625, -0.0859375, 0.1943359375, 0.875, -0.115234375, 0.45703125, -0.96484375, -0.78125, -0.1103515625, -1.0546875, 0.8203125, 0.462890625, 0.279296875, 0.33984375, 2.015625, -0.46875, -2.203125, 0.19921875, -0.050537109375, -0.515625, -0.98046875, -0.439453125, 0.181640625, -0.50390625, 2.40625, -0.9609375, -0.79296875, -2.28125, 0.251953125, -2.015625, -0.5390625, -0.275390625, -0.7109375, 1.7421875, 0.99609375, 1.3203125, -0.8828125, 1.125, 0.49609375, 0.76953125, 1.03125, -0.91015625, -0.423828125, 0.86328125, -2.65625, 1.515625, 0.5546875, -0.045654296875, 0.220703125, -1.03125, -0.349609375, 1.1015625, 1.296875, 2.703125, -0.07373046875, -0.66015625, -0.515625, -1.015625, -0.07763671875, 0.3828125, -0.0341796875, 1.09375, -0.234375, -0.34765625, -0.58203125, -1.6328125, -1.5703125, -1.1796875, 1.3046875, 0.89453125, 1.375], "dtype": "bfloat16"}], "outputs": [{"out": [1.0390625, -0.984375, -0.60546875, 2.84375, 0.6796875, -1.484375, 0.3515625, -0.2041015625, -2.046875, 0.59765625, 0.66796875, 1.5390625, 0.451171875, 0.21875, 0.84375, -2.4375, 3.4375, 0.185546875, -0.33984375, -1.25, -2.046875, 0.53515625, -1.171875, 1.3203125, 2.15625, -0.4296875, -0.64453125, 1.3515625, 1.8203125, 2.078125, -0.890625, 1.59375, -0.1953125, -0.6796875, -0.9765625, -0.32421875, 3.53125, 0.140625, -0.5234375, 0.8359375, -0.94921875, -0.83984375, -2.109375, 2.328125, -1.8125, 1.21875, -1.3671875, 0.09765625, -0.94921875, -0.671875, -2.234375, -0.95703125, 0.18359375, -1.3359375, -0.162109375, 1.5078125, -1.0625, -0.427734375, -1.015625, -0.26953125, -0.71484375, -0.6484375, -0.875, -1.8359375, -0.5390625, -1.21875, -1.359375, -0.427734375, -2.0625, -0.259765625, 0.57421875, 2.375, 0.4375, -0.29296875, 1.1484375, -1.875, -0.09765625, -1.765625, -2.96875, 0.66015625, -2.921875, 1.3515625, -0.21875, 0.1171875, 2.5625, 1.4453125, 0.4921875, -1.390625, -1.515625, 0.7734375, -0.765625, 1.375, 0.78515625, 1.328125, -0.41015625, -0.73046875, 1.375, 1.1015625, -0.5234375, -0.1171875, 0.0390625, -1.828125, -1.75, 1.59375, -0.47265625, 1.9453125, 0.51953125, -0.40625, 1.90625, 1.6484375, 1.6796875, 0.51171875, -1.125, 0.78125, 0.013671875, -0.19140625, 1.78125, -0.404296875, 0.6640625, 1.4140625, 1.0234375, -2.671875, 0.091796875, 2.203125, -2.390625, 0.2373046875, -2.6875, 0.828125, 0.7109375, -1.25, -1.75, -0.9296875, 0.97265625, 0.1953125, -0.0703125, 0.453125, 0.224609375, -1.828125, 0.10546875, -1.859375, -0.6328125, 1.578125, 1.6328125, 1.484375, 1.796875, -0.171875, -0.1484375, 1.46875, -3.078125, -0.10546875, 0.75, 1.7734375, -0.9296875, -1.640625, -1.546875, 0.13671875, 0.81640625, -1.3125, 0.5859375, 0.24609375, -0.126953125, 2.078125, 2.46875, 1.8046875, -0.296875, 1.421875, -3.09375, -1.421875, 1.0546875, 0.41015625, 1.859375, -2.421875, 0.28515625, -0.3828125, -1.5, -0.734375, 0.0625, -0.4140625, -1.4296875, 0.33203125, 0.466796875, -1.3671875, 0.15625, -2.140625, 0.23046875, -2.75, -1.1875, 0.24609375, 0.13671875, 1.4296875, -0.83203125, -0.6953125, -0.8203125, -1.28125, -0.53125, 0.6484375, 1.234375, 1.1015625, 2.5, 3.34375, -0.8359375, -2.4375, 1.296875, 0.60546875, 0.125, -2.59375, -0.462890625, -0.5546875, -0.224609375, 2.3125, -0.05078125, -0.4765625, -1.5, -0.21484375, -2.96875, -0.94921875, -0.29296875, -0.33203125, 4.0, 0.953125, 0.36328125, -1.2265625, 0.6640625, 0.9765625, -0.76953125, 1.09375, -0.75390625, -0.19140625, 0.265625, -2.890625, 0.09375, 0.060546875, -0.58984375, 0.63671875, -2.1875, 0.431640625, 2.59375, -0.765625, 3.125, 0.6015625, -1.296875, -0.9140625, -1.1484375, -0.375, 0.07421875, -1.7109375, 2.25, 0.84375, -1.15625, -2.046875, -1.109375, -2.140625, -1.0390625, 0.984375, 1.5859375, 2.0625], "dtype": "bfloat16"}]}}
{"kernel_name": "vectoradd_int16", "prompt": "/*\nThis is the implementation of an AIE kernel that performs a vector addition of 2 input vectors and stores the result in 1 output vector.\n>>> vectoradd_int16([172, -385, 47, 452, 117, 278, -320, -479], [-343, 83, 163, 279, -64, 100, -417, -101])\n[-171, -302, 210, 731, 53, 378, -737, -580]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer1 size: 256\nin_buffer2 size: 256\nout_buffer size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid vectoradd_int16(int16_t *in_buffer1, int16_t *in_buffer2, int16_t *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t vector_size = 256;\n    for (int32_t i = 0; i < vector_size; ++i) {\n        out_buffer[i] = in_buffer1[i] + in_buffer2[i];\n    }\n}", "program_code": "extern \"C\" {\n    void vectoradd_int16_wrapper(int16_t *in_buffer1, int16_t *in_buffer2, int16_t *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        vectoradd_int16(in_buffer1, in_buffer2, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer1": [172, -385, 47, 452, 117, 278, -320, -479, 323, 78, 251, 418, 195, 381, -153, -283, -503, -396, 211, 417, -235, -167, 242, 102, 292, -507, 87, -469, -442, -437, -40, 132, 88, 178, -116, -52, -198, 41, 193, 72, -26, 174, 39, 490, -425, 357, -338, 223, 88, -149, 337, -371, 165, -269, 25, 9, 333, 47, -440, 95, 265, 78, 404, -18, -397, -211, 464, 69, 243, -218, 197, -248, 510, 309, 335, 494, -81, 185, -64, 190, 338, 134, -413, -194, 472, -363, -335, -248, 243, 35, 285, -194, 147, 464, -365, -53, 398, 71, -89, -389, -224, 465, 449, -257, -247, -334, 185, -111, 127, -43, 32, 52, 31, -105, 202, 284, -268, 39, -361, -195, 163, 441, -2, 435, -53, 52, 370, -346, -329, -314, -484, 367, 290, -124, -384, 157, -384, -305, 420, 250, -459, 29, 389, 81, 38, -334, -24, -278, 244, -17, -239, 240, -177, -103, -124, 272, 105, 139, -470, 303, -70, -504, 31, -271, 376, 481, -255, 256, -191, 151, 487, -150, 425, 362, -455, -443, -221, 177, 358, 308, -393, 430, 267, 448, -82, -37, -430, 431, -421, -255, 384, -468, -114, -321, 99, 410, 53, -228, 396, 310, 121, -8, 426, -42, -428, -440, -309, 95, -188, -250, 262, -131, 452, 31, -465, 285, 127, -136, 500, 147, -381, -181, 460, 203, 356, 306, -332, -268, 488, -297, 334, 20, -369, 352, 148, -123, -285, 146, 442, 414, 279, -334, 207, 135, 397, -447, -139, -324, 341, -507, 48, -204, -207, 351, 69, 321], "dtype": "int16"}, {"in_buffer2": [-343, 83, 163, 279, -64, 100, -417, -101, -315, 44, 94, 377, -256, -293, 369, 370, 178, 131, -220, -396, 418, -359, 304, -303, 349, -7, -125, -303, 98, 505, 42, 118, 461, 13, -144, 67, 487, 215, 405, 383, -311, -192, -129, -227, 0, 8, 394, -237, -142, -410, 43, 198, 442, 197, -129, -508, -489, 463, 187, 283, -382, 100, -135, -436, -414, -153, 62, -154, 419, 13, 222, 273, -389, -405, 451, 385, 82, -187, 430, -336, 227, -244, -364, -137, -303, 496, 50, 75, -101, -13, 270, 174, -471, -500, -454, 464, 193, 369, -476, -186, 266, -26, -426, 280, -469, -115, 360, 101, -501, 219, 258, 419, -205, -67, -432, -83, -480, 353, -330, 357, -384, 22, 294, 453, -237, 229, -338, -41, 42, 37, -141, -123, -328, -219, -68, 57, -24, -459, 77, 171, -226, -205, -232, -131, 125, -123, 258, -46, 3, -225, -418, -472, -286, -459, 363, -39, -243, 81, 368, 235, -216, 430, -184, -112, -493, 383, 95, -154, 328, 400, -102, -158, -62, 127, -264, 400, -332, -229, -189, -452, 492, 487, 317, 24, 270, 118, 352, 254, -252, -338, 451, 131, 237, 273, -373, -65, 508, -476, 86, -421, -51, -427, 377, -147, 109, -127, 331, -279, 184, -113, 16, 498, -360, -306, 413, -465, -363, -71, -402, 293, -487, -183, -48, 165, 444, -86, 377, -288, 374, -426, -395, -384, -67, -319, 83, 260, 161, -292, 360, -234, 416, -383, -284, 106, -5, 316, 251, -112, -391, -279, -186, -422, -43, -204, -225, 336], "dtype": "int16"}], "outputs": [{"out_buffer": [-171, -302, 210, 731, 53, 378, -737, -580, 8, 122, 345, 795, -61, 88, 216, 87, -325, -265, -9, 21, 183, -526, 546, -201, 641, -514, -38, -772, -344, 68, 2, 250, 549, 191, -260, 15, 289, 256, 598, 455, -337, -18, -90, 263, -425, 365, 56, -14, -54, -559, 380, -173, 607, -72, -104, -499, -156, 510, -253, 378, -117, 178, 269, -454, -811, -364, 526, -85, 662, -205, 419, 25, 121, -96, 786, 879, 1, -2, 366, -146, 565, -110, -777, -331, 169, 133, -285, -173, 142, 22, 555, -20, -324, -36, -819, 411, 591, 440, -565, -575, 42, 439, 23, 23, -716, -449, 545, -10, -374, 176, 290, 471, -174, -172, -230, 201, -748, 392, -691, 162, -221, 463, 292, 888, -290, 281, 32, -387, -287, -277, -625, 244, -38, -343, -452, 214, -408, -764, 497, 421, -685, -176, 157, -50, 163, -457, 234, -324, 247, -242, -657, -232, -463, -562, 239, 233, -138, 220, -102, 538, -286, -74, -153, -383, -117, 864, -160, 102, 137, 551, 385, -308, 363, 489, -719, -43, -553, -52, 169, -144, 99, 917, 584, 472, 188, 81, -78, 685, -673, -593, 835, -337, 123, -48, -274, 345, 561, -704, 482, -111, 70, -435, 803, -189, -319, -567, 22, -184, -4, -363, 278, 367, 92, -275, -52, -180, -236, -207, 98, 440, -868, -364, 412, 368, 800, 220, 45, -556, 862, -723, -61, -364, -436, 33, 231, 137, -124, -146, 802, 180, 695, -717, -77, 241, 392, -131, 112, -436, -50, -786, -138, -626, -250, 147, -156, 657], "dtype": "int16"}]}}
{"kernel_name": "vectoradd_relu_bfloat16", "prompt": "/*\nThis AIE kernel computes the elementwise vector addition of two bfloat16 vectors of length 256, followed by the ReLU activation. Each output is given by out[i] = max(0, in0[i] + in1[i]).\n>>> vectoradd_relu_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875], [-0.7265625, -1.3828125, -1.5859375, 0.609375, -1.1875, -0.5078125, -0.59765625, -0.052490234375])\n[1.0390625, 0.0, 0.0, 2.84375, 0.6796875, 0.0, 0.3515625, 0.0]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin0 size: 256\nin1 size: 256\nout size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid vectoradd_relu_bfloat16(bfloat16 *in0, bfloat16 *in1, bfloat16 *out) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t N = 256;\n    for (int i = 0; i < N; i++) {\n        bfloat16 sum = in0[i] + in1[i];\n        bfloat16 relu = sum > 0 ? sum : 0;\n        out[i] = relu;\n    }\n}", "program_code": "extern \"C\" {\n    void vectoradd_relu_bfloat16_wrapper(bfloat16 *in0, bfloat16 *in1, bfloat16 *out) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        vectoradd_relu_bfloat16(in0, in1, out);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in0": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625, 0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625, 0.671875, 0.408203125, -0.76953125, 0.5390625, -0.67578125, 0.03173828125, -0.63671875, 0.67578125, 0.578125, -0.2080078125, 0.396484375, -1.09375, -1.4921875, 0.439453125, 0.1669921875, 0.63671875, 2.390625, 0.9453125, -0.9140625, 1.1171875, -1.3125, -0.4609375, -0.068359375, 1.7109375, -0.74609375, -0.828125, -0.0986328125, -0.6640625, 1.125, -1.078125, -1.1484375, -0.4375, -0.498046875, 1.9296875, 0.94921875, 0.08740234375, -1.2265625, 0.84375, -1.0, -1.546875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.65234375, -1.03125, 0.6796875, -0.8046875, -0.69140625, -0.455078125, 0.0174560546875, -0.353515625, -1.375, -0.64453125, -2.21875, 0.625, -1.6015625, -1.1015625, 0.05224609375, -0.73828125, 1.546875, -1.2890625, 0.267578125, -0.039306640625, -1.171875, 0.5234375, -0.171875, 0.7734375, 0.82421875, 2.15625, 1.3359375, -0.369140625, -0.2392578125, 1.1015625, 0.65625, 0.640625, -1.6171875, -0.0242919921875, -0.73828125, 0.279296875, -0.09814453125, 0.91015625, 0.31640625, 0.78515625, -0.466796875, -0.9453125, -0.41015625, -0.0169677734375, 0.37890625, 2.265625, -0.042236328125, -0.95703125, -0.345703125, -0.462890625, 0.482421875, -1.5390625, 0.0634765625, 0.15625, 0.232421875, -0.59765625, -0.23828125, -1.421875, -0.494140625, -0.54296875, 0.416015625, -1.15625, 0.78125, 1.4921875, -2.0625, 0.42578125, 0.67578125, -0.63671875, -0.396484375, -0.1328125, -0.296875, -0.30859375, -1.6796875, 1.1484375, 1.078125, -0.8125, -1.46875, 0.51953125, -0.57421875, 0.1416015625, -0.318359375, 0.69140625, 0.6953125], "dtype": "bfloat16"}, {"in1": [-0.7265625, -1.3828125, -1.5859375, 0.609375, -1.1875, -0.5078125, -0.59765625, -0.052490234375, -1.9375, 0.1884765625, 0.5234375, 0.08837890625, -0.310546875, 0.09716796875, 0.3984375, -2.765625, 1.953125, 0.390625, -0.65234375, -0.390625, 0.494140625, -0.1162109375, -2.03125, 2.0625, -0.1103515625, 1.0234375, -0.69140625, 1.5390625, 0.287109375, 0.609375, -1.046875, 1.2109375, 0.69140625, 1.3046875, -0.62890625, -0.48046875, 2.296875, -1.0625, -0.1357421875, 1.140625, 0.09765625, 0.58203125, -0.400390625, 0.369140625, -1.3046875, 1.65625, -0.1181640625, -0.6796875, 0.66796875, -0.4609375, -1.3359375, -1.34375, 0.6953125, -0.1591796875, -0.1337890625, 1.078125, -1.125, -0.73046875, -0.384765625, 0.09423828125, -0.042236328125, -0.287109375, -0.0615234375, -0.107421875, -0.71875, -0.8125, 0.275390625, -0.890625, -1.15625, -0.3125, -0.1572265625, 2.25, -0.703125, 0.94140625, 0.74609375, -1.1875, 0.7734375, -1.1875, -2.65625, 0.60546875, -1.7578125, 0.451171875, -0.68359375, 1.65625, 1.0703125, -0.453125, -0.6875, -1.2109375, -0.44140625, -0.28125, -0.365234375, 0.15625, 0.578125, 0.349609375, -0.765625, -1.4375, 1.3671875, -0.6875, -0.65234375, -0.51953125, -1.84375, -0.478515625, -0.48046875, 0.62109375, 0.69921875, 0.0037689208984375, 0.93359375, 0.33984375, -0.015625, 0.1611328125, -0.1904296875, -0.39453125, -0.267578125, -1.125, 0.28125, -0.9921875, 0.83984375, -0.2490234375, 0.049560546875, 0.494140625, 0.64453125, -1.5703125, -0.20703125, 0.87890625, -1.6953125, 0.38671875, -2.25, -1.0234375, 0.03857421875, -1.65625, -0.984375, -1.46875, 1.6484375, 0.1640625, 0.56640625, -0.22265625, -0.353515625, -1.6171875, -0.291015625, -0.76171875, 0.859375, 1.140625, 1.46875, 0.8515625, -0.59765625, -1.1171875, 0.765625, 0.35546875, -1.765625, 0.35546875, 0.81640625, 0.058837890625, -0.1845703125, -0.80859375, -1.4453125, 0.80078125, -0.30859375, -0.2333984375, 1.734375, 0.68359375, 0.37109375, 0.1416015625, 1.5234375, 1.71875, 0.9296875, 0.58203125, -2.09375, 0.12353515625, -0.1298828125, 0.09375, 0.94140625, -2.734375, -0.5703125, 0.26953125, -0.466796875, -1.4140625, 0.8671875, 0.27734375, -0.97265625, 0.314453125, 0.8203125, 0.005279541015625, 0.80078125, 0.078125, -0.39453125, -1.15625, -0.0859375, 0.1943359375, 0.875, -0.115234375, 0.45703125, -0.96484375, -0.78125, -0.1103515625, -1.0546875, 0.8203125, 0.462890625, 0.279296875, 0.33984375, 2.015625, -0.46875, -2.203125, 0.19921875, -0.050537109375, -0.515625, -0.98046875, -0.439453125, 0.181640625, -0.50390625, 2.40625, -0.9609375, -0.79296875, -2.28125, 0.251953125, -2.015625, -0.5390625, -0.275390625, -0.7109375, 1.7421875, 0.99609375, 1.3203125, -0.8828125, 1.125, 0.49609375, 0.76953125, 1.03125, -0.91015625, -0.423828125, 0.86328125, -2.65625, 1.515625, 0.5546875, -0.045654296875, 0.220703125, -1.03125, -0.349609375, 1.1015625, 1.296875, 2.703125, -0.07373046875, -0.66015625, -0.515625, -1.015625, -0.07763671875, 0.3828125, -0.0341796875, 1.09375, -0.234375, -0.34765625, -0.58203125, -1.6328125, -1.5703125, -1.1796875, 1.3046875, 0.89453125, 1.375], "dtype": "bfloat16"}], "outputs": [{"out": [1.0390625, 0.0, 0.0, 2.84375, 0.6796875, 0.0, 0.3515625, 0.0, 0.0, 0.59765625, 0.66796875, 1.5390625, 0.451171875, 0.21875, 0.84375, 0.0, 3.4375, 0.185546875, 0.0, 0.0, 0.0, 0.53515625, 0.0, 1.3203125, 2.15625, 0.0, 0.0, 1.3515625, 1.8203125, 2.078125, 0.0, 1.59375, 0.0, 0.0, 0.0, 0.0, 3.53125, 0.140625, 0.0, 0.8359375, 0.0, 0.0, 0.0, 2.328125, 0.0, 1.21875, 0.0, 0.09765625, 0.0, 0.0, 0.0, 0.0, 0.18359375, 0.0, 0.0, 1.5078125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.57421875, 2.375, 0.4375, 0.0, 1.1484375, 0.0, 0.0, 0.0, 0.0, 0.66015625, 0.0, 1.3515625, 0.0, 0.1171875, 2.5625, 1.4453125, 0.4921875, 0.0, 0.0, 0.7734375, 0.0, 1.375, 0.78515625, 1.328125, 0.0, 0.0, 1.375, 1.1015625, 0.0, 0.0, 0.0390625, 0.0, 0.0, 1.59375, 0.0, 1.9453125, 0.51953125, 0.0, 1.90625, 1.6484375, 1.6796875, 0.51171875, 0.0, 0.78125, 0.013671875, 0.0, 1.78125, 0.0, 0.6640625, 1.4140625, 1.0234375, 0.0, 0.091796875, 2.203125, 0.0, 0.2373046875, 0.0, 0.828125, 0.7109375, 0.0, 0.0, 0.0, 0.97265625, 0.1953125, 0.0, 0.453125, 0.224609375, 0.0, 0.10546875, 0.0, 0.0, 1.578125, 1.6328125, 1.484375, 1.796875, 0.0, 0.0, 1.46875, 0.0, 0.0, 0.75, 1.7734375, 0.0, 0.0, 0.0, 0.13671875, 0.81640625, 0.0, 0.5859375, 0.24609375, 0.0, 2.078125, 2.46875, 1.8046875, 0.0, 1.421875, 0.0, 0.0, 1.0546875, 0.41015625, 1.859375, 0.0, 0.28515625, 0.0, 0.0, 0.0, 0.0625, 0.0, 0.0, 0.33203125, 0.466796875, 0.0, 0.15625, 0.0, 0.23046875, 0.0, 0.0, 0.24609375, 0.13671875, 1.4296875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6484375, 1.234375, 1.1015625, 2.5, 3.34375, 0.0, 0.0, 1.296875, 0.60546875, 0.125, 0.0, 0.0, 0.0, 0.0, 2.3125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.953125, 0.36328125, 0.0, 0.6640625, 0.9765625, 0.0, 1.09375, 0.0, 0.0, 0.265625, 0.0, 0.09375, 0.060546875, 0.0, 0.63671875, 0.0, 0.431640625, 2.59375, 0.0, 3.125, 0.6015625, 0.0, 0.0, 0.0, 0.0, 0.07421875, 0.0, 2.25, 0.84375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.984375, 1.5859375, 2.0625], "dtype": "bfloat16"}]}, "tolerances": {"atol": 0.02, "rtol": 0.02}}
{"kernel_name": "vectormatrix_mult_int32", "prompt": "/*\nA kernel that performs vector-matrix multiplication of a vector with shape (16,) and matrix of (16,16).\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nvector size: 16\nmatrix size: 256\nresult size: 16\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid vectormatrix_mult_int32(int32_t *vector, int32_t *matrix, int32_t *result) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr uint32_t vector_size = 16;\n    constexpr uint32_t matrix_cols = 16;\n    for (uint32_t i = 0; i < matrix_cols; i++) {\n        result[i] = 0;\n    }\n    for (uint32_t i = 0; i < matrix_cols; i++) {\n        for (uint32_t j = 0; j < vector_size; j++) {\n            result[i] += vector[j] * matrix[j * matrix_cols + i];\n        }\n    }\n}", "program_code": "extern \"C\" {\n    void vectormatrix_mult_int32_wrapper(int32_t *vector, int32_t *matrix, int32_t *result) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        vectormatrix_mult_int32(vector, matrix, result);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"vector": [2, 5, -10, -7, -7, -3, -1, 9, 8, -6, -4, 2, -9, -4, -3, 4], "dtype": "int32"}, {"matrix": [[7, -5, 3, -2, -1, 9, 6, 9, -5, 5, 5, -10, 8, -7, 7, 9], [9, 9, 4, -3, -10, -9, -1, -10, 0, -7, 1, 8, -8, -10, -10, -6], [-5, -4, -2, 7, 5, -6, -1, 0, -9, -9, -3, -1, -7, -4, 1, 4], [8, -10, 4, -7, 2, 0, 1, -6, -4, -6, 5, -7, 2, -6, -2, 4], [5, -7, 5, 3, 6, 7, -5, -1, -7, -10, -5, -10, 7, 8, -6, -8], [6, -7, -8, 0, 3, 6, -3, -1, -10, 0, 8, 1, -8, -8, -7, -7], [8, 4, -7, 7, 8, 4, -1, -9, -6, 0, 1, -2, 1, -8, 9, 6], [-10, -10, -4, 9, 4, 0, 9, -2, 3, -8, -7, -8, 1, 3, 6, -2], [-2, 9, -2, -8, -7, 2, 4, -10, -6, -7, 3, 1, 3, 3, 1, 6], [4, 6, 9, -9, -2, -10, -6, -4, 3, -3, 5, -1, 8, -2, 5, 1], [-4, 5, -9, 2, -7, 8, 5, -7, 0, 2, -4, -7, -5, 1, -10, 1], [-2, 0, 1, -5, 5, -2, -8, 9, 9, 4, -7, -7, -3, -1, -1, -1], [-7, 4, 8, 2, -7, -1, 0, 3, -3, -3, -9, 2, -8, -8, -9, -5], [-2, -6, -10, 1, -8, -5, 6, -2, -9, 7, 6, -7, -2, -6, 6, -7], [-3, -7, 8, 7, -9, 8, 7, -8, -5, -5, 2, 2, -8, 5, -3, -3], [1, 7, -4, -3, 8, 1, 9, 7, -1, 4, -1, 8, -10, -1, 1, 7]], "dtype": "int32"}], "outputs": [{"result": [-42, 174, -126, -70, 9, 11, 159, 34, 246, 97, 0, 140, 69, 128, 162, 119], "dtype": "int32"}]}}
{"kernel_name": "vectormult_bfloat16", "prompt": "/*\nThis is the implementation of an AIE kernel that performs an elementwise vector multiplication of 2 input vectors and stores the result in 1 output vector.\n>>> vectormult_bfloat16([3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375], [0.35546875, -0.8046875, -3.265625, 0.92578125, -1.8125, 0.10400390625, 1.4609375, 0.2578125], 64)\n[1.2578125, -0.64453125, -6.40625, 4.125, -6.78125, -0.203125, 2.78125, -0.078125]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer1 size: 64\nin_buffer2 size: 64\nout_buffer size: 64\nvector_size: 64\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid vectormult_bfloat16(bfloat16 *in_buffer1, bfloat16 *in_buffer2, bfloat16 *out_buffer, int32_t vector_size) {\n    // Implementation goes here\n}\n", "canonical_solution": "for (int32_t i = 0; i < vector_size; ++i) {\n        out_buffer[i] = in_buffer1[i] * in_buffer2[i];\n    }\n}", "program_code": "extern \"C\" {\n    void vectormult_bfloat16_wrapper(bfloat16 *in_buffer1, bfloat16 *in_buffer2, bfloat16 *out_buffer, int32_t vector_size) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        vectormult_bfloat16(in_buffer1, in_buffer2, out_buffer, vector_size);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer1": [3.53125, 0.80078125, 1.9609375, 4.46875, 3.734375, -1.953125, 1.8984375, -0.302734375, -0.2060546875, 0.8203125, 0.2890625, 2.90625, 1.5234375, 0.2431640625, 0.88671875, 0.66796875, 2.984375, -0.41015625, 0.625, -1.7109375, -5.09375, 1.3046875, 1.7265625, -1.484375, 4.53125, -2.90625, 0.09130859375, -0.375, 3.0625, 2.9375, 0.310546875, 0.7578125, -1.7734375, -3.96875, -0.6953125, 0.3125, 2.453125, 2.40625, -0.7734375, -0.60546875, -2.09375, -2.84375, -3.40625, 3.90625, -1.015625, -0.875, -2.5, 1.5546875, -3.234375, -0.42578125, -1.7890625, 0.7734375, -1.0234375, -2.359375, -0.056396484375, 0.85546875, 0.1328125, 0.60546875, -1.265625, -0.7265625, -1.34375, -0.71875, -1.625, -3.453125], "dtype": "bfloat16"}, {"in_buffer2": [0.35546875, -0.8046875, -3.265625, 0.92578125, -1.8125, 0.10400390625, 1.4609375, 0.2578125, 2.28125, -2.46875, 0.8046875, -1.3671875, -1.7421875, -1.15625, -0.625, 0.1123046875, -2.328125, 1.8046875, 0.9296875, -3.078125, 2.96875, 3.796875, 2.359375, -0.359375, -2.140625, 2.109375, -0.8046875, 2.4375, 0.416015625, 1.953125, 0.7109375, 1.4140625, 0.02099609375, 3.578125, 0.25390625, 0.8046875, 3.765625, -2.703125, -2.546875, 1.9375, -2.34375, 3.890625, -0.828125, -1.4921875, 3.84375, 2.96875, 3.734375, 1.8125, -1.71875, 3.8125, -0.53515625, 1.6015625, 1.890625, -0.310546875, 1.2265625, 1.84375, 0.75390625, -2.203125, 0.59765625, 2.65625, -1.390625, -0.298828125, -0.87109375, 3.703125], "dtype": "bfloat16"}], "outputs": [{"out_buffer": [1.2578125, -0.64453125, -6.40625, 4.125, -6.78125, -0.203125, 2.78125, -0.078125, -0.470703125, -2.03125, 0.232421875, -3.96875, -2.65625, -0.28125, -0.5546875, 0.0751953125, -6.9375, -0.73828125, 0.58203125, 5.28125, -15.125, 4.96875, 4.0625, 0.53515625, -9.6875, -6.125, -0.0732421875, -0.9140625, 1.2734375, 5.75, 0.220703125, 1.0703125, -0.037353515625, -14.1875, -0.1767578125, 0.251953125, 9.25, -6.5, 1.96875, -1.171875, 4.90625, -11.0625, 2.828125, -5.84375, -3.90625, -2.59375, -9.3125, 2.8125, 5.5625, -1.625, 0.95703125, 1.2421875, -1.9375, 0.734375, -0.0693359375, 1.578125, 0.10009765625, -1.3359375, -0.7578125, -1.9296875, 1.8671875, 0.21484375, 1.4140625, -12.8125], "dtype": "bfloat16"}], "rtps": [{"vector_size": 64, "dtype": "int32"}]}}
{"kernel_name": "vectorsubtract_bfloat16", "prompt": "/*\nThis AIE kernel performs elementwise subtraction between two bfloat16 input vectors (of length 256), writing the per-element difference to the output buffer.\n>>> vectorsubtract_bfloat16([1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875], [-0.7265625, -1.3828125, -1.5859375, 0.609375, -1.1875, -0.5078125, -0.59765625, -0.052490234375])\n[2.5, 1.78125, 2.5625, 1.625, 3.0625, -0.46875, 1.546875, -0.0986328125]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\ninput_a size: 256\ninput_b size: 256\noutput size: 256\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid vectorsubtract_bfloat16(bfloat16 *input_a, bfloat16 *input_b, bfloat16 *output) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t NUM_ELEMENTS = 256;\n    for (int i = 0; i < NUM_ELEMENTS; ++i) {\n        output[i] = input_a[i] - input_b[i];\n    }\n}", "program_code": "extern \"C\" {\n    void vectorsubtract_bfloat16_wrapper(bfloat16 *input_a, bfloat16 *input_b, bfloat16 *output) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        vectorsubtract_bfloat16(input_a, input_b, output);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"input_a": [1.765625, 0.400390625, 0.98046875, 2.234375, 1.8671875, -0.9765625, 0.94921875, -0.1513671875, -0.10302734375, 0.41015625, 0.14453125, 1.453125, 0.76171875, 0.12158203125, 0.443359375, 0.333984375, 1.4921875, -0.205078125, 0.3125, -0.85546875, -2.546875, 0.65234375, 0.86328125, -0.7421875, 2.265625, -1.453125, 0.045654296875, -0.1875, 1.53125, 1.46875, 0.1552734375, 0.37890625, -0.88671875, -1.984375, -0.34765625, 0.15625, 1.2265625, 1.203125, -0.38671875, -0.302734375, -1.046875, -1.421875, -1.703125, 1.953125, -0.5078125, -0.4375, -1.25, 0.77734375, -1.6171875, -0.212890625, -0.89453125, 0.38671875, -0.51171875, -1.1796875, -0.0281982421875, 0.427734375, 0.06640625, 0.302734375, -0.6328125, -0.36328125, -0.671875, -0.359375, -0.8125, -1.7265625, 0.177734375, -0.40234375, -1.6328125, 0.462890625, -0.90625, 0.052001953125, 0.73046875, 0.12890625, 1.140625, -1.234375, 0.40234375, -0.68359375, -0.87109375, -0.578125, -0.3125, 0.05615234375, -1.1640625, 0.90234375, 0.46484375, -1.5390625, 1.484375, 1.8984375, 1.1796875, -0.1796875, -1.0703125, 1.0546875, -0.40234375, 1.21875, 0.2080078125, 0.9765625, 0.35546875, 0.70703125, 0.010498046875, 1.7890625, 0.126953125, 0.40234375, 1.8828125, -1.3515625, -1.2734375, 0.96875, -1.171875, 1.9453125, -0.4140625, -0.74609375, 1.921875, 1.484375, 1.8671875, 0.90625, -0.859375, 1.90625, -0.267578125, 0.80078125, 0.9453125, -0.1552734375, 0.61328125, 0.921875, 0.376953125, -1.1015625, 0.298828125, 1.328125, -0.6953125, -0.1494140625, -0.435546875, 1.8515625, 0.671875, 0.408203125, -0.76953125, 0.5390625, -0.67578125, 0.03173828125, -0.63671875, 0.67578125, 0.578125, -0.2080078125, 0.396484375, -1.09375, -1.4921875, 0.439453125, 0.1669921875, 0.63671875, 2.390625, 0.9453125, -0.9140625, 1.1171875, -1.3125, -0.4609375, -0.068359375, 1.7109375, -0.74609375, -0.828125, -0.0986328125, -0.6640625, 1.125, -1.078125, -1.1484375, -0.4375, -0.498046875, 1.9296875, 0.94921875, 0.08740234375, -1.2265625, 0.84375, -1.0, -1.546875, 1.1875, 0.31640625, 0.921875, 0.318359375, 0.85546875, -0.65234375, -1.03125, 0.6796875, -0.8046875, -0.69140625, -0.455078125, 0.0174560546875, -0.353515625, -1.375, -0.64453125, -2.21875, 0.625, -1.6015625, -1.1015625, 0.05224609375, -0.73828125, 1.546875, -1.2890625, 0.267578125, -0.039306640625, -1.171875, 0.5234375, -0.171875, 0.7734375, 0.82421875, 2.15625, 1.3359375, -0.369140625, -0.2392578125, 1.1015625, 0.65625, 0.640625, -1.6171875, -0.0242919921875, -0.73828125, 0.279296875, -0.09814453125, 0.91015625, 0.31640625, 0.78515625, -0.466796875, -0.9453125, -0.41015625, -0.0169677734375, 0.37890625, 2.265625, -0.042236328125, -0.95703125, -0.345703125, -0.462890625, 0.482421875, -1.5390625, 0.0634765625, 0.15625, 0.232421875, -0.59765625, -0.23828125, -1.421875, -0.494140625, -0.54296875, 0.416015625, -1.15625, 0.78125, 1.4921875, -2.0625, 0.42578125, 0.67578125, -0.63671875, -0.396484375, -0.1328125, -0.296875, -0.30859375, -1.6796875, 1.1484375, 1.078125, -0.8125, -1.46875, 0.51953125, -0.57421875, 0.1416015625, -0.318359375, 0.69140625, 0.6953125], "dtype": "bfloat16"}, {"input_b": [-0.7265625, -1.3828125, -1.5859375, 0.609375, -1.1875, -0.5078125, -0.59765625, -0.052490234375, -1.9375, 0.1884765625, 0.5234375, 0.08837890625, -0.310546875, 0.09716796875, 0.3984375, -2.765625, 1.953125, 0.390625, -0.65234375, -0.390625, 0.494140625, -0.1162109375, -2.03125, 2.0625, -0.1103515625, 1.0234375, -0.69140625, 1.5390625, 0.287109375, 0.609375, -1.046875, 1.2109375, 0.69140625, 1.3046875, -0.62890625, -0.48046875, 2.296875, -1.0625, -0.1357421875, 1.140625, 0.09765625, 0.58203125, -0.400390625, 0.369140625, -1.3046875, 1.65625, -0.1181640625, -0.6796875, 0.66796875, -0.4609375, -1.3359375, -1.34375, 0.6953125, -0.1591796875, -0.1337890625, 1.078125, -1.125, -0.73046875, -0.384765625, 0.09423828125, -0.042236328125, -0.287109375, -0.0615234375, -0.107421875, -0.71875, -0.8125, 0.275390625, -0.890625, -1.15625, -0.3125, -0.1572265625, 2.25, -0.703125, 0.94140625, 0.74609375, -1.1875, 0.7734375, -1.1875, -2.65625, 0.60546875, -1.7578125, 0.451171875, -0.68359375, 1.65625, 1.0703125, -0.453125, -0.6875, -1.2109375, -0.44140625, -0.28125, -0.365234375, 0.15625, 0.578125, 0.349609375, -0.765625, -1.4375, 1.3671875, -0.6875, -0.65234375, -0.51953125, -1.84375, -0.478515625, -0.48046875, 0.62109375, 0.69921875, 0.0037689208984375, 0.93359375, 0.33984375, -0.015625, 0.1611328125, -0.1904296875, -0.39453125, -0.267578125, -1.125, 0.28125, -0.9921875, 0.83984375, -0.2490234375, 0.049560546875, 0.494140625, 0.64453125, -1.5703125, -0.20703125, 0.87890625, -1.6953125, 0.38671875, -2.25, -1.0234375, 0.03857421875, -1.65625, -0.984375, -1.46875, 1.6484375, 0.1640625, 0.56640625, -0.22265625, -0.353515625, -1.6171875, -0.291015625, -0.76171875, 0.859375, 1.140625, 1.46875, 0.8515625, -0.59765625, -1.1171875, 0.765625, 0.35546875, -1.765625, 0.35546875, 0.81640625, 0.058837890625, -0.1845703125, -0.80859375, -1.4453125, 0.80078125, -0.30859375, -0.2333984375, 1.734375, 0.68359375, 0.37109375, 0.1416015625, 1.5234375, 1.71875, 0.9296875, 0.58203125, -2.09375, 0.12353515625, -0.1298828125, 0.09375, 0.94140625, -2.734375, -0.5703125, 0.26953125, -0.466796875, -1.4140625, 0.8671875, 0.27734375, -0.97265625, 0.314453125, 0.8203125, 0.005279541015625, 0.80078125, 0.078125, -0.39453125, -1.15625, -0.0859375, 0.1943359375, 0.875, -0.115234375, 0.45703125, -0.96484375, -0.78125, -0.1103515625, -1.0546875, 0.8203125, 0.462890625, 0.279296875, 0.33984375, 2.015625, -0.46875, -2.203125, 0.19921875, -0.050537109375, -0.515625, -0.98046875, -0.439453125, 0.181640625, -0.50390625, 2.40625, -0.9609375, -0.79296875, -2.28125, 0.251953125, -2.015625, -0.5390625, -0.275390625, -0.7109375, 1.7421875, 0.99609375, 1.3203125, -0.8828125, 1.125, 0.49609375, 0.76953125, 1.03125, -0.91015625, -0.423828125, 0.86328125, -2.65625, 1.515625, 0.5546875, -0.045654296875, 0.220703125, -1.03125, -0.349609375, 1.1015625, 1.296875, 2.703125, -0.07373046875, -0.66015625, -0.515625, -1.015625, -0.07763671875, 0.3828125, -0.0341796875, 1.09375, -0.234375, -0.34765625, -0.58203125, -1.6328125, -1.5703125, -1.1796875, 1.3046875, 0.89453125, 1.375], "dtype": "bfloat16"}], "outputs": [{"output": [2.5, 1.78125, 2.5625, 1.625, 3.0625, -0.46875, 1.546875, -0.0986328125, 1.8359375, 0.2216796875, -0.37890625, 1.3671875, 1.0703125, 0.0244140625, 0.044921875, 3.09375, -0.4609375, -0.59375, 0.96484375, -0.46484375, -3.046875, 0.76953125, 2.890625, -2.8125, 2.375, -2.46875, 0.73828125, -1.7265625, 1.2421875, 0.859375, 1.203125, -0.83203125, -1.578125, -3.28125, 0.28125, 0.63671875, -1.0703125, 2.265625, -0.25, -1.4453125, -1.140625, -2.0, -1.3046875, 1.5859375, 0.796875, -2.09375, -1.1328125, 1.453125, -2.28125, 0.248046875, 0.44140625, 1.734375, -1.203125, -1.0234375, 0.10546875, -0.6484375, 1.1875, 1.03125, -0.248046875, -0.45703125, -0.62890625, -0.072265625, -0.75, -1.6171875, 0.8984375, 0.41015625, -1.90625, 1.3515625, 0.25, 0.365234375, 0.88671875, -2.125, 1.84375, -2.171875, -0.34375, 0.50390625, -1.640625, 0.609375, 2.34375, -0.55078125, 0.59375, 0.451171875, 1.1484375, -3.1875, 0.4140625, 2.34375, 1.8671875, 1.03125, -0.62890625, 1.3359375, -0.037109375, 1.0625, -0.37109375, 0.625, 1.125, 2.140625, -1.359375, 2.46875, 0.78125, 0.921875, 3.71875, -0.875, -0.79296875, 0.34765625, -1.875, 1.9453125, -1.34375, -1.0859375, 1.9375, 1.3203125, 2.0625, 1.296875, -0.59375, 3.03125, -0.546875, 1.796875, 0.10546875, 0.09375, 0.5625, 0.427734375, -0.267578125, 0.46875, 0.5078125, 0.44921875, 1.0, -0.53515625, 1.8125, 2.875, 0.6328125, 2.0625, 0.21484375, 2.0, -2.328125, -0.1328125, -1.203125, 0.8984375, 0.9296875, 1.40625, 0.6875, -0.33203125, -2.34375, -0.703125, -1.3046875, -0.21484375, 2.984375, 2.0625, -1.6796875, 0.76171875, 0.453125, -0.81640625, -0.8828125, 1.6484375, -0.5625, -0.01953125, 1.34375, -1.46875, 1.4375, -0.84375, -2.875, -1.125, -0.8671875, 1.7890625, -0.57421875, -1.6328125, -2.15625, 0.26171875, 1.09375, -1.671875, 1.3203125, 0.22265625, -0.01953125, 3.046875, 1.421875, -0.921875, -0.5625, 2.09375, -1.671875, -0.96875, 0.515625, -0.296875, -1.171875, -1.3828125, -1.4453125, -2.296875, 1.015625, -0.4453125, -1.015625, -0.142578125, -1.609375, 1.6640625, -1.75, 1.234375, 0.7421875, -1.0625, 1.578125, -0.9921875, 0.310546875, 0.546875, 1.8125, -0.6796875, 0.099609375, 1.9609375, 0.90234375, 0.70703125, 1.15625, -0.63671875, 0.416015625, -0.921875, 0.78125, -2.5, 1.875, 1.109375, 3.0625, -0.71875, 1.0703125, 0.12890625, 0.2578125, 1.09375, 0.5234375, -1.0390625, -2.28125, 0.5390625, -1.5859375, -0.013671875, -2.3125, -0.96875, 1.0625, 0.65625, -1.4609375, 2.421875, -2.9375, -1.046875, -0.498046875, 0.1953125, -0.125, 1.1328125, 0.390625, -3.359375, -2.28125, 0.75, 0.0234375, 0.119140625, 0.8828125, -0.21875, -0.69140625, -1.6484375, 0.0546875, 1.3125, -0.46484375, -0.88671875, 2.15625, 0.99609375, 1.3203125, -1.625, -0.203125, -0.6796875], "dtype": "bfloat16"}]}}
{"kernel_name": "vectorsubtract_int8", "prompt": "/*\nThis is the implementation of an AIE kernel that performs a vector subtraction of 2 input vectors and stores the result in 1 output vector.\n>>> vectorsubtract_int8([44, -118, -1, 12, -81, 42, 68, 23], [35, -106, -105, 115, 64, 69, -28, -34])\n[9, -12, 104, -103, 111, -27, 96, 57]\nThis kernel should be optimized for the following input/output buffer shapes and parameters:\nin_buffer1 size: 512\nin_buffer2 size: 512\nout_buffer size: 512\n*/\n#include <aie_api/aie.hpp>\n#include \"aie_kernel_utils.h\"\n\nvoid vectorsubtract_int8(int8_t *in_buffer1, int8_t *in_buffer2, int8_t *out_buffer) {\n    // Implementation goes here\n}\n", "canonical_solution": "constexpr int32_t nbytes = 512;\n    for (int32_t i = 0; i < nbytes; ++i) {\n        out_buffer[i] = in_buffer1[i] - in_buffer2[i];\n    }\n}", "program_code": "extern \"C\" {\n    void vectorsubtract_int8_wrapper(int8_t *in_buffer1, int8_t *in_buffer2, int8_t *out_buffer) {\n        ::aie::set_rounding(aie::rounding_mode::positive_inf);\n        event0();\n        vectorsubtract_int8(in_buffer1, in_buffer2, out_buffer);\n        event1();\n    }\n}", "test_vectors": {"inputs": [{"in_buffer1": [44, -118, -1, 12, -81, 42, 68, 23, -11, 38, -106, 55, 64, 76, -95, 88, -61, 51, -50, 26, 123, -46, 34, 91, 67, -10, -3, 11, -25, -3, 101, 88, -119, 36, -12, -20, 83, 94, 33, 31, -107, -47, -39, 37, 114, 86, -26, -30, -92, 55, -123, -16, -41, -70, -85, -52, -58, -68, -53, 100, 88, 61, 4, -114, -40, 26, 50, 118, 12, 77, 76, -59, -70, -71, -87, -30, 65, -62, -56, -6, 102, -3, 46, 74, -89, -54, 106, 79, -41, 40, -27, 7, 46, 72, 95, -6, -40, -34, -21, 17, -47, 11, 13, -28, 37, 102, 115, 108, -103, -62, -119, 86, -51, -21, -81, -110, -56, 24, -33, -42, -119, -101, -50, -106, 20, 23, 110, 37, -13, -120, -83, -123, 80, -109, -59, -34, 115, 18, -90, 85, 69, -98, -120, 117, 126, -57, -75, 71, -49, -121, 110, -93, 47, -99, 57, 94, 64, -119, 62, 94, -46, 59, 6, 122, -29, -32, -66, -7, 88, 39, 21, 76, 49, -4, -120, 77, 115, 2, -93, -10, -99, -125, -66, 5, 19, 66, 80, 71, 19, -116, 75, 45, 14, -69, -57, -98, 39, -31, -5, 56, -96, 93, 81, 35, 65, -65, 20, -119, 77, 50, -92, 57, -54, 17, 9, -1, 82, 85, 113, -96, 34, -76, 66, -97, 90, 23, 5, 74, 66, -100, -101, 116, -56, -89, -22, 23, 96, -67, -7, 35, 106, 57, -61, 126, -7, 51, -81, 75, -83, -76, 70, -14, 43, 38, 60, 55, -60, 70, -12, -100, 88, -17, -73, -94, 99, 4, 17, 0, 40, 29, -94, 0, -24, 79, -124, 36, 103, 122, -46, -75, -36, -99, 30, 5, -105, -47, -90, -90, -50, 50, 28, 104, -115, 106, -72, 116, -30, 111, 29, -111, 113, 112, -30, -49, -7, 25, 113, 4, 49, -112, 103, -23, 70, 11, 46, -86, 108, -81, -13, 58, 53, -120, -36, -97, 58, 113, 28, -8, -45, 97, -17, -127, -47, -128, 103, -63, 117, 23, 50, 103, -17, -22, -103, 41, 111, -22, -113, -71, -24, -59, 120, -93, -71, 49, 42, -26, -81, -76, 39, -9, 108, 46, 43, -117, 59, 64, -85, 46, 33, 91, -75, -46, 92, 47, -37, -37, -48, -127, -95, 0, 119, -84, 64, 14, 105, 63, -48, -29, 74, 26, 27, -75, -90, -100, -35, 12, -53, -74, -45, -7, -22, 120, 17, 42, -65, 86, -119, -44, -80, -56, -16, 75, 72, -33, 34, -60, -111, -122, 125, -122, 51, -3, 117, 68, 27, -97, -102, -81, -60, -99, 39, -1, 114, -8, -75, 116, -73, 19, 34, 3, 20, -53, -87, 76, 115, 75, 126, -28, -101, -78, 39, 52, -92, 116, 20, 104, 55, 87, -64, -50, -113, -108, -22, 15, -92, -32, -9, 20, 70, 5, -7, 99, 44, 18, -66, 58, -37, 30, 31, -105, -69, 50, -88, 79, 42, 7, -42, 13, 11, -63, -100, -11, 17, 60, 44, -43, -73, -123, 40, -80, -94, -76, -47, -79, 117, -33, -93, -59, 38, -63, 71, 41], "dtype": "int8"}, {"in_buffer2": [35, -106, -105, 115, 64, 69, -28, -34, -33, -36, 27, 41, 69, 28, -84, 82, -34, -18, -7, -125, -128, 33, 91, -104, -15, 87, -14, 31, 50, 14, 3, 86, -92, 117, -12, 44, 34, 103, 25, -104, -80, -29, 81, 120, -35, -65, 121, 121, 3, -55, 81, 96, -30, 6, 121, -9, -86, 62, -10, 2, 77, -125, -115, 122, -16, -47, -61, -114, 103, -89, 87, 26, 21, -85, -1, -13, 73, -32, -64, 61, -1, 105, -99, -123, -128, -74, -120, -118, 10, 119, -109, -15, -14, -119, -26, -56, -85, -78, 70, 122, 58, -77, 69, -98, -1, 13, -124, -36, -105, 88, 79, -53, 59, 86, -101, -5, 2, 112, -28, -98, -7, -103, -52, 48, -30, -40, -25, -47, -66, 94, -26, 97, 35, -93, -115, -22, 94, -6, -111, 107, -5, 120, -21, -112, 67, 39, 1, -73, -46, 90, -59, 49, 46, -73, 48, 16, 99, 74, -116, 17, 20, -36, -9, 93, 81, 16, 112, -61, -78, 74, -53, 2, 27, 21, 115, 5, -114, -37, 46, 106, -87, -4, -116, -104, -70, 124, 80, 107, 65, -70, -15, 19, -92, 92, -58, -107, -118, -37, 102, 109, -42, 16, -104, -57, -85, 60, 13, -47, -24, -77, -27, -126, -117, -24, 91, 42, -126, 59, 35, 87, -77, 1, 61, -95, -48, -76, 45, 37, -96, -72, -31, 55, 54, -108, -27, 87, 0, 4, -106, -54, -90, -37, 69, -61, -109, 33, 101, -82, 46, 20, 87, -27, -86, 54, -91, 22, -13, 53, 5, 13, 56, 68, -91, -123, 60, 9, -71, -86, 104, -23, -75, 84, -51, 62, 43, -34, -98, 57, -77, -127, -104, -75, -3, -91, -3, -30, 5, 45, -126, 3, 82, 17, -125, -66, -97, -59, -34, -96, -88, 52, 98, 44, -75, 60, -21, 23, 89, -55, -115, 125, -47, 118, -16, 119, 107, -18, -88, -55, 46, -65, -56, -75, 16, 65, -109, -116, -1, 19, -33, 50, -26, -27, -56, -113, 16, 23, 26, 69, -30, 101, 66, -103, -1, 18, 120, -44, 16, 35, 52, 96, -101, -71, -61, 105, -68, 100, 108, -37, 103, 115, -67, -97, -104, 46, -114, 79, -10, -14, -32, 31, 126, -14, -124, -67, 46, 88, 67, 31, 3, 122, 109, -110, -111, 51, 11, -24, 63, -99, 124, 83, -92, -52, -42, 42, -37, 68, 77, -115, -43, 80, -7, -117, -19, -23, -19, -26, 1, -27, -53, 19, 105, 44, 56, 122, 15, 97, -112, 38, 114, -65, 24, -52, 78, 20, 29, -109, -81, -48, 21, -24, 57, 97, -18, 4, -91, 119, -103, 64, -55, 49, 80, 37, 37, 22, 60, -61, 42, 57, -7, -121, 96, 40, -10, 75, -42, 0, -11, -76, 0, 8, 61, 101, 65, 116, -45, -74, -124, -69, 33, 10, 92, 36, -24, -89, -106, -27, 32, 67, 1, -20, 100, -68, -22, 30, 123, 21, -68, 27, 123, 106, 16, -7, -7, 88, 105, -124, -58, 21, -38, -8, 85, -127, -76, -51, -97, 41, -48, 55, -115, -94, -127, 41], "dtype": "int8"}], "outputs": [{"out_buffer": [9, -12, 104, -103, 111, -27, 96, 57, 22, 74, 123, 14, -5, 48, -11, 6, -27, 69, -43, -105, -5, -79, -57, -61, 82, -97, 11, -20, -75, -17, 98, 2, -27, -81, 0, -64, 49, -9, 8, -121, -27, -18, -120, -83, -107, -105, 109, 105, -95, 110, 52, -112, -11, -76, 50, -43, 28, 126, -43, 98, 11, -70, 119, 20, -24, 73, 111, -24, -91, -90, -11, -85, -91, 14, -86, -17, -8, -30, 8, -67, 103, -108, -111, -59, 39, 20, -30, -59, -51, -79, 82, 22, 60, -65, 121, 50, 45, 44, -91, -105, -105, 88, -56, 70, 38, 89, -17, -112, 2, 106, 58, -117, -110, -107, 20, -105, -58, -88, -5, 56, -112, 2, 2, 102, 50, 63, -121, 84, 53, 42, -57, 36, 45, -16, 56, -12, 21, 24, 21, -22, 74, 38, -99, -27, 59, -96, -76, -112, -3, 45, -87, 114, 1, -26, 9, 78, -35, 63, -78, 77, -66, 95, 15, 29, -110, -48, 78, 54, -90, -35, 74, 74, 22, -25, 21, 72, -27, 39, 117, -116, -12, -121, 50, 109, 89, -58, 0, -36, -46, -46, 90, 26, 106, 95, 1, 9, -99, 6, -107, -53, -54, 77, -71, 92, -106, -125, 7, -72, 101, 127, -65, -73, 63, 41, -82, -43, -48, 26, 78, 73, 111, -77, 5, -2, -118, 99, -40, 37, -94, -28, -70, 61, -110, 19, 5, -64, 96, -71, 99, 89, -60, 94, 126, -69, 102, 18, 74, -99, 127, -96, -17, 13, -127, -16, -105, 33, -47, 17, -17, -113, 32, -85, 18, 29, 39, -5, 88, 86, -64, 52, -19, -84, 27, 17, 89, 70, -55, 65, 31, 52, 68, -24, 33, 96, -102, -17, -95, 121, 76, 47, -54, 87, 10, -84, 25, -81, 4, -49, 117, 93, 15, 68, 45, -109, 14, 2, 24, 59, -92, 19, -106, 115, 86, -108, -61, -68, -60, -26, -59, 123, 109, -45, -52, 94, -89, -27, 29, -27, -12, 47, 9, -100, 9, -15, 87, -86, 91, -46, 80, 2, -83, 81, -102, 23, -9, 22, 127, -106, -76, 101, -35, -22, -10, -56, 110, -126, 67, -39, -64, -124, -81, -113, -109, 93, -83, -15, -75, 60, 65, 60, 55, -32, -40, 114, -83, -125, -115, 98, -98, -122, 10, 26, -81, -37, 94, 87, -111, 70, -50, -57, 119, -23, -48, 114, 2, -56, 126, 41, -2, -87, -15, -19, 36, 65, -46, 112, -120, -17, -27, -75, -121, 31, 16, 101, 19, 99, 1, 96, 11, -57, 27, 49, 39, 48, -2, 12, -21, -33, -81, -75, -18, -98, -124, -12, 16, -3, 30, -45, 89, -46, -60, -90, -124, 54, 55, -120, 84, -85, -94, 43, -57, 12, -82, 41, 62, 104, 66, -93, -64, -58, 82, 47, -87, -101, -47, 42, 115, 89, 37, -5, -99, 63, 68, 107, 40, 85, -69, -37, 30, -85, 87, 118, -66, 49, -81, -14, 26, -14, -112, 87, -116, -4, 24, -28, -61, 81, -15, 112, 78, -72, 77, 51, 29, -28, -42, -74, -45, -114, -103, 31, -58, 0], "dtype": "int8"}]}}
